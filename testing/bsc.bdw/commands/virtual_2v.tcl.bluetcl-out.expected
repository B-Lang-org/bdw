top = /
f1 = /subis/_element_0 /subis/_element_1 /xx/_element_0 /xx/_element_1 /y/_element_0 /y/_element_1 /y/_element_2 /y/_element_3 /zw/_element_0 /zw/_element_1 /zw/_element_2 /zw/_element_3 /zw/_element_4
f2 = 
f3 = 
f4 = /Loop/Body_0/aa_0 /Loop/Body_0/bb_0 /Loop/Body_1/aa_1 /Loop/Body_1/bb_1 /Loop/Body_2/aa_2 /Loop/Body_2/bb_2 /Loop/Body_3/aa_3 /Loop/Body_3/bb_3 /Loop/x_0 /Loop/x_1 /Loop/x_2 /Loop/x_3 /subis/_element_0/barx /subis/_element_0/foo2 /subis/_element_1/barx /subis/_element_1/foo2 /xx/_element_0 /xx/_element_1 /y/_element_0 /y/_element_1 /y/_element_2 /y/_element_3 /zw/_element_0 /zw/_element_1 /zw/_element_2 /zw/_element_3 /zw/_element_4
f5 = / /subis/_element_0 /subis/_element_1
f6 = /Loop /Loop /Loop/Body_0 /Loop/Body_1 /Loop/Body_2 /Loop/Body_3 /subis /xx /y /zw
Command: inst filter *
/
/y
/y/_element_0
/y/_element_1
/y/_element_2
/y/_element_3
/zw
/zw/_element_0
/zw/_element_1
/zw/_element_2
/zw/_element_3
/zw/_element_4
/xx
/xx/_element_0
/xx/_element_1
/Loop
/Loop/x_0
/Loop/x_1
/Loop/x_2
/Loop/x_3
/Loop
/Loop/Body_0
/Loop/Body_0/aa_0
/Loop/Body_0/bb_0
/Loop/Body_1
/Loop/Body_1/aa_1
/Loop/Body_1/bb_1
/Loop/Body_2
/Loop/Body_2/aa_2
/Loop/Body_2/bb_2
/Loop/Body_3
/Loop/Body_3/aa_3
/Loop/Body_3/bb_3
/subis
/subis/_element_0
/subis/_element_0/foo2
/subis/_element_0/barx
/subis/_element_1
/subis/_element_1/foo2
/subis/_element_1/barx
---------
Command: inst filter /*
/
/y
/zw
/xx
/Loop
/Loop
/subis
---------
Command: inst filter r* g*
Caught error:  inst filter: Expected a search expression, found `r* g*'
---------
Command: inst filter /r1/*o*
---------
Command: inst filter /r1/*ll* -kind rule
Caught error:  Unsupported argument to -kind option `rule', must be `Rule', `Synth', `Prim' or `Inst'
---------
Command: inst filter /r1/*ll* -kind Rule
---------
Command: inst filter /r2/*ll* -kind Prim
---------
Command: inst filter /r.*/* -kind Prim
---------
Command: inst filter /r.*/r.* -regexp
---------
Command: inst filter /r.*/^r.* -regexp
---------
Command: inst filter {/r.*/^r[0-9]+} -regexp
---------
Command: inst filter {/r.*/^r[0-9]*} -regexp
---------
Command: inst filter {^r[0-9]+} -regexp
---------
Command: inst filter {.*/r[0-9]+} -regexp
---------
s1 = /CLK /Loop/Body_0/aa_0/CLK /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN /Loop/Body_0/aa_0/Q_OUT /Loop/Body_0/bb_0/CLK /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN /Loop/Body_0/bb_0/Q_OUT /Loop/Body_1/aa_1/CLK /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN /Loop/Body_1/aa_1/Q_OUT /Loop/Body_1/bb_1/CLK /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN /Loop/Body_1/bb_1/Q_OUT /Loop/Body_2/aa_2/CLK /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN /Loop/Body_2/aa_2/Q_OUT /Loop/Body_2/bb_2/CLK /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN /Loop/Body_2/bb_2/Q_OUT /Loop/Body_3/aa_3/CLK /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN /Loop/Body_3/aa_3/Q_OUT /Loop/Body_3/bb_3/CLK /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN /Loop/Body_3/bb_3/Q_OUT /Loop/x_0/CLK /Loop/x_0/D_IN /Loop/x_0/EN /Loop/x_0/Q_OUT /Loop/x_1/CLK /Loop/x_1/D_IN /Loop/x_1/EN /Loop/x_1/Q_OUT /Loop/x_2/CLK /Loop/x_2/D_IN /Loop/x_2/EN /Loop/x_2/Q_OUT /Loop/x_3/CLK /Loop/x_3/D_IN /Loop/x_3/EN /Loop/x_3/Q_OUT /RST_N /i /subis/_element_0/CLK /subis/_element_0/EN_foo /subis/_element_0/RST_N /subis/_element_0/RadyOnTheReadMethod /subis/_element_0/ax /subis/_element_0/bar /subis/_element_0/barx/CLK /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN /subis/_element_0/barx/Q_OUT /subis/_element_0/barx/RST /subis/_element_0/foo2/CLK /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN /subis/_element_0/foo2/Q_OUT /subis/_element_0/foo2/RST /subis/_element_0/foo_x /subis/_element_1/CLK /subis/_element_1/EN_foo /subis/_element_1/RST_N /subis/_element_1/RadyOnTheReadMethod /subis/_element_1/ax /subis/_element_1/bar /subis/_element_1/barx/CLK /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN /subis/_element_1/barx/Q_OUT /subis/_element_1/barx/RST /subis/_element_1/foo2/CLK /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN /subis/_element_1/foo2/Q_OUT /subis/_element_1/foo2/RST /subis/_element_1/foo_x /xx/_element_0/I_IN /xx/_element_0/I_OUT /xx/_element_0/V /xx/_element_0/WGET /xx/_element_0/WHAS /xx/_element_0/WSET /xx/_element_0/WVAL /xx/_element_1/I_IN /xx/_element_1/I_OUT /xx/_element_1/V /xx/_element_1/WGET /xx/_element_1/WHAS /xx/_element_1/WSET /xx/_element_1/WVAL /y/_element_0/CLK /y/_element_0/D_IN /y/_element_0/EN /y/_element_0/Q_OUT /y/_element_1/CLK /y/_element_1/D_IN /y/_element_1/EN /y/_element_1/Q_OUT /y/_element_2/CLK /y/_element_2/D_IN /y/_element_2/EN /y/_element_2/Q_OUT /y/_element_3/CLK /y/_element_3/D_IN /y/_element_3/EN /y/_element_3/Q_OUT /zw/_element_0/CLK /zw/_element_0/D_IN /zw/_element_0/EN /zw/_element_0/Q_OUT /zw/_element_0/RST /zw/_element_1/CLK /zw/_element_1/D_IN /zw/_element_1/EN /zw/_element_1/Q_OUT /zw/_element_1/RST /zw/_element_2/CLK /zw/_element_2/D_IN /zw/_element_2/EN /zw/_element_2/Q_OUT /zw/_element_2/RST /zw/_element_3/CLK /zw/_element_3/D_IN /zw/_element_3/EN /zw/_element_3/Q_OUT /zw/_element_3/RST /zw/_element_4/CLK /zw/_element_4/D_IN /zw/_element_4/EN /zw/_element_4/Q_OUT /zw/_element_4/RST
s2 = /subis/_element_0/bar /subis/_element_1/bar
s3 = 
Command: signal filter
Caught error:  signal filter: Expected a search expression, found `'
---------
Command: signal filter *
/i
/CLK
/RST_N
/y/_element_0/CLK
/y/_element_0/D_IN
/y/_element_0/EN
/y/_element_0/Q_OUT
/y/_element_1/CLK
/y/_element_1/D_IN
/y/_element_1/EN
/y/_element_1/Q_OUT
/y/_element_2/CLK
/y/_element_2/D_IN
/y/_element_2/EN
/y/_element_2/Q_OUT
/y/_element_3/CLK
/y/_element_3/D_IN
/y/_element_3/EN
/y/_element_3/Q_OUT
/zw/_element_0/CLK
/zw/_element_0/RST
/zw/_element_0/D_IN
/zw/_element_0/EN
/zw/_element_0/Q_OUT
/zw/_element_1/CLK
/zw/_element_1/RST
/zw/_element_1/D_IN
/zw/_element_1/EN
/zw/_element_1/Q_OUT
/zw/_element_2/CLK
/zw/_element_2/RST
/zw/_element_2/D_IN
/zw/_element_2/EN
/zw/_element_2/Q_OUT
/zw/_element_3/CLK
/zw/_element_3/RST
/zw/_element_3/D_IN
/zw/_element_3/EN
/zw/_element_3/Q_OUT
/zw/_element_4/CLK
/zw/_element_4/RST
/zw/_element_4/D_IN
/zw/_element_4/EN
/zw/_element_4/Q_OUT
/xx/_element_0/V
/xx/_element_0/I_IN
/xx/_element_0/WVAL
/xx/_element_0/WSET
/xx/_element_0/WGET
/xx/_element_0/WHAS
/xx/_element_0/I_OUT
/xx/_element_1/V
/xx/_element_1/I_IN
/xx/_element_1/WVAL
/xx/_element_1/WSET
/xx/_element_1/WGET
/xx/_element_1/WHAS
/xx/_element_1/I_OUT
/Loop/x_0/CLK
/Loop/x_0/D_IN
/Loop/x_0/EN
/Loop/x_0/Q_OUT
/Loop/x_1/CLK
/Loop/x_1/D_IN
/Loop/x_1/EN
/Loop/x_1/Q_OUT
/Loop/x_2/CLK
/Loop/x_2/D_IN
/Loop/x_2/EN
/Loop/x_2/Q_OUT
/Loop/x_3/CLK
/Loop/x_3/D_IN
/Loop/x_3/EN
/Loop/x_3/Q_OUT
/Loop/Body_0/aa_0/CLK
/Loop/Body_0/aa_0/D_IN
/Loop/Body_0/aa_0/EN
/Loop/Body_0/aa_0/Q_OUT
/Loop/Body_0/bb_0/CLK
/Loop/Body_0/bb_0/D_IN
/Loop/Body_0/bb_0/EN
/Loop/Body_0/bb_0/Q_OUT
/Loop/Body_1/aa_1/CLK
/Loop/Body_1/aa_1/D_IN
/Loop/Body_1/aa_1/EN
/Loop/Body_1/aa_1/Q_OUT
/Loop/Body_1/bb_1/CLK
/Loop/Body_1/bb_1/D_IN
/Loop/Body_1/bb_1/EN
/Loop/Body_1/bb_1/Q_OUT
/Loop/Body_2/aa_2/CLK
/Loop/Body_2/aa_2/D_IN
/Loop/Body_2/aa_2/EN
/Loop/Body_2/aa_2/Q_OUT
/Loop/Body_2/bb_2/CLK
/Loop/Body_2/bb_2/D_IN
/Loop/Body_2/bb_2/EN
/Loop/Body_2/bb_2/Q_OUT
/Loop/Body_3/aa_3/CLK
/Loop/Body_3/aa_3/D_IN
/Loop/Body_3/aa_3/EN
/Loop/Body_3/aa_3/Q_OUT
/Loop/Body_3/bb_3/CLK
/Loop/Body_3/bb_3/D_IN
/Loop/Body_3/bb_3/EN
/Loop/Body_3/bb_3/Q_OUT
/subis/_element_0/ax
/subis/_element_0/CLK
/subis/_element_0/RST_N
/subis/_element_0/foo_x
/subis/_element_0/EN_foo
/subis/_element_0/bar
/subis/_element_0/RadyOnTheReadMethod
/subis/_element_0/foo2/CLK
/subis/_element_0/foo2/RST
/subis/_element_0/foo2/D_IN
/subis/_element_0/foo2/EN
/subis/_element_0/foo2/Q_OUT
/subis/_element_0/barx/CLK
/subis/_element_0/barx/RST
/subis/_element_0/barx/D_IN
/subis/_element_0/barx/EN
/subis/_element_0/barx/Q_OUT
/subis/_element_1/ax
/subis/_element_1/CLK
/subis/_element_1/RST_N
/subis/_element_1/foo_x
/subis/_element_1/EN_foo
/subis/_element_1/bar
/subis/_element_1/RadyOnTheReadMethod
/subis/_element_1/foo2/CLK
/subis/_element_1/foo2/RST
/subis/_element_1/foo2/D_IN
/subis/_element_1/foo2/EN
/subis/_element_1/foo2/Q_OUT
/subis/_element_1/barx/CLK
/subis/_element_1/barx/RST
/subis/_element_1/barx/D_IN
/subis/_element_1/barx/EN
/subis/_element_1/barx/Q_OUT
---------
Command: signal filter */*
/i
/CLK
/RST_N
/y/_element_0/CLK
/y/_element_0/D_IN
/y/_element_0/EN
/y/_element_0/Q_OUT
/y/_element_1/CLK
/y/_element_1/D_IN
/y/_element_1/EN
/y/_element_1/Q_OUT
/y/_element_2/CLK
/y/_element_2/D_IN
/y/_element_2/EN
/y/_element_2/Q_OUT
/y/_element_3/CLK
/y/_element_3/D_IN
/y/_element_3/EN
/y/_element_3/Q_OUT
/zw/_element_0/CLK
/zw/_element_0/RST
/zw/_element_0/D_IN
/zw/_element_0/EN
/zw/_element_0/Q_OUT
/zw/_element_1/CLK
/zw/_element_1/RST
/zw/_element_1/D_IN
/zw/_element_1/EN
/zw/_element_1/Q_OUT
/zw/_element_2/CLK
/zw/_element_2/RST
/zw/_element_2/D_IN
/zw/_element_2/EN
/zw/_element_2/Q_OUT
/zw/_element_3/CLK
/zw/_element_3/RST
/zw/_element_3/D_IN
/zw/_element_3/EN
/zw/_element_3/Q_OUT
/zw/_element_4/CLK
/zw/_element_4/RST
/zw/_element_4/D_IN
/zw/_element_4/EN
/zw/_element_4/Q_OUT
/xx/_element_0/V
/xx/_element_0/I_IN
/xx/_element_0/WVAL
/xx/_element_0/WSET
/xx/_element_0/WGET
/xx/_element_0/WHAS
/xx/_element_0/I_OUT
/xx/_element_1/V
/xx/_element_1/I_IN
/xx/_element_1/WVAL
/xx/_element_1/WSET
/xx/_element_1/WGET
/xx/_element_1/WHAS
/xx/_element_1/I_OUT
/Loop/x_0/CLK
/Loop/x_0/D_IN
/Loop/x_0/EN
/Loop/x_0/Q_OUT
/Loop/x_1/CLK
/Loop/x_1/D_IN
/Loop/x_1/EN
/Loop/x_1/Q_OUT
/Loop/x_2/CLK
/Loop/x_2/D_IN
/Loop/x_2/EN
/Loop/x_2/Q_OUT
/Loop/x_3/CLK
/Loop/x_3/D_IN
/Loop/x_3/EN
/Loop/x_3/Q_OUT
/Loop/Body_0/aa_0/CLK
/Loop/Body_0/aa_0/D_IN
/Loop/Body_0/aa_0/EN
/Loop/Body_0/aa_0/Q_OUT
/Loop/Body_0/bb_0/CLK
/Loop/Body_0/bb_0/D_IN
/Loop/Body_0/bb_0/EN
/Loop/Body_0/bb_0/Q_OUT
/Loop/Body_1/aa_1/CLK
/Loop/Body_1/aa_1/D_IN
/Loop/Body_1/aa_1/EN
/Loop/Body_1/aa_1/Q_OUT
/Loop/Body_1/bb_1/CLK
/Loop/Body_1/bb_1/D_IN
/Loop/Body_1/bb_1/EN
/Loop/Body_1/bb_1/Q_OUT
/Loop/Body_2/aa_2/CLK
/Loop/Body_2/aa_2/D_IN
/Loop/Body_2/aa_2/EN
/Loop/Body_2/aa_2/Q_OUT
/Loop/Body_2/bb_2/CLK
/Loop/Body_2/bb_2/D_IN
/Loop/Body_2/bb_2/EN
/Loop/Body_2/bb_2/Q_OUT
/Loop/Body_3/aa_3/CLK
/Loop/Body_3/aa_3/D_IN
/Loop/Body_3/aa_3/EN
/Loop/Body_3/aa_3/Q_OUT
/Loop/Body_3/bb_3/CLK
/Loop/Body_3/bb_3/D_IN
/Loop/Body_3/bb_3/EN
/Loop/Body_3/bb_3/Q_OUT
/subis/_element_0/ax
/subis/_element_0/CLK
/subis/_element_0/RST_N
/subis/_element_0/foo_x
/subis/_element_0/EN_foo
/subis/_element_0/bar
/subis/_element_0/RadyOnTheReadMethod
/subis/_element_0/foo2/CLK
/subis/_element_0/foo2/RST
/subis/_element_0/foo2/D_IN
/subis/_element_0/foo2/EN
/subis/_element_0/foo2/Q_OUT
/subis/_element_0/barx/CLK
/subis/_element_0/barx/RST
/subis/_element_0/barx/D_IN
/subis/_element_0/barx/EN
/subis/_element_0/barx/Q_OUT
/subis/_element_1/ax
/subis/_element_1/CLK
/subis/_element_1/RST_N
/subis/_element_1/foo_x
/subis/_element_1/EN_foo
/subis/_element_1/bar
/subis/_element_1/RadyOnTheReadMethod
/subis/_element_1/foo2/CLK
/subis/_element_1/foo2/RST
/subis/_element_1/foo2/D_IN
/subis/_element_1/foo2/EN
/subis/_element_1/foo2/Q_OUT
/subis/_element_1/barx/CLK
/subis/_element_1/barx/RST
/subis/_element_1/barx/D_IN
/subis/_element_1/barx/EN
/subis/_element_1/barx/Q_OUT
---------
Command: signal filter */
---------
Command: signal filter /*/
---------
Command: signal filter /*/*
/i
/CLK
/RST_N
---------
Command: signal filter /r2/*
---------
Command: signal filter /r2/* -nametype synth
---------
Command: signal filter /*/r2/*
---------
starting insttest
got path INST /
INST / . kind = Synth
INST / . position = 
INST / . module = mkTest
INST / . class = VInst
INST / . hiertree = vInst0 mkTest {synth branch}
INST / . wave_format = {Inout#(Test::Bar) /i}
INST / . key = 1
INST / . ancestors = /
INST / . name bsv = mkTest
INST / . name synth = 
INST / . path bsv = /
INST / . path synth = /
INST / . signals = /CLK /RST_N /i
INST / . predsignals = 
INST / . bodysignals = 
INST / . predmethods = 
INST / . bodymethods = 
INST / . portmethods = 
got path INST /Loop
INST /Loop . kind = Inst
INST /Loop . position = Test2.bsv 19 4
INST /Loop . module = mkTest
INST /Loop . class = VInst
INST /Loop . hiertree = vInst4 Loop {}
INST /Loop . wave_format = 
INST /Loop . key = 5
INST /Loop . ancestors = / /Loop
INST /Loop . name bsv = Loop
INST /Loop . name synth = Loop
INST /Loop . path bsv = /Loop
INST /Loop . path synth = /
INST /Loop . parent = /
INST /Loop . signals = 
INST /Loop . predsignals = 
INST /Loop . bodysignals = 
INST /Loop . predmethods = 
INST /Loop . bodymethods = 
INST /Loop . portmethods = 
Error on name lookup /Loop  found 'vInst4 vInst5'
got path INST /Loop
INST /Loop . kind = Inst
INST /Loop . position = Test2.bsv 23 4
INST /Loop . module = mkTest
INST /Loop . class = VInst
INST /Loop . hiertree = vInst5 Loop {}
INST /Loop . wave_format = 
INST /Loop . key = 6
INST /Loop . ancestors = / /Loop
INST /Loop . name bsv = Loop
INST /Loop . name synth = Loop
INST /Loop . path bsv = /Loop
INST /Loop . path synth = /
INST /Loop . parent = /
INST /Loop . signals = 
INST /Loop . predsignals = 
INST /Loop . bodysignals = 
INST /Loop . predmethods = 
INST /Loop . bodymethods = 
INST /Loop . portmethods = 
Error on name lookup /Loop  found 'vInst4 vInst5'
got path INST /Loop/Body_0
INST /Loop/Body_0 . kind = Inst
INST /Loop/Body_0 . position = Test2.bsv 23 44
INST /Loop/Body_0 . module = mkTest
INST /Loop/Body_0 . class = VInst
INST /Loop/Body_0 . hiertree = vInst22 Body_0 {}
INST /Loop/Body_0 . wave_format = 
INST /Loop/Body_0 . key = 23
INST /Loop/Body_0 . ancestors = / /Loop /Loop/Body_0
INST /Loop/Body_0 . name bsv = Body_0
INST /Loop/Body_0 . name synth = Body_0
INST /Loop/Body_0 . path bsv = /Loop/Body_0
INST /Loop/Body_0 . path synth = /
INST /Loop/Body_0 . parent = /Loop
INST /Loop/Body_0 . signals = 
INST /Loop/Body_0 . predsignals = 
INST /Loop/Body_0 . bodysignals = 
INST /Loop/Body_0 . predmethods = 
INST /Loop/Body_0 . bodymethods = 
INST /Loop/Body_0 . portmethods = 
got path INST /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . kind = Prim
INST /Loop/Body_0/aa_0 . position = Test2.bsv 24 6
INST /Loop/Body_0/aa_0 . module = mkTest
INST /Loop/Body_0/aa_0 . class = VInst
INST /Loop/Body_0/aa_0 . hiertree = vInst26 {aa_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_0/aa_0 . wave_format = {Int#(32) {/aa_0$D_IN}} {Bool {/aa_0$EN}} {Int#(32) /aa_0}
INST /Loop/Body_0/aa_0 . key = 27
INST /Loop/Body_0/aa_0 . ancestors = / /Loop /Loop/Body_0 /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . name bsv = aa_0
INST /Loop/Body_0/aa_0 . name synth = aa_0
INST /Loop/Body_0/aa_0 . path bsv = /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . path synth = /aa_0
INST /Loop/Body_0/aa_0 . parent = /Loop/Body_0
INST /Loop/Body_0/aa_0 . signals = /Loop/Body_0/aa_0/CLK /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN /Loop/Body_0/aa_0/Q_OUT
INST /Loop/Body_0/aa_0 . predsignals = 
INST /Loop/Body_0/aa_0 . bodysignals = 
INST /Loop/Body_0/aa_0 . predmethods = 
INST /Loop/Body_0/aa_0 . bodymethods = 
INST /Loop/Body_0/aa_0 . portmethods = /Loop/Body_0/aa_0.read /Loop/Body_0/aa_0.write
got path INST /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . kind = Prim
INST /Loop/Body_0/bb_0 . position = Test2.bsv 25 6
INST /Loop/Body_0/bb_0 . module = mkTest
INST /Loop/Body_0/bb_0 . class = VInst
INST /Loop/Body_0/bb_0 . hiertree = vInst27 {bb_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_0/bb_0 . wave_format = {Int#(32) {/bb_0$D_IN}} {Bool {/bb_0$EN}} {Int#(32) /bb_0}
INST /Loop/Body_0/bb_0 . key = 28
INST /Loop/Body_0/bb_0 . ancestors = / /Loop /Loop/Body_0 /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . name bsv = bb_0
INST /Loop/Body_0/bb_0 . name synth = bb_0
INST /Loop/Body_0/bb_0 . path bsv = /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . path synth = /bb_0
INST /Loop/Body_0/bb_0 . parent = /Loop/Body_0
INST /Loop/Body_0/bb_0 . signals = /Loop/Body_0/bb_0/CLK /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN /Loop/Body_0/bb_0/Q_OUT
INST /Loop/Body_0/bb_0 . predsignals = 
INST /Loop/Body_0/bb_0 . bodysignals = 
INST /Loop/Body_0/bb_0 . predmethods = 
INST /Loop/Body_0/bb_0 . bodymethods = 
INST /Loop/Body_0/bb_0 . portmethods = /Loop/Body_0/bb_0.read /Loop/Body_0/bb_0.write
got path INST /Loop/Body_1
INST /Loop/Body_1 . kind = Inst
INST /Loop/Body_1 . position = Test2.bsv 23 44
INST /Loop/Body_1 . module = mkTest
INST /Loop/Body_1 . class = VInst
INST /Loop/Body_1 . hiertree = vInst23 Body_1 {}
INST /Loop/Body_1 . wave_format = 
INST /Loop/Body_1 . key = 24
INST /Loop/Body_1 . ancestors = / /Loop /Loop/Body_1
INST /Loop/Body_1 . name bsv = Body_1
INST /Loop/Body_1 . name synth = Body_1
INST /Loop/Body_1 . path bsv = /Loop/Body_1
INST /Loop/Body_1 . path synth = /
INST /Loop/Body_1 . parent = /Loop
INST /Loop/Body_1 . signals = 
INST /Loop/Body_1 . predsignals = 
INST /Loop/Body_1 . bodysignals = 
INST /Loop/Body_1 . predmethods = 
INST /Loop/Body_1 . bodymethods = 
INST /Loop/Body_1 . portmethods = 
got path INST /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . kind = Prim
INST /Loop/Body_1/aa_1 . position = Test2.bsv 24 6
INST /Loop/Body_1/aa_1 . module = mkTest
INST /Loop/Body_1/aa_1 . class = VInst
INST /Loop/Body_1/aa_1 . hiertree = vInst28 {aa_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_1/aa_1 . wave_format = {Int#(32) {/aa_1$D_IN}} {Bool {/aa_1$EN}} {Int#(32) /aa_1}
INST /Loop/Body_1/aa_1 . key = 29
INST /Loop/Body_1/aa_1 . ancestors = / /Loop /Loop/Body_1 /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . name bsv = aa_1
INST /Loop/Body_1/aa_1 . name synth = aa_1
INST /Loop/Body_1/aa_1 . path bsv = /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . path synth = /aa_1
INST /Loop/Body_1/aa_1 . parent = /Loop/Body_1
INST /Loop/Body_1/aa_1 . signals = /Loop/Body_1/aa_1/CLK /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN /Loop/Body_1/aa_1/Q_OUT
INST /Loop/Body_1/aa_1 . predsignals = 
INST /Loop/Body_1/aa_1 . bodysignals = 
INST /Loop/Body_1/aa_1 . predmethods = 
INST /Loop/Body_1/aa_1 . bodymethods = 
INST /Loop/Body_1/aa_1 . portmethods = /Loop/Body_1/aa_1.read /Loop/Body_1/aa_1.write
got path INST /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . kind = Prim
INST /Loop/Body_1/bb_1 . position = Test2.bsv 25 6
INST /Loop/Body_1/bb_1 . module = mkTest
INST /Loop/Body_1/bb_1 . class = VInst
INST /Loop/Body_1/bb_1 . hiertree = vInst29 {bb_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_1/bb_1 . wave_format = {Int#(32) {/bb_1$D_IN}} {Bool {/bb_1$EN}} {Int#(32) /bb_1}
INST /Loop/Body_1/bb_1 . key = 30
INST /Loop/Body_1/bb_1 . ancestors = / /Loop /Loop/Body_1 /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . name bsv = bb_1
INST /Loop/Body_1/bb_1 . name synth = bb_1
INST /Loop/Body_1/bb_1 . path bsv = /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . path synth = /bb_1
INST /Loop/Body_1/bb_1 . parent = /Loop/Body_1
INST /Loop/Body_1/bb_1 . signals = /Loop/Body_1/bb_1/CLK /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN /Loop/Body_1/bb_1/Q_OUT
INST /Loop/Body_1/bb_1 . predsignals = 
INST /Loop/Body_1/bb_1 . bodysignals = 
INST /Loop/Body_1/bb_1 . predmethods = 
INST /Loop/Body_1/bb_1 . bodymethods = 
INST /Loop/Body_1/bb_1 . portmethods = /Loop/Body_1/bb_1.read /Loop/Body_1/bb_1.write
got path INST /Loop/Body_2
INST /Loop/Body_2 . kind = Inst
INST /Loop/Body_2 . position = Test2.bsv 23 44
INST /Loop/Body_2 . module = mkTest
INST /Loop/Body_2 . class = VInst
INST /Loop/Body_2 . hiertree = vInst24 Body_2 {}
INST /Loop/Body_2 . wave_format = 
INST /Loop/Body_2 . key = 25
INST /Loop/Body_2 . ancestors = / /Loop /Loop/Body_2
INST /Loop/Body_2 . name bsv = Body_2
INST /Loop/Body_2 . name synth = Body_2
INST /Loop/Body_2 . path bsv = /Loop/Body_2
INST /Loop/Body_2 . path synth = /
INST /Loop/Body_2 . parent = /Loop
INST /Loop/Body_2 . signals = 
INST /Loop/Body_2 . predsignals = 
INST /Loop/Body_2 . bodysignals = 
INST /Loop/Body_2 . predmethods = 
INST /Loop/Body_2 . bodymethods = 
INST /Loop/Body_2 . portmethods = 
got path INST /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . kind = Prim
INST /Loop/Body_2/aa_2 . position = Test2.bsv 24 6
INST /Loop/Body_2/aa_2 . module = mkTest
INST /Loop/Body_2/aa_2 . class = VInst
INST /Loop/Body_2/aa_2 . hiertree = vInst30 {aa_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_2/aa_2 . wave_format = {Int#(32) {/aa_2$D_IN}} {Bool {/aa_2$EN}} {Int#(32) /aa_2}
INST /Loop/Body_2/aa_2 . key = 31
INST /Loop/Body_2/aa_2 . ancestors = / /Loop /Loop/Body_2 /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . name bsv = aa_2
INST /Loop/Body_2/aa_2 . name synth = aa_2
INST /Loop/Body_2/aa_2 . path bsv = /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . path synth = /aa_2
INST /Loop/Body_2/aa_2 . parent = /Loop/Body_2
INST /Loop/Body_2/aa_2 . signals = /Loop/Body_2/aa_2/CLK /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN /Loop/Body_2/aa_2/Q_OUT
INST /Loop/Body_2/aa_2 . predsignals = 
INST /Loop/Body_2/aa_2 . bodysignals = 
INST /Loop/Body_2/aa_2 . predmethods = 
INST /Loop/Body_2/aa_2 . bodymethods = 
INST /Loop/Body_2/aa_2 . portmethods = /Loop/Body_2/aa_2.read /Loop/Body_2/aa_2.write
got path INST /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . kind = Prim
INST /Loop/Body_2/bb_2 . position = Test2.bsv 25 6
INST /Loop/Body_2/bb_2 . module = mkTest
INST /Loop/Body_2/bb_2 . class = VInst
INST /Loop/Body_2/bb_2 . hiertree = vInst31 {bb_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_2/bb_2 . wave_format = {Int#(32) {/bb_2$D_IN}} {Bool {/bb_2$EN}} {Int#(32) /bb_2}
INST /Loop/Body_2/bb_2 . key = 32
INST /Loop/Body_2/bb_2 . ancestors = / /Loop /Loop/Body_2 /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . name bsv = bb_2
INST /Loop/Body_2/bb_2 . name synth = bb_2
INST /Loop/Body_2/bb_2 . path bsv = /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . path synth = /bb_2
INST /Loop/Body_2/bb_2 . parent = /Loop/Body_2
INST /Loop/Body_2/bb_2 . signals = /Loop/Body_2/bb_2/CLK /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN /Loop/Body_2/bb_2/Q_OUT
INST /Loop/Body_2/bb_2 . predsignals = 
INST /Loop/Body_2/bb_2 . bodysignals = 
INST /Loop/Body_2/bb_2 . predmethods = 
INST /Loop/Body_2/bb_2 . bodymethods = 
INST /Loop/Body_2/bb_2 . portmethods = /Loop/Body_2/bb_2.read /Loop/Body_2/bb_2.write
got path INST /Loop/Body_3
INST /Loop/Body_3 . kind = Inst
INST /Loop/Body_3 . position = Test2.bsv 23 44
INST /Loop/Body_3 . module = mkTest
INST /Loop/Body_3 . class = VInst
INST /Loop/Body_3 . hiertree = vInst25 Body_3 {}
INST /Loop/Body_3 . wave_format = 
INST /Loop/Body_3 . key = 26
INST /Loop/Body_3 . ancestors = / /Loop /Loop/Body_3
INST /Loop/Body_3 . name bsv = Body_3
INST /Loop/Body_3 . name synth = Body_3
INST /Loop/Body_3 . path bsv = /Loop/Body_3
INST /Loop/Body_3 . path synth = /
INST /Loop/Body_3 . parent = /Loop
INST /Loop/Body_3 . signals = 
INST /Loop/Body_3 . predsignals = 
INST /Loop/Body_3 . bodysignals = 
INST /Loop/Body_3 . predmethods = 
INST /Loop/Body_3 . bodymethods = 
INST /Loop/Body_3 . portmethods = 
got path INST /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . kind = Prim
INST /Loop/Body_3/aa_3 . position = Test2.bsv 24 6
INST /Loop/Body_3/aa_3 . module = mkTest
INST /Loop/Body_3/aa_3 . class = VInst
INST /Loop/Body_3/aa_3 . hiertree = vInst32 {aa_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_3/aa_3 . wave_format = {Int#(32) {/aa_3$D_IN}} {Bool {/aa_3$EN}} {Int#(32) /aa_3}
INST /Loop/Body_3/aa_3 . key = 33
INST /Loop/Body_3/aa_3 . ancestors = / /Loop /Loop/Body_3 /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . name bsv = aa_3
INST /Loop/Body_3/aa_3 . name synth = aa_3
INST /Loop/Body_3/aa_3 . path bsv = /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . path synth = /aa_3
INST /Loop/Body_3/aa_3 . parent = /Loop/Body_3
INST /Loop/Body_3/aa_3 . signals = /Loop/Body_3/aa_3/CLK /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN /Loop/Body_3/aa_3/Q_OUT
INST /Loop/Body_3/aa_3 . predsignals = 
INST /Loop/Body_3/aa_3 . bodysignals = 
INST /Loop/Body_3/aa_3 . predmethods = 
INST /Loop/Body_3/aa_3 . bodymethods = 
INST /Loop/Body_3/aa_3 . portmethods = /Loop/Body_3/aa_3.read /Loop/Body_3/aa_3.write
got path INST /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . kind = Prim
INST /Loop/Body_3/bb_3 . position = Test2.bsv 25 6
INST /Loop/Body_3/bb_3 . module = mkTest
INST /Loop/Body_3/bb_3 . class = VInst
INST /Loop/Body_3/bb_3 . hiertree = vInst33 {bb_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_3/bb_3 . wave_format = {Int#(32) {/bb_3$D_IN}} {Bool {/bb_3$EN}} {Int#(32) /bb_3}
INST /Loop/Body_3/bb_3 . key = 34
INST /Loop/Body_3/bb_3 . ancestors = / /Loop /Loop/Body_3 /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . name bsv = bb_3
INST /Loop/Body_3/bb_3 . name synth = bb_3
INST /Loop/Body_3/bb_3 . path bsv = /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . path synth = /bb_3
INST /Loop/Body_3/bb_3 . parent = /Loop/Body_3
INST /Loop/Body_3/bb_3 . signals = /Loop/Body_3/bb_3/CLK /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN /Loop/Body_3/bb_3/Q_OUT
INST /Loop/Body_3/bb_3 . predsignals = 
INST /Loop/Body_3/bb_3 . bodysignals = 
INST /Loop/Body_3/bb_3 . predmethods = 
INST /Loop/Body_3/bb_3 . bodymethods = 
INST /Loop/Body_3/bb_3 . portmethods = /Loop/Body_3/bb_3.read /Loop/Body_3/bb_3.write
got path INST /Loop/x_0
INST /Loop/x_0 . kind = Prim
INST /Loop/x_0 . position = Test2.bsv 20 7
INST /Loop/x_0 . module = mkTest
INST /Loop/x_0 . class = VInst
INST /Loop/x_0 . hiertree = vInst18 {x_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_0 . wave_format = {Int#(32) {/x_0$D_IN}} {Bool {/x_0$EN}} {Int#(32) /x_0}
INST /Loop/x_0 . key = 19
INST /Loop/x_0 . ancestors = / /Loop /Loop/x_0
INST /Loop/x_0 . name bsv = x_0
INST /Loop/x_0 . name synth = x_0
INST /Loop/x_0 . path bsv = /Loop/x_0
INST /Loop/x_0 . path synth = /x_0
INST /Loop/x_0 . parent = /Loop
INST /Loop/x_0 . signals = /Loop/x_0/CLK /Loop/x_0/D_IN /Loop/x_0/EN /Loop/x_0/Q_OUT
INST /Loop/x_0 . predsignals = 
INST /Loop/x_0 . bodysignals = 
INST /Loop/x_0 . predmethods = 
INST /Loop/x_0 . bodymethods = 
INST /Loop/x_0 . portmethods = /Loop/x_0.read /Loop/x_0.write
got path INST /Loop/x_1
INST /Loop/x_1 . kind = Prim
INST /Loop/x_1 . position = Test2.bsv 20 7
INST /Loop/x_1 . module = mkTest
INST /Loop/x_1 . class = VInst
INST /Loop/x_1 . hiertree = vInst19 {x_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_1 . wave_format = {Int#(32) {/x_1$D_IN}} {Bool {/x_1$EN}} {Int#(32) /x_1}
INST /Loop/x_1 . key = 20
INST /Loop/x_1 . ancestors = / /Loop /Loop/x_1
INST /Loop/x_1 . name bsv = x_1
INST /Loop/x_1 . name synth = x_1
INST /Loop/x_1 . path bsv = /Loop/x_1
INST /Loop/x_1 . path synth = /x_1
INST /Loop/x_1 . parent = /Loop
INST /Loop/x_1 . signals = /Loop/x_1/CLK /Loop/x_1/D_IN /Loop/x_1/EN /Loop/x_1/Q_OUT
INST /Loop/x_1 . predsignals = 
INST /Loop/x_1 . bodysignals = 
INST /Loop/x_1 . predmethods = 
INST /Loop/x_1 . bodymethods = 
INST /Loop/x_1 . portmethods = /Loop/x_1.read /Loop/x_1.write
got path INST /Loop/x_2
INST /Loop/x_2 . kind = Prim
INST /Loop/x_2 . position = Test2.bsv 20 7
INST /Loop/x_2 . module = mkTest
INST /Loop/x_2 . class = VInst
INST /Loop/x_2 . hiertree = vInst20 {x_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_2 . wave_format = {Int#(32) {/x_2$D_IN}} {Bool {/x_2$EN}} {Int#(32) /x_2}
INST /Loop/x_2 . key = 21
INST /Loop/x_2 . ancestors = / /Loop /Loop/x_2
INST /Loop/x_2 . name bsv = x_2
INST /Loop/x_2 . name synth = x_2
INST /Loop/x_2 . path bsv = /Loop/x_2
INST /Loop/x_2 . path synth = /x_2
INST /Loop/x_2 . parent = /Loop
INST /Loop/x_2 . signals = /Loop/x_2/CLK /Loop/x_2/D_IN /Loop/x_2/EN /Loop/x_2/Q_OUT
INST /Loop/x_2 . predsignals = 
INST /Loop/x_2 . bodysignals = 
INST /Loop/x_2 . predmethods = 
INST /Loop/x_2 . bodymethods = 
INST /Loop/x_2 . portmethods = /Loop/x_2.read /Loop/x_2.write
got path INST /Loop/x_3
INST /Loop/x_3 . kind = Prim
INST /Loop/x_3 . position = Test2.bsv 20 7
INST /Loop/x_3 . module = mkTest
INST /Loop/x_3 . class = VInst
INST /Loop/x_3 . hiertree = vInst21 {x_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_3 . wave_format = {Int#(32) {/x_3$D_IN}} {Bool {/x_3$EN}} {Int#(32) /x_3}
INST /Loop/x_3 . key = 22
INST /Loop/x_3 . ancestors = / /Loop /Loop/x_3
INST /Loop/x_3 . name bsv = x_3
INST /Loop/x_3 . name synth = x_3
INST /Loop/x_3 . path bsv = /Loop/x_3
INST /Loop/x_3 . path synth = /x_3
INST /Loop/x_3 . parent = /Loop
INST /Loop/x_3 . signals = /Loop/x_3/CLK /Loop/x_3/D_IN /Loop/x_3/EN /Loop/x_3/Q_OUT
INST /Loop/x_3 . predsignals = 
INST /Loop/x_3 . bodysignals = 
INST /Loop/x_3 . predmethods = 
INST /Loop/x_3 . bodymethods = 
INST /Loop/x_3 . portmethods = /Loop/x_3.read /Loop/x_3.write
got path INST /subis
INST /subis . kind = Inst
INST /subis . position = Test2.bsv 29 23
INST /subis . module = mkTest
INST /subis . class = VInst
INST /subis . hiertree = vInst6 subis {}
INST /subis . wave_format = 
INST /subis . key = 7
INST /subis . ancestors = / /subis
INST /subis . name bsv = subis
INST /subis . name synth = subis
INST /subis . path bsv = /subis
INST /subis . path synth = /
INST /subis . parent = /
INST /subis . signals = 
INST /subis . predsignals = 
INST /subis . bodysignals = 
INST /subis . predmethods = 
INST /subis . bodymethods = 
INST /subis . portmethods = 
got path INST /subis/_element_0
INST /subis/_element_0 . kind = Synth
INST /subis/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /subis/_element_0 . module = mkSub
INST /subis/_element_0 . class = VInst
INST /subis/_element_0 . hiertree = vInst34 {_element_0  Sub_Ifc} {synth branch}
INST /subis/_element_0 . wave_format = {Bit#(3) /subis_0/ax} {Int#(32) /subis_0/foo_x} {Bool /subis_0/EN_foo} {Int#(32) /subis_0/bar} {Bool /subis_0/RadyOnTheReadMethod}
INST /subis/_element_0 . key = 35
INST /subis/_element_0 . ancestors = / /subis /subis/_element_0
INST /subis/_element_0 . name bsv = _element_0
INST /subis/_element_0 . name synth = subis_0
INST /subis/_element_0 . path bsv = /subis/_element_0
INST /subis/_element_0 . path synth = /subis_0
INST /subis/_element_0 . parent = /subis
INST /subis/_element_0 . signals = /subis/_element_0/CLK /subis/_element_0/EN_foo /subis/_element_0/RST_N /subis/_element_0/RadyOnTheReadMethod /subis/_element_0/ax /subis/_element_0/bar /subis/_element_0/foo_x
INST /subis/_element_0 . predsignals = 
INST /subis/_element_0 . bodysignals = 
INST /subis/_element_0 . predmethods = 
INST /subis/_element_0 . bodymethods = 
INST /subis/_element_0 . portmethods = /subis/_element_0.RDY_bar /subis/_element_0.bar /subis/_element_0.foo
got path INST /subis/_element_0/barx
INST /subis/_element_0/barx . kind = Prim
INST /subis/_element_0/barx . position = Test2.bsv 42 18
INST /subis/_element_0/barx . module = mkSub
INST /subis/_element_0/barx . class = VInst
INST /subis/_element_0/barx . hiertree = vInst37 {barx  Reg#(Bit#(3))} {prim leaf}
INST /subis/_element_0/barx . wave_format = {Bit#(3) {/subis_0/barx$D_IN}} {Bool {/subis_0/barx$EN}} {Bit#(3) /subis_0/barx}
INST /subis/_element_0/barx . key = 38
INST /subis/_element_0/barx . ancestors = / /subis /subis/_element_0 /subis/_element_0/barx
INST /subis/_element_0/barx . name bsv = barx
INST /subis/_element_0/barx . name synth = barx
INST /subis/_element_0/barx . path bsv = /subis/_element_0/barx
INST /subis/_element_0/barx . path synth = /subis_0/barx
INST /subis/_element_0/barx . parent = /subis/_element_0
INST /subis/_element_0/barx . signals = /subis/_element_0/barx/CLK /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN /subis/_element_0/barx/Q_OUT /subis/_element_0/barx/RST
INST /subis/_element_0/barx . predsignals = 
INST /subis/_element_0/barx . bodysignals = 
INST /subis/_element_0/barx . predmethods = 
INST /subis/_element_0/barx . bodymethods = 
INST /subis/_element_0/barx . portmethods = /subis/_element_0/barx.read /subis/_element_0/barx.write
got path INST /subis/_element_0/foo2
INST /subis/_element_0/foo2 . kind = Prim
INST /subis/_element_0/foo2 . position = Test2.bsv 41 14
INST /subis/_element_0/foo2 . module = mkSub
INST /subis/_element_0/foo2 . class = VInst
INST /subis/_element_0/foo2 . hiertree = vInst36 {foo2  Reg#(Int#(32))} {prim leaf}
INST /subis/_element_0/foo2 . wave_format = {Int#(32) {/subis_0/foo2$D_IN}} {Bool {/subis_0/foo2$EN}} {Int#(32) /subis_0/foo2}
INST /subis/_element_0/foo2 . key = 37
INST /subis/_element_0/foo2 . ancestors = / /subis /subis/_element_0 /subis/_element_0/foo2
INST /subis/_element_0/foo2 . name bsv = foo2
INST /subis/_element_0/foo2 . name synth = foo2
INST /subis/_element_0/foo2 . path bsv = /subis/_element_0/foo2
INST /subis/_element_0/foo2 . path synth = /subis_0/foo2
INST /subis/_element_0/foo2 . parent = /subis/_element_0
INST /subis/_element_0/foo2 . signals = /subis/_element_0/foo2/CLK /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN /subis/_element_0/foo2/Q_OUT /subis/_element_0/foo2/RST
INST /subis/_element_0/foo2 . predsignals = 
INST /subis/_element_0/foo2 . bodysignals = 
INST /subis/_element_0/foo2 . predmethods = 
INST /subis/_element_0/foo2 . bodymethods = 
INST /subis/_element_0/foo2 . portmethods = /subis/_element_0/foo2.read /subis/_element_0/foo2.write
got path INST /subis/_element_1
INST /subis/_element_1 . kind = Synth
INST /subis/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /subis/_element_1 . module = mkSub
INST /subis/_element_1 . class = VInst
INST /subis/_element_1 . hiertree = vInst35 {_element_1  Sub_Ifc} {synth branch}
INST /subis/_element_1 . wave_format = {Bit#(3) /subis_1/ax} {Int#(32) /subis_1/foo_x} {Bool /subis_1/EN_foo} {Int#(32) /subis_1/bar} {Bool /subis_1/RadyOnTheReadMethod}
INST /subis/_element_1 . key = 36
INST /subis/_element_1 . ancestors = / /subis /subis/_element_1
INST /subis/_element_1 . name bsv = _element_1
INST /subis/_element_1 . name synth = subis_1
INST /subis/_element_1 . path bsv = /subis/_element_1
INST /subis/_element_1 . path synth = /subis_1
INST /subis/_element_1 . parent = /subis
INST /subis/_element_1 . signals = /subis/_element_1/CLK /subis/_element_1/EN_foo /subis/_element_1/RST_N /subis/_element_1/RadyOnTheReadMethod /subis/_element_1/ax /subis/_element_1/bar /subis/_element_1/foo_x
INST /subis/_element_1 . predsignals = 
INST /subis/_element_1 . bodysignals = 
INST /subis/_element_1 . predmethods = 
INST /subis/_element_1 . bodymethods = 
INST /subis/_element_1 . portmethods = /subis/_element_1.RDY_bar /subis/_element_1.bar /subis/_element_1.foo
got path INST /subis/_element_1/barx
INST /subis/_element_1/barx . kind = Prim
INST /subis/_element_1/barx . position = Test2.bsv 42 18
INST /subis/_element_1/barx . module = mkSub
INST /subis/_element_1/barx . class = VInst
INST /subis/_element_1/barx . hiertree = vInst39 {barx  Reg#(Bit#(3))} {prim leaf}
INST /subis/_element_1/barx . wave_format = {Bit#(3) {/subis_1/barx$D_IN}} {Bool {/subis_1/barx$EN}} {Bit#(3) /subis_1/barx}
INST /subis/_element_1/barx . key = 40
INST /subis/_element_1/barx . ancestors = / /subis /subis/_element_1 /subis/_element_1/barx
INST /subis/_element_1/barx . name bsv = barx
INST /subis/_element_1/barx . name synth = barx
INST /subis/_element_1/barx . path bsv = /subis/_element_1/barx
INST /subis/_element_1/barx . path synth = /subis_1/barx
INST /subis/_element_1/barx . parent = /subis/_element_1
INST /subis/_element_1/barx . signals = /subis/_element_1/barx/CLK /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN /subis/_element_1/barx/Q_OUT /subis/_element_1/barx/RST
INST /subis/_element_1/barx . predsignals = 
INST /subis/_element_1/barx . bodysignals = 
INST /subis/_element_1/barx . predmethods = 
INST /subis/_element_1/barx . bodymethods = 
INST /subis/_element_1/barx . portmethods = /subis/_element_1/barx.read /subis/_element_1/barx.write
got path INST /subis/_element_1/foo2
INST /subis/_element_1/foo2 . kind = Prim
INST /subis/_element_1/foo2 . position = Test2.bsv 41 14
INST /subis/_element_1/foo2 . module = mkSub
INST /subis/_element_1/foo2 . class = VInst
INST /subis/_element_1/foo2 . hiertree = vInst38 {foo2  Reg#(Int#(32))} {prim leaf}
INST /subis/_element_1/foo2 . wave_format = {Int#(32) {/subis_1/foo2$D_IN}} {Bool {/subis_1/foo2$EN}} {Int#(32) /subis_1/foo2}
INST /subis/_element_1/foo2 . key = 39
INST /subis/_element_1/foo2 . ancestors = / /subis /subis/_element_1 /subis/_element_1/foo2
INST /subis/_element_1/foo2 . name bsv = foo2
INST /subis/_element_1/foo2 . name synth = foo2
INST /subis/_element_1/foo2 . path bsv = /subis/_element_1/foo2
INST /subis/_element_1/foo2 . path synth = /subis_1/foo2
INST /subis/_element_1/foo2 . parent = /subis/_element_1
INST /subis/_element_1/foo2 . signals = /subis/_element_1/foo2/CLK /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN /subis/_element_1/foo2/Q_OUT /subis/_element_1/foo2/RST
INST /subis/_element_1/foo2 . predsignals = 
INST /subis/_element_1/foo2 . bodysignals = 
INST /subis/_element_1/foo2 . predmethods = 
INST /subis/_element_1/foo2 . bodymethods = 
INST /subis/_element_1/foo2 . portmethods = /subis/_element_1/foo2.read /subis/_element_1/foo2.write
got path INST /xx
INST /xx . kind = Inst
INST /xx . position = Test2.bsv 17 25
INST /xx . module = mkTest
INST /xx . class = VInst
INST /xx . hiertree = vInst3 xx {}
INST /xx . wave_format = 
INST /xx . key = 4
INST /xx . ancestors = / /xx
INST /xx . name bsv = xx
INST /xx . name synth = xx
INST /xx . path bsv = /xx
INST /xx . path synth = /
INST /xx . parent = /
INST /xx . signals = 
INST /xx . predsignals = 
INST /xx . bodysignals = 
INST /xx . predmethods = 
INST /xx . bodymethods = 
INST /xx . portmethods = 
got path INST /xx/_element_0
INST /xx/_element_0 . kind = Prim
INST /xx/_element_0 . position = %/Libraries/List.bs 764 4 {Library List}
INST /xx/_element_0 . module = mkTest
INST /xx/_element_0 . class = VInst
INST /xx/_element_0 . hiertree = vInst16 {_element_0  Foo#(Bar)} {prim leaf}
INST /xx/_element_0 . wave_format = {Int#(32) /xx_0/V} {Inout#(Test::Bar) /xx_0/I_IN} {Test::Bar /xx_0/WVAL} {Bool /xx_0/WSET} {Test::Bar /xx_0/WGET} {Bool /xx_0/WHAS} {Inout#(Bool) /xx_0/I_OUT}
INST /xx/_element_0 . key = 17
INST /xx/_element_0 . ancestors = / /xx /xx/_element_0
INST /xx/_element_0 . name bsv = _element_0
INST /xx/_element_0 . name synth = xx_0
INST /xx/_element_0 . path bsv = /xx/_element_0
INST /xx/_element_0 . path synth = /xx_0
INST /xx/_element_0 . parent = /xx
INST /xx/_element_0 . signals = /xx/_element_0/I_IN /xx/_element_0/I_OUT /xx/_element_0/V /xx/_element_0/WGET /xx/_element_0/WHAS /xx/_element_0/WSET /xx/_element_0/WVAL
INST /xx/_element_0 . predsignals = 
INST /xx/_element_0 . bodysignals = 
INST /xx/_element_0 . predmethods = 
INST /xx/_element_0 . bodymethods = 
INST /xx/_element_0 . portmethods = /xx/_element_0.wget /xx/_element_0.whas /xx/_element_0.wset
got path INST /xx/_element_1
INST /xx/_element_1 . kind = Prim
INST /xx/_element_1 . position = %/Libraries/List.bs 764 4 {Library List}
INST /xx/_element_1 . module = mkTest
INST /xx/_element_1 . class = VInst
INST /xx/_element_1 . hiertree = vInst17 {_element_1  Foo#(Bar)} {prim leaf}
INST /xx/_element_1 . wave_format = {Int#(32) /xx_1/V} {Inout#(Test::Bar) /xx_1/I_IN} {Test::Bar /xx_1/WVAL} {Bool /xx_1/WSET} {Test::Bar /xx_1/WGET} {Bool /xx_1/WHAS} {Inout#(Bool) /xx_1/I_OUT}
INST /xx/_element_1 . key = 18
INST /xx/_element_1 . ancestors = / /xx /xx/_element_1
INST /xx/_element_1 . name bsv = _element_1
INST /xx/_element_1 . name synth = xx_1
INST /xx/_element_1 . path bsv = /xx/_element_1
INST /xx/_element_1 . path synth = /xx_1
INST /xx/_element_1 . parent = /xx
INST /xx/_element_1 . signals = /xx/_element_1/I_IN /xx/_element_1/I_OUT /xx/_element_1/V /xx/_element_1/WGET /xx/_element_1/WHAS /xx/_element_1/WSET /xx/_element_1/WVAL
INST /xx/_element_1 . predsignals = 
INST /xx/_element_1 . bodysignals = 
INST /xx/_element_1 . predmethods = 
INST /xx/_element_1 . bodymethods = 
INST /xx/_element_1 . portmethods = /xx/_element_1.wget /xx/_element_1.whas /xx/_element_1.wset
got path INST /y
INST /y . kind = Inst
INST /y . position = Test2.bsv 9 25
INST /y . module = mkTest
INST /y . class = VInst
INST /y . hiertree = vInst1 y {}
INST /y . wave_format = 
INST /y . key = 2
INST /y . ancestors = / /y
INST /y . name bsv = y
INST /y . name synth = y
INST /y . path bsv = /y
INST /y . path synth = /
INST /y . parent = /
INST /y . signals = 
INST /y . predsignals = 
INST /y . bodysignals = 
INST /y . predmethods = 
INST /y . bodymethods = 
INST /y . portmethods = 
got path INST /y/_element_0
INST /y/_element_0 . kind = Prim
INST /y/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_0 . module = mkTest
INST /y/_element_0 . class = VInst
INST /y/_element_0 . hiertree = vInst7 {_element_0  Reg#(Int#(32))} {prim leaf}
INST /y/_element_0 . wave_format = {Int#(32) {/y_0$D_IN}} {Bool {/y_0$EN}} {Int#(32) /y_0}
INST /y/_element_0 . key = 8
INST /y/_element_0 . ancestors = / /y /y/_element_0
INST /y/_element_0 . name bsv = _element_0
INST /y/_element_0 . name synth = y_0
INST /y/_element_0 . path bsv = /y/_element_0
INST /y/_element_0 . path synth = /y_0
INST /y/_element_0 . parent = /y
INST /y/_element_0 . signals = /y/_element_0/CLK /y/_element_0/D_IN /y/_element_0/EN /y/_element_0/Q_OUT
INST /y/_element_0 . predsignals = 
INST /y/_element_0 . bodysignals = 
INST /y/_element_0 . predmethods = 
INST /y/_element_0 . bodymethods = 
INST /y/_element_0 . portmethods = /y/_element_0.read /y/_element_0.write
got path INST /y/_element_1
INST /y/_element_1 . kind = Prim
INST /y/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_1 . module = mkTest
INST /y/_element_1 . class = VInst
INST /y/_element_1 . hiertree = vInst8 {_element_1  Reg#(Int#(32))} {prim leaf}
INST /y/_element_1 . wave_format = {Int#(32) {/y_1$D_IN}} {Bool {/y_1$EN}} {Int#(32) /y_1}
INST /y/_element_1 . key = 9
INST /y/_element_1 . ancestors = / /y /y/_element_1
INST /y/_element_1 . name bsv = _element_1
INST /y/_element_1 . name synth = y_1
INST /y/_element_1 . path bsv = /y/_element_1
INST /y/_element_1 . path synth = /y_1
INST /y/_element_1 . parent = /y
INST /y/_element_1 . signals = /y/_element_1/CLK /y/_element_1/D_IN /y/_element_1/EN /y/_element_1/Q_OUT
INST /y/_element_1 . predsignals = 
INST /y/_element_1 . bodysignals = 
INST /y/_element_1 . predmethods = 
INST /y/_element_1 . bodymethods = 
INST /y/_element_1 . portmethods = /y/_element_1.read /y/_element_1.write
got path INST /y/_element_2
INST /y/_element_2 . kind = Prim
INST /y/_element_2 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_2 . module = mkTest
INST /y/_element_2 . class = VInst
INST /y/_element_2 . hiertree = vInst9 {_element_2  Reg#(Int#(32))} {prim leaf}
INST /y/_element_2 . wave_format = {Int#(32) {/y_2$D_IN}} {Bool {/y_2$EN}} {Int#(32) /y_2}
INST /y/_element_2 . key = 10
INST /y/_element_2 . ancestors = / /y /y/_element_2
INST /y/_element_2 . name bsv = _element_2
INST /y/_element_2 . name synth = y_2
INST /y/_element_2 . path bsv = /y/_element_2
INST /y/_element_2 . path synth = /y_2
INST /y/_element_2 . parent = /y
INST /y/_element_2 . signals = /y/_element_2/CLK /y/_element_2/D_IN /y/_element_2/EN /y/_element_2/Q_OUT
INST /y/_element_2 . predsignals = 
INST /y/_element_2 . bodysignals = 
INST /y/_element_2 . predmethods = 
INST /y/_element_2 . bodymethods = 
INST /y/_element_2 . portmethods = /y/_element_2.read /y/_element_2.write
got path INST /y/_element_3
INST /y/_element_3 . kind = Prim
INST /y/_element_3 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_3 . module = mkTest
INST /y/_element_3 . class = VInst
INST /y/_element_3 . hiertree = vInst10 {_element_3  Reg#(Int#(32))} {prim leaf}
INST /y/_element_3 . wave_format = {Int#(32) {/y_3$D_IN}} {Bool {/y_3$EN}} {Int#(32) /y_3}
INST /y/_element_3 . key = 11
INST /y/_element_3 . ancestors = / /y /y/_element_3
INST /y/_element_3 . name bsv = _element_3
INST /y/_element_3 . name synth = y_3
INST /y/_element_3 . path bsv = /y/_element_3
INST /y/_element_3 . path synth = /y_3
INST /y/_element_3 . parent = /y
INST /y/_element_3 . signals = /y/_element_3/CLK /y/_element_3/D_IN /y/_element_3/EN /y/_element_3/Q_OUT
INST /y/_element_3 . predsignals = 
INST /y/_element_3 . bodysignals = 
INST /y/_element_3 . predmethods = 
INST /y/_element_3 . bodymethods = 
INST /y/_element_3 . portmethods = /y/_element_3.read /y/_element_3.write
got path INST /zw
INST /zw . kind = Inst
INST /zw . position = Test2.bsv 14 25
INST /zw . module = mkTest
INST /zw . class = VInst
INST /zw . hiertree = vInst2 zw {}
INST /zw . wave_format = 
INST /zw . key = 3
INST /zw . ancestors = / /zw
INST /zw . name bsv = zw
INST /zw . name synth = zw
INST /zw . path bsv = /zw
INST /zw . path synth = /
INST /zw . parent = /
INST /zw . signals = 
INST /zw . predsignals = 
INST /zw . bodysignals = 
INST /zw . predmethods = 
INST /zw . bodymethods = 
INST /zw . portmethods = 
got path INST /zw/_element_0
INST /zw/_element_0 . kind = Prim
INST /zw/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_0 . module = mkTest
INST /zw/_element_0 . class = VInst
INST /zw/_element_0 . hiertree = vInst11 {_element_0  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_0 . wave_format = {Int#(32) {/zw_0$D_IN}} {Bool {/zw_0$EN}} {Int#(32) /zw_0}
INST /zw/_element_0 . key = 12
INST /zw/_element_0 . ancestors = / /zw /zw/_element_0
INST /zw/_element_0 . name bsv = _element_0
INST /zw/_element_0 . name synth = zw_0
INST /zw/_element_0 . path bsv = /zw/_element_0
INST /zw/_element_0 . path synth = /zw_0
INST /zw/_element_0 . parent = /zw
INST /zw/_element_0 . signals = /zw/_element_0/CLK /zw/_element_0/D_IN /zw/_element_0/EN /zw/_element_0/Q_OUT /zw/_element_0/RST
INST /zw/_element_0 . predsignals = 
INST /zw/_element_0 . bodysignals = 
INST /zw/_element_0 . predmethods = 
INST /zw/_element_0 . bodymethods = 
INST /zw/_element_0 . portmethods = /zw/_element_0.read /zw/_element_0.write
got path INST /zw/_element_1
INST /zw/_element_1 . kind = Prim
INST /zw/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_1 . module = mkTest
INST /zw/_element_1 . class = VInst
INST /zw/_element_1 . hiertree = vInst12 {_element_1  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_1 . wave_format = {Int#(32) {/zw_1$D_IN}} {Bool {/zw_1$EN}} {Int#(32) /zw_1}
INST /zw/_element_1 . key = 13
INST /zw/_element_1 . ancestors = / /zw /zw/_element_1
INST /zw/_element_1 . name bsv = _element_1
INST /zw/_element_1 . name synth = zw_1
INST /zw/_element_1 . path bsv = /zw/_element_1
INST /zw/_element_1 . path synth = /zw_1
INST /zw/_element_1 . parent = /zw
INST /zw/_element_1 . signals = /zw/_element_1/CLK /zw/_element_1/D_IN /zw/_element_1/EN /zw/_element_1/Q_OUT /zw/_element_1/RST
INST /zw/_element_1 . predsignals = 
INST /zw/_element_1 . bodysignals = 
INST /zw/_element_1 . predmethods = 
INST /zw/_element_1 . bodymethods = 
INST /zw/_element_1 . portmethods = /zw/_element_1.read /zw/_element_1.write
got path INST /zw/_element_2
INST /zw/_element_2 . kind = Prim
INST /zw/_element_2 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_2 . module = mkTest
INST /zw/_element_2 . class = VInst
INST /zw/_element_2 . hiertree = vInst13 {_element_2  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_2 . wave_format = {Int#(32) {/zw_2$D_IN}} {Bool {/zw_2$EN}} {Int#(32) /zw_2}
INST /zw/_element_2 . key = 14
INST /zw/_element_2 . ancestors = / /zw /zw/_element_2
INST /zw/_element_2 . name bsv = _element_2
INST /zw/_element_2 . name synth = zw_2
INST /zw/_element_2 . path bsv = /zw/_element_2
INST /zw/_element_2 . path synth = /zw_2
INST /zw/_element_2 . parent = /zw
INST /zw/_element_2 . signals = /zw/_element_2/CLK /zw/_element_2/D_IN /zw/_element_2/EN /zw/_element_2/Q_OUT /zw/_element_2/RST
INST /zw/_element_2 . predsignals = 
INST /zw/_element_2 . bodysignals = 
INST /zw/_element_2 . predmethods = 
INST /zw/_element_2 . bodymethods = 
INST /zw/_element_2 . portmethods = /zw/_element_2.read /zw/_element_2.write
got path INST /zw/_element_3
INST /zw/_element_3 . kind = Prim
INST /zw/_element_3 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_3 . module = mkTest
INST /zw/_element_3 . class = VInst
INST /zw/_element_3 . hiertree = vInst14 {_element_3  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_3 . wave_format = {Int#(32) {/zw_3$D_IN}} {Bool {/zw_3$EN}} {Int#(32) /zw_3}
INST /zw/_element_3 . key = 15
INST /zw/_element_3 . ancestors = / /zw /zw/_element_3
INST /zw/_element_3 . name bsv = _element_3
INST /zw/_element_3 . name synth = zw_3
INST /zw/_element_3 . path bsv = /zw/_element_3
INST /zw/_element_3 . path synth = /zw_3
INST /zw/_element_3 . parent = /zw
INST /zw/_element_3 . signals = /zw/_element_3/CLK /zw/_element_3/D_IN /zw/_element_3/EN /zw/_element_3/Q_OUT /zw/_element_3/RST
INST /zw/_element_3 . predsignals = 
INST /zw/_element_3 . bodysignals = 
INST /zw/_element_3 . predmethods = 
INST /zw/_element_3 . bodymethods = 
INST /zw/_element_3 . portmethods = /zw/_element_3.read /zw/_element_3.write
got path INST /zw/_element_4
INST /zw/_element_4 . kind = Prim
INST /zw/_element_4 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_4 . module = mkTest
INST /zw/_element_4 . class = VInst
INST /zw/_element_4 . hiertree = vInst15 {_element_4  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_4 . wave_format = {Int#(32) {/zw_4$D_IN}} {Bool {/zw_4$EN}} {Int#(32) /zw_4}
INST /zw/_element_4 . key = 16
INST /zw/_element_4 . ancestors = / /zw /zw/_element_4
INST /zw/_element_4 . name bsv = _element_4
INST /zw/_element_4 . name synth = zw_4
INST /zw/_element_4 . path bsv = /zw/_element_4
INST /zw/_element_4 . path synth = /zw_4
INST /zw/_element_4 . parent = /zw
INST /zw/_element_4 . signals = /zw/_element_4/CLK /zw/_element_4/D_IN /zw/_element_4/EN /zw/_element_4/Q_OUT /zw/_element_4/RST
INST /zw/_element_4 . predsignals = 
INST /zw/_element_4 . bodysignals = 
INST /zw/_element_4 . predmethods = 
INST /zw/_element_4 . bodymethods = 
INST /zw/_element_4 . portmethods = /zw/_element_4.read /zw/_element_4.write
starting method testing
RULE  /subis/_element_0 show = /subis/_element_0.bar()
RULE  /subis/_element_0 name = bar
RULE  /subis/_element_0 kind = Method
RULE  /subis/_element_0 wave_format = {Bool /subis_0/CAN_FIRE_bar} {Bool /subis_0/WILL_FIRE_bar}
RULE  /subis/_element_0 predmethods = 
RULE  /subis/_element_0 bodymethods = /subis/_element_0/barx.read /subis/_element_0/foo2.read
RULE  /subis/_element_0 signals = /subis/_element_0/CAN_FIRE_bar /subis/_element_0/WILL_FIRE_bar
RULE  /subis/_element_0 predsignals = 
RULE  /subis/_element_0 bodysignals = /subis/_element_0/barx/Q_OUT /subis/_element_0/foo2/Q_OUT
----
RULE  /subis/_element_0 show = /subis/_element_0.foo()
RULE  /subis/_element_0 name = foo
RULE  /subis/_element_0 kind = Method
RULE  /subis/_element_0 wave_format = {Bool /subis_0/CAN_FIRE_foo} {Bool /subis_0/WILL_FIRE_foo}
RULE  /subis/_element_0 predmethods = 
RULE  /subis/_element_0 bodymethods = /subis/_element_0/foo2.write
RULE  /subis/_element_0 signals = /subis/_element_0/CAN_FIRE_foo /subis/_element_0/WILL_FIRE_foo
RULE  /subis/_element_0 predsignals = 
RULE  /subis/_element_0 bodysignals = /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN
----
RULE  /subis/_element_1 show = /subis/_element_1.bar()
RULE  /subis/_element_1 name = bar
RULE  /subis/_element_1 kind = Method
RULE  /subis/_element_1 wave_format = {Bool /subis_1/CAN_FIRE_bar} {Bool /subis_1/WILL_FIRE_bar}
RULE  /subis/_element_1 predmethods = 
RULE  /subis/_element_1 bodymethods = /subis/_element_1/barx.read /subis/_element_1/foo2.read
RULE  /subis/_element_1 signals = /subis/_element_1/CAN_FIRE_bar /subis/_element_1/WILL_FIRE_bar
RULE  /subis/_element_1 predsignals = 
RULE  /subis/_element_1 bodysignals = /subis/_element_1/barx/Q_OUT /subis/_element_1/foo2/Q_OUT
----
RULE  /subis/_element_1 show = /subis/_element_1.foo()
RULE  /subis/_element_1 name = foo
RULE  /subis/_element_1 kind = Method
RULE  /subis/_element_1 wave_format = {Bool /subis_1/CAN_FIRE_foo} {Bool /subis_1/WILL_FIRE_foo}
RULE  /subis/_element_1 predmethods = 
RULE  /subis/_element_1 bodymethods = /subis/_element_1/foo2.write
RULE  /subis/_element_1 signals = /subis/_element_1/CAN_FIRE_foo /subis/_element_1/WILL_FIRE_foo
RULE  /subis/_element_1 predsignals = 
RULE  /subis/_element_1 bodysignals = /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN
----
starting signaltest
SIG /CLK . kind = Signal
SIG /CLK . name = CLK
SIG /CLK . path = /CLK
SIG /CLK . type = Clock
SIG /CLK . class = VSignal
SIG /CLK . wave_format = {Clock /CLK}
SIG /CLK . position = 
SIG /CLK . used_by 
SIG CLK . inst = /
SIG /Loop/Body_0/aa_0/CLK . kind = Signal
SIG /Loop/Body_0/aa_0/CLK . name = CLK
SIG /Loop/Body_0/aa_0/CLK . path = /Loop/Body_0/aa_0/CLK
SIG /Loop/Body_0/aa_0/CLK . type = Clock
SIG /Loop/Body_0/aa_0/CLK . class = VSignal
SIG /Loop/Body_0/aa_0/CLK . wave_format = 
SIG /Loop/Body_0/aa_0/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/CLK . used_by 
SIG CLK . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/D_IN . kind = Signal
SIG /Loop/Body_0/aa_0/D_IN . name = D_IN
SIG /Loop/Body_0/aa_0/D_IN . path = /Loop/Body_0/aa_0/D_IN
SIG /Loop/Body_0/aa_0/D_IN . type = Int#(32)
SIG /Loop/Body_0/aa_0/D_IN . class = VSignal
SIG /Loop/Body_0/aa_0/D_IN . wave_format = {Int#(32) {/aa_0$D_IN}}
SIG /Loop/Body_0/aa_0/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/EN . kind = Signal
SIG /Loop/Body_0/aa_0/EN . name = EN
SIG /Loop/Body_0/aa_0/EN . path = /Loop/Body_0/aa_0/EN
SIG /Loop/Body_0/aa_0/EN . type = Bool
SIG /Loop/Body_0/aa_0/EN . class = VSignal
SIG /Loop/Body_0/aa_0/EN . wave_format = {Bool {/aa_0$EN}}
SIG /Loop/Body_0/aa_0/EN . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/EN . used_by 
SIG EN . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/Q_OUT . kind = Signal
SIG /Loop/Body_0/aa_0/Q_OUT . name = Q_OUT
SIG /Loop/Body_0/aa_0/Q_OUT . path = /Loop/Body_0/aa_0/Q_OUT
SIG /Loop/Body_0/aa_0/Q_OUT . type = Int#(32)
SIG /Loop/Body_0/aa_0/Q_OUT . class = VSignal
SIG /Loop/Body_0/aa_0/Q_OUT . wave_format = {Int#(32) /aa_0}
SIG /Loop/Body_0/aa_0/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/bb_0/CLK . kind = Signal
SIG /Loop/Body_0/bb_0/CLK . name = CLK
SIG /Loop/Body_0/bb_0/CLK . path = /Loop/Body_0/bb_0/CLK
SIG /Loop/Body_0/bb_0/CLK . type = Clock
SIG /Loop/Body_0/bb_0/CLK . class = VSignal
SIG /Loop/Body_0/bb_0/CLK . wave_format = 
SIG /Loop/Body_0/bb_0/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/CLK . used_by 
SIG CLK . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/D_IN . kind = Signal
SIG /Loop/Body_0/bb_0/D_IN . name = D_IN
SIG /Loop/Body_0/bb_0/D_IN . path = /Loop/Body_0/bb_0/D_IN
SIG /Loop/Body_0/bb_0/D_IN . type = Int#(32)
SIG /Loop/Body_0/bb_0/D_IN . class = VSignal
SIG /Loop/Body_0/bb_0/D_IN . wave_format = {Int#(32) {/bb_0$D_IN}}
SIG /Loop/Body_0/bb_0/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/EN . kind = Signal
SIG /Loop/Body_0/bb_0/EN . name = EN
SIG /Loop/Body_0/bb_0/EN . path = /Loop/Body_0/bb_0/EN
SIG /Loop/Body_0/bb_0/EN . type = Bool
SIG /Loop/Body_0/bb_0/EN . class = VSignal
SIG /Loop/Body_0/bb_0/EN . wave_format = {Bool {/bb_0$EN}}
SIG /Loop/Body_0/bb_0/EN . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/EN . used_by 
SIG EN . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/Q_OUT . kind = Signal
SIG /Loop/Body_0/bb_0/Q_OUT . name = Q_OUT
SIG /Loop/Body_0/bb_0/Q_OUT . path = /Loop/Body_0/bb_0/Q_OUT
SIG /Loop/Body_0/bb_0/Q_OUT . type = Int#(32)
SIG /Loop/Body_0/bb_0/Q_OUT . class = VSignal
SIG /Loop/Body_0/bb_0/Q_OUT . wave_format = {Int#(32) /bb_0}
SIG /Loop/Body_0/bb_0/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_1/aa_1/CLK . kind = Signal
SIG /Loop/Body_1/aa_1/CLK . name = CLK
SIG /Loop/Body_1/aa_1/CLK . path = /Loop/Body_1/aa_1/CLK
SIG /Loop/Body_1/aa_1/CLK . type = Clock
SIG /Loop/Body_1/aa_1/CLK . class = VSignal
SIG /Loop/Body_1/aa_1/CLK . wave_format = 
SIG /Loop/Body_1/aa_1/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/CLK . used_by 
SIG CLK . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/D_IN . kind = Signal
SIG /Loop/Body_1/aa_1/D_IN . name = D_IN
SIG /Loop/Body_1/aa_1/D_IN . path = /Loop/Body_1/aa_1/D_IN
SIG /Loop/Body_1/aa_1/D_IN . type = Int#(32)
SIG /Loop/Body_1/aa_1/D_IN . class = VSignal
SIG /Loop/Body_1/aa_1/D_IN . wave_format = {Int#(32) {/aa_1$D_IN}}
SIG /Loop/Body_1/aa_1/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/EN . kind = Signal
SIG /Loop/Body_1/aa_1/EN . name = EN
SIG /Loop/Body_1/aa_1/EN . path = /Loop/Body_1/aa_1/EN
SIG /Loop/Body_1/aa_1/EN . type = Bool
SIG /Loop/Body_1/aa_1/EN . class = VSignal
SIG /Loop/Body_1/aa_1/EN . wave_format = {Bool {/aa_1$EN}}
SIG /Loop/Body_1/aa_1/EN . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/EN . used_by 
SIG EN . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/Q_OUT . kind = Signal
SIG /Loop/Body_1/aa_1/Q_OUT . name = Q_OUT
SIG /Loop/Body_1/aa_1/Q_OUT . path = /Loop/Body_1/aa_1/Q_OUT
SIG /Loop/Body_1/aa_1/Q_OUT . type = Int#(32)
SIG /Loop/Body_1/aa_1/Q_OUT . class = VSignal
SIG /Loop/Body_1/aa_1/Q_OUT . wave_format = {Int#(32) /aa_1}
SIG /Loop/Body_1/aa_1/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/bb_1/CLK . kind = Signal
SIG /Loop/Body_1/bb_1/CLK . name = CLK
SIG /Loop/Body_1/bb_1/CLK . path = /Loop/Body_1/bb_1/CLK
SIG /Loop/Body_1/bb_1/CLK . type = Clock
SIG /Loop/Body_1/bb_1/CLK . class = VSignal
SIG /Loop/Body_1/bb_1/CLK . wave_format = 
SIG /Loop/Body_1/bb_1/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/CLK . used_by 
SIG CLK . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/D_IN . kind = Signal
SIG /Loop/Body_1/bb_1/D_IN . name = D_IN
SIG /Loop/Body_1/bb_1/D_IN . path = /Loop/Body_1/bb_1/D_IN
SIG /Loop/Body_1/bb_1/D_IN . type = Int#(32)
SIG /Loop/Body_1/bb_1/D_IN . class = VSignal
SIG /Loop/Body_1/bb_1/D_IN . wave_format = {Int#(32) {/bb_1$D_IN}}
SIG /Loop/Body_1/bb_1/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/EN . kind = Signal
SIG /Loop/Body_1/bb_1/EN . name = EN
SIG /Loop/Body_1/bb_1/EN . path = /Loop/Body_1/bb_1/EN
SIG /Loop/Body_1/bb_1/EN . type = Bool
SIG /Loop/Body_1/bb_1/EN . class = VSignal
SIG /Loop/Body_1/bb_1/EN . wave_format = {Bool {/bb_1$EN}}
SIG /Loop/Body_1/bb_1/EN . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/EN . used_by 
SIG EN . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/Q_OUT . kind = Signal
SIG /Loop/Body_1/bb_1/Q_OUT . name = Q_OUT
SIG /Loop/Body_1/bb_1/Q_OUT . path = /Loop/Body_1/bb_1/Q_OUT
SIG /Loop/Body_1/bb_1/Q_OUT . type = Int#(32)
SIG /Loop/Body_1/bb_1/Q_OUT . class = VSignal
SIG /Loop/Body_1/bb_1/Q_OUT . wave_format = {Int#(32) /bb_1}
SIG /Loop/Body_1/bb_1/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_2/aa_2/CLK . kind = Signal
SIG /Loop/Body_2/aa_2/CLK . name = CLK
SIG /Loop/Body_2/aa_2/CLK . path = /Loop/Body_2/aa_2/CLK
SIG /Loop/Body_2/aa_2/CLK . type = Clock
SIG /Loop/Body_2/aa_2/CLK . class = VSignal
SIG /Loop/Body_2/aa_2/CLK . wave_format = 
SIG /Loop/Body_2/aa_2/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/CLK . used_by 
SIG CLK . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/D_IN . kind = Signal
SIG /Loop/Body_2/aa_2/D_IN . name = D_IN
SIG /Loop/Body_2/aa_2/D_IN . path = /Loop/Body_2/aa_2/D_IN
SIG /Loop/Body_2/aa_2/D_IN . type = Int#(32)
SIG /Loop/Body_2/aa_2/D_IN . class = VSignal
SIG /Loop/Body_2/aa_2/D_IN . wave_format = {Int#(32) {/aa_2$D_IN}}
SIG /Loop/Body_2/aa_2/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/EN . kind = Signal
SIG /Loop/Body_2/aa_2/EN . name = EN
SIG /Loop/Body_2/aa_2/EN . path = /Loop/Body_2/aa_2/EN
SIG /Loop/Body_2/aa_2/EN . type = Bool
SIG /Loop/Body_2/aa_2/EN . class = VSignal
SIG /Loop/Body_2/aa_2/EN . wave_format = {Bool {/aa_2$EN}}
SIG /Loop/Body_2/aa_2/EN . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/EN . used_by 
SIG EN . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/Q_OUT . kind = Signal
SIG /Loop/Body_2/aa_2/Q_OUT . name = Q_OUT
SIG /Loop/Body_2/aa_2/Q_OUT . path = /Loop/Body_2/aa_2/Q_OUT
SIG /Loop/Body_2/aa_2/Q_OUT . type = Int#(32)
SIG /Loop/Body_2/aa_2/Q_OUT . class = VSignal
SIG /Loop/Body_2/aa_2/Q_OUT . wave_format = {Int#(32) /aa_2}
SIG /Loop/Body_2/aa_2/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/bb_2/CLK . kind = Signal
SIG /Loop/Body_2/bb_2/CLK . name = CLK
SIG /Loop/Body_2/bb_2/CLK . path = /Loop/Body_2/bb_2/CLK
SIG /Loop/Body_2/bb_2/CLK . type = Clock
SIG /Loop/Body_2/bb_2/CLK . class = VSignal
SIG /Loop/Body_2/bb_2/CLK . wave_format = 
SIG /Loop/Body_2/bb_2/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/CLK . used_by 
SIG CLK . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/D_IN . kind = Signal
SIG /Loop/Body_2/bb_2/D_IN . name = D_IN
SIG /Loop/Body_2/bb_2/D_IN . path = /Loop/Body_2/bb_2/D_IN
SIG /Loop/Body_2/bb_2/D_IN . type = Int#(32)
SIG /Loop/Body_2/bb_2/D_IN . class = VSignal
SIG /Loop/Body_2/bb_2/D_IN . wave_format = {Int#(32) {/bb_2$D_IN}}
SIG /Loop/Body_2/bb_2/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/EN . kind = Signal
SIG /Loop/Body_2/bb_2/EN . name = EN
SIG /Loop/Body_2/bb_2/EN . path = /Loop/Body_2/bb_2/EN
SIG /Loop/Body_2/bb_2/EN . type = Bool
SIG /Loop/Body_2/bb_2/EN . class = VSignal
SIG /Loop/Body_2/bb_2/EN . wave_format = {Bool {/bb_2$EN}}
SIG /Loop/Body_2/bb_2/EN . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/EN . used_by 
SIG EN . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/Q_OUT . kind = Signal
SIG /Loop/Body_2/bb_2/Q_OUT . name = Q_OUT
SIG /Loop/Body_2/bb_2/Q_OUT . path = /Loop/Body_2/bb_2/Q_OUT
SIG /Loop/Body_2/bb_2/Q_OUT . type = Int#(32)
SIG /Loop/Body_2/bb_2/Q_OUT . class = VSignal
SIG /Loop/Body_2/bb_2/Q_OUT . wave_format = {Int#(32) /bb_2}
SIG /Loop/Body_2/bb_2/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_3/aa_3/CLK . kind = Signal
SIG /Loop/Body_3/aa_3/CLK . name = CLK
SIG /Loop/Body_3/aa_3/CLK . path = /Loop/Body_3/aa_3/CLK
SIG /Loop/Body_3/aa_3/CLK . type = Clock
SIG /Loop/Body_3/aa_3/CLK . class = VSignal
SIG /Loop/Body_3/aa_3/CLK . wave_format = 
SIG /Loop/Body_3/aa_3/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/CLK . used_by 
SIG CLK . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/D_IN . kind = Signal
SIG /Loop/Body_3/aa_3/D_IN . name = D_IN
SIG /Loop/Body_3/aa_3/D_IN . path = /Loop/Body_3/aa_3/D_IN
SIG /Loop/Body_3/aa_3/D_IN . type = Int#(32)
SIG /Loop/Body_3/aa_3/D_IN . class = VSignal
SIG /Loop/Body_3/aa_3/D_IN . wave_format = {Int#(32) {/aa_3$D_IN}}
SIG /Loop/Body_3/aa_3/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/EN . kind = Signal
SIG /Loop/Body_3/aa_3/EN . name = EN
SIG /Loop/Body_3/aa_3/EN . path = /Loop/Body_3/aa_3/EN
SIG /Loop/Body_3/aa_3/EN . type = Bool
SIG /Loop/Body_3/aa_3/EN . class = VSignal
SIG /Loop/Body_3/aa_3/EN . wave_format = {Bool {/aa_3$EN}}
SIG /Loop/Body_3/aa_3/EN . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/EN . used_by 
SIG EN . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/Q_OUT . kind = Signal
SIG /Loop/Body_3/aa_3/Q_OUT . name = Q_OUT
SIG /Loop/Body_3/aa_3/Q_OUT . path = /Loop/Body_3/aa_3/Q_OUT
SIG /Loop/Body_3/aa_3/Q_OUT . type = Int#(32)
SIG /Loop/Body_3/aa_3/Q_OUT . class = VSignal
SIG /Loop/Body_3/aa_3/Q_OUT . wave_format = {Int#(32) /aa_3}
SIG /Loop/Body_3/aa_3/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/bb_3/CLK . kind = Signal
SIG /Loop/Body_3/bb_3/CLK . name = CLK
SIG /Loop/Body_3/bb_3/CLK . path = /Loop/Body_3/bb_3/CLK
SIG /Loop/Body_3/bb_3/CLK . type = Clock
SIG /Loop/Body_3/bb_3/CLK . class = VSignal
SIG /Loop/Body_3/bb_3/CLK . wave_format = 
SIG /Loop/Body_3/bb_3/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/CLK . used_by 
SIG CLK . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/D_IN . kind = Signal
SIG /Loop/Body_3/bb_3/D_IN . name = D_IN
SIG /Loop/Body_3/bb_3/D_IN . path = /Loop/Body_3/bb_3/D_IN
SIG /Loop/Body_3/bb_3/D_IN . type = Int#(32)
SIG /Loop/Body_3/bb_3/D_IN . class = VSignal
SIG /Loop/Body_3/bb_3/D_IN . wave_format = {Int#(32) {/bb_3$D_IN}}
SIG /Loop/Body_3/bb_3/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/EN . kind = Signal
SIG /Loop/Body_3/bb_3/EN . name = EN
SIG /Loop/Body_3/bb_3/EN . path = /Loop/Body_3/bb_3/EN
SIG /Loop/Body_3/bb_3/EN . type = Bool
SIG /Loop/Body_3/bb_3/EN . class = VSignal
SIG /Loop/Body_3/bb_3/EN . wave_format = {Bool {/bb_3$EN}}
SIG /Loop/Body_3/bb_3/EN . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/EN . used_by 
SIG EN . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/Q_OUT . kind = Signal
SIG /Loop/Body_3/bb_3/Q_OUT . name = Q_OUT
SIG /Loop/Body_3/bb_3/Q_OUT . path = /Loop/Body_3/bb_3/Q_OUT
SIG /Loop/Body_3/bb_3/Q_OUT . type = Int#(32)
SIG /Loop/Body_3/bb_3/Q_OUT . class = VSignal
SIG /Loop/Body_3/bb_3/Q_OUT . wave_format = {Int#(32) /bb_3}
SIG /Loop/Body_3/bb_3/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_3/bb_3
SIG /Loop/x_0/CLK . kind = Signal
SIG /Loop/x_0/CLK . name = CLK
SIG /Loop/x_0/CLK . path = /Loop/x_0/CLK
SIG /Loop/x_0/CLK . type = Clock
SIG /Loop/x_0/CLK . class = VSignal
SIG /Loop/x_0/CLK . wave_format = 
SIG /Loop/x_0/CLK . position = Test2.bsv 20 7
SIG /Loop/x_0/CLK . used_by 
SIG CLK . inst = /Loop/x_0
SIG /Loop/x_0/D_IN . kind = Signal
SIG /Loop/x_0/D_IN . name = D_IN
SIG /Loop/x_0/D_IN . path = /Loop/x_0/D_IN
SIG /Loop/x_0/D_IN . type = Int#(32)
SIG /Loop/x_0/D_IN . class = VSignal
SIG /Loop/x_0/D_IN . wave_format = {Int#(32) {/x_0$D_IN}}
SIG /Loop/x_0/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_0/D_IN . used_by 
SIG D_IN . inst = /Loop/x_0
SIG /Loop/x_0/EN . kind = Signal
SIG /Loop/x_0/EN . name = EN
SIG /Loop/x_0/EN . path = /Loop/x_0/EN
SIG /Loop/x_0/EN . type = Bool
SIG /Loop/x_0/EN . class = VSignal
SIG /Loop/x_0/EN . wave_format = {Bool {/x_0$EN}}
SIG /Loop/x_0/EN . position = Test2.bsv 20 7
SIG /Loop/x_0/EN . used_by 
SIG EN . inst = /Loop/x_0
SIG /Loop/x_0/Q_OUT . kind = Signal
SIG /Loop/x_0/Q_OUT . name = Q_OUT
SIG /Loop/x_0/Q_OUT . path = /Loop/x_0/Q_OUT
SIG /Loop/x_0/Q_OUT . type = Int#(32)
SIG /Loop/x_0/Q_OUT . class = VSignal
SIG /Loop/x_0/Q_OUT . wave_format = {Int#(32) /x_0}
SIG /Loop/x_0/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_0
SIG /Loop/x_1/CLK . kind = Signal
SIG /Loop/x_1/CLK . name = CLK
SIG /Loop/x_1/CLK . path = /Loop/x_1/CLK
SIG /Loop/x_1/CLK . type = Clock
SIG /Loop/x_1/CLK . class = VSignal
SIG /Loop/x_1/CLK . wave_format = 
SIG /Loop/x_1/CLK . position = Test2.bsv 20 7
SIG /Loop/x_1/CLK . used_by 
SIG CLK . inst = /Loop/x_1
SIG /Loop/x_1/D_IN . kind = Signal
SIG /Loop/x_1/D_IN . name = D_IN
SIG /Loop/x_1/D_IN . path = /Loop/x_1/D_IN
SIG /Loop/x_1/D_IN . type = Int#(32)
SIG /Loop/x_1/D_IN . class = VSignal
SIG /Loop/x_1/D_IN . wave_format = {Int#(32) {/x_1$D_IN}}
SIG /Loop/x_1/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_1/D_IN . used_by 
SIG D_IN . inst = /Loop/x_1
SIG /Loop/x_1/EN . kind = Signal
SIG /Loop/x_1/EN . name = EN
SIG /Loop/x_1/EN . path = /Loop/x_1/EN
SIG /Loop/x_1/EN . type = Bool
SIG /Loop/x_1/EN . class = VSignal
SIG /Loop/x_1/EN . wave_format = {Bool {/x_1$EN}}
SIG /Loop/x_1/EN . position = Test2.bsv 20 7
SIG /Loop/x_1/EN . used_by 
SIG EN . inst = /Loop/x_1
SIG /Loop/x_1/Q_OUT . kind = Signal
SIG /Loop/x_1/Q_OUT . name = Q_OUT
SIG /Loop/x_1/Q_OUT . path = /Loop/x_1/Q_OUT
SIG /Loop/x_1/Q_OUT . type = Int#(32)
SIG /Loop/x_1/Q_OUT . class = VSignal
SIG /Loop/x_1/Q_OUT . wave_format = {Int#(32) /x_1}
SIG /Loop/x_1/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_1
SIG /Loop/x_2/CLK . kind = Signal
SIG /Loop/x_2/CLK . name = CLK
SIG /Loop/x_2/CLK . path = /Loop/x_2/CLK
SIG /Loop/x_2/CLK . type = Clock
SIG /Loop/x_2/CLK . class = VSignal
SIG /Loop/x_2/CLK . wave_format = 
SIG /Loop/x_2/CLK . position = Test2.bsv 20 7
SIG /Loop/x_2/CLK . used_by 
SIG CLK . inst = /Loop/x_2
SIG /Loop/x_2/D_IN . kind = Signal
SIG /Loop/x_2/D_IN . name = D_IN
SIG /Loop/x_2/D_IN . path = /Loop/x_2/D_IN
SIG /Loop/x_2/D_IN . type = Int#(32)
SIG /Loop/x_2/D_IN . class = VSignal
SIG /Loop/x_2/D_IN . wave_format = {Int#(32) {/x_2$D_IN}}
SIG /Loop/x_2/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_2/D_IN . used_by 
SIG D_IN . inst = /Loop/x_2
SIG /Loop/x_2/EN . kind = Signal
SIG /Loop/x_2/EN . name = EN
SIG /Loop/x_2/EN . path = /Loop/x_2/EN
SIG /Loop/x_2/EN . type = Bool
SIG /Loop/x_2/EN . class = VSignal
SIG /Loop/x_2/EN . wave_format = {Bool {/x_2$EN}}
SIG /Loop/x_2/EN . position = Test2.bsv 20 7
SIG /Loop/x_2/EN . used_by 
SIG EN . inst = /Loop/x_2
SIG /Loop/x_2/Q_OUT . kind = Signal
SIG /Loop/x_2/Q_OUT . name = Q_OUT
SIG /Loop/x_2/Q_OUT . path = /Loop/x_2/Q_OUT
SIG /Loop/x_2/Q_OUT . type = Int#(32)
SIG /Loop/x_2/Q_OUT . class = VSignal
SIG /Loop/x_2/Q_OUT . wave_format = {Int#(32) /x_2}
SIG /Loop/x_2/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_2
SIG /Loop/x_3/CLK . kind = Signal
SIG /Loop/x_3/CLK . name = CLK
SIG /Loop/x_3/CLK . path = /Loop/x_3/CLK
SIG /Loop/x_3/CLK . type = Clock
SIG /Loop/x_3/CLK . class = VSignal
SIG /Loop/x_3/CLK . wave_format = 
SIG /Loop/x_3/CLK . position = Test2.bsv 20 7
SIG /Loop/x_3/CLK . used_by 
SIG CLK . inst = /Loop/x_3
SIG /Loop/x_3/D_IN . kind = Signal
SIG /Loop/x_3/D_IN . name = D_IN
SIG /Loop/x_3/D_IN . path = /Loop/x_3/D_IN
SIG /Loop/x_3/D_IN . type = Int#(32)
SIG /Loop/x_3/D_IN . class = VSignal
SIG /Loop/x_3/D_IN . wave_format = {Int#(32) {/x_3$D_IN}}
SIG /Loop/x_3/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_3/D_IN . used_by 
SIG D_IN . inst = /Loop/x_3
SIG /Loop/x_3/EN . kind = Signal
SIG /Loop/x_3/EN . name = EN
SIG /Loop/x_3/EN . path = /Loop/x_3/EN
SIG /Loop/x_3/EN . type = Bool
SIG /Loop/x_3/EN . class = VSignal
SIG /Loop/x_3/EN . wave_format = {Bool {/x_3$EN}}
SIG /Loop/x_3/EN . position = Test2.bsv 20 7
SIG /Loop/x_3/EN . used_by 
SIG EN . inst = /Loop/x_3
SIG /Loop/x_3/Q_OUT . kind = Signal
SIG /Loop/x_3/Q_OUT . name = Q_OUT
SIG /Loop/x_3/Q_OUT . path = /Loop/x_3/Q_OUT
SIG /Loop/x_3/Q_OUT . type = Int#(32)
SIG /Loop/x_3/Q_OUT . class = VSignal
SIG /Loop/x_3/Q_OUT . wave_format = {Int#(32) /x_3}
SIG /Loop/x_3/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_3
SIG /RST_N . kind = Signal
SIG /RST_N . name = RST_N
SIG /RST_N . path = /RST_N
SIG /RST_N . type = Reset
SIG /RST_N . class = VSignal
SIG /RST_N . wave_format = {Reset /RST_N}
SIG /RST_N . position = 
SIG /RST_N . used_by 
SIG RST_N . inst = /
SIG /i . kind = Signal
SIG /i . name = i
SIG /i . path = /i
SIG /i . type = Inout#(Test::Bar)
SIG /i . class = VSignal
SIG /i . wave_format = {Inout#(Test::Bar) /i}
SIG /i . position = 
SIG /i . used_by 
SIG i . inst = /
SIG /subis/_element_0/CLK . kind = Signal
SIG /subis/_element_0/CLK . name = CLK
SIG /subis/_element_0/CLK . path = /subis/_element_0/CLK
SIG /subis/_element_0/CLK . type = Clock
SIG /subis/_element_0/CLK . class = VSignal
SIG /subis/_element_0/CLK . wave_format = {Clock /subis_0/CLK}
SIG /subis/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/CLK . used_by 
SIG CLK . inst = /subis/_element_0
SIG /subis/_element_0/EN_foo . kind = Signal
SIG /subis/_element_0/EN_foo . name = EN_foo
SIG /subis/_element_0/EN_foo . path = /subis/_element_0/EN_foo
SIG /subis/_element_0/EN_foo . type = Bool
SIG /subis/_element_0/EN_foo . class = VSignal
SIG /subis/_element_0/EN_foo . wave_format = {Bool /subis_0/EN_foo}
SIG /subis/_element_0/EN_foo . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/EN_foo . used_by 
SIG EN_foo . inst = /subis/_element_0
SIG /subis/_element_0/RST_N . kind = Signal
SIG /subis/_element_0/RST_N . name = RST_N
SIG /subis/_element_0/RST_N . path = /subis/_element_0/RST_N
SIG /subis/_element_0/RST_N . type = Reset
SIG /subis/_element_0/RST_N . class = VSignal
SIG /subis/_element_0/RST_N . wave_format = {Reset /subis_0/RST_N}
SIG /subis/_element_0/RST_N . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/RST_N . used_by 
SIG RST_N . inst = /subis/_element_0
SIG /subis/_element_0/RadyOnTheReadMethod . kind = Signal
SIG /subis/_element_0/RadyOnTheReadMethod . name = RadyOnTheReadMethod
SIG /subis/_element_0/RadyOnTheReadMethod . path = /subis/_element_0/RadyOnTheReadMethod
SIG /subis/_element_0/RadyOnTheReadMethod . type = Bool
SIG /subis/_element_0/RadyOnTheReadMethod . class = VSignal
SIG /subis/_element_0/RadyOnTheReadMethod . wave_format = {Bool /subis_0/RadyOnTheReadMethod}
SIG /subis/_element_0/RadyOnTheReadMethod . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/RadyOnTheReadMethod . used_by 
SIG RadyOnTheReadMethod . inst = /subis/_element_0
SIG /subis/_element_0/ax . kind = Signal
SIG /subis/_element_0/ax . name = ax
SIG /subis/_element_0/ax . path = /subis/_element_0/ax
SIG /subis/_element_0/ax . type = Bit#(3)
SIG /subis/_element_0/ax . class = VSignal
SIG /subis/_element_0/ax . wave_format = {Bit#(3) /subis_0/ax}
SIG /subis/_element_0/ax . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/ax . used_by 
SIG ax . inst = /subis/_element_0
SIG /subis/_element_0/bar . kind = Signal
SIG /subis/_element_0/bar . name = bar
SIG /subis/_element_0/bar . path = /subis/_element_0/bar
SIG /subis/_element_0/bar . type = Int#(32)
SIG /subis/_element_0/bar . class = VSignal
SIG /subis/_element_0/bar . wave_format = {Int#(32) /subis_0/bar}
SIG /subis/_element_0/bar . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/bar . used_by 
SIG bar . inst = /subis/_element_0
SIG /subis/_element_0/barx/CLK . kind = Signal
SIG /subis/_element_0/barx/CLK . name = CLK
SIG /subis/_element_0/barx/CLK . path = /subis/_element_0/barx/CLK
SIG /subis/_element_0/barx/CLK . type = Clock
SIG /subis/_element_0/barx/CLK . class = VSignal
SIG /subis/_element_0/barx/CLK . wave_format = 
SIG /subis/_element_0/barx/CLK . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/CLK . used_by 
SIG CLK . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/D_IN . kind = Signal
SIG /subis/_element_0/barx/D_IN . name = D_IN
SIG /subis/_element_0/barx/D_IN . path = /subis/_element_0/barx/D_IN
SIG /subis/_element_0/barx/D_IN . type = Bit#(3)
SIG /subis/_element_0/barx/D_IN . class = VSignal
SIG /subis/_element_0/barx/D_IN . wave_format = {Bit#(3) {/subis_0/barx$D_IN}}
SIG /subis/_element_0/barx/D_IN . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/D_IN . used_by 
SIG D_IN . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/EN . kind = Signal
SIG /subis/_element_0/barx/EN . name = EN
SIG /subis/_element_0/barx/EN . path = /subis/_element_0/barx/EN
SIG /subis/_element_0/barx/EN . type = Bool
SIG /subis/_element_0/barx/EN . class = VSignal
SIG /subis/_element_0/barx/EN . wave_format = {Bool {/subis_0/barx$EN}}
SIG /subis/_element_0/barx/EN . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/EN . used_by 
SIG EN . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/Q_OUT . kind = Signal
SIG /subis/_element_0/barx/Q_OUT . name = Q_OUT
SIG /subis/_element_0/barx/Q_OUT . path = /subis/_element_0/barx/Q_OUT
SIG /subis/_element_0/barx/Q_OUT . type = Bit#(3)
SIG /subis/_element_0/barx/Q_OUT . class = VSignal
SIG /subis/_element_0/barx/Q_OUT . wave_format = {Bit#(3) /subis_0/barx}
SIG /subis/_element_0/barx/Q_OUT . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/Q_OUT . used_by /subis/_element_0.bar()
SIG Q_OUT . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/RST . kind = Signal
SIG /subis/_element_0/barx/RST . name = RST
SIG /subis/_element_0/barx/RST . path = /subis/_element_0/barx/RST
SIG /subis/_element_0/barx/RST . type = Reset
SIG /subis/_element_0/barx/RST . class = VSignal
SIG /subis/_element_0/barx/RST . wave_format = 
SIG /subis/_element_0/barx/RST . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/RST . used_by 
SIG RST . inst = /subis/_element_0/barx
SIG /subis/_element_0/foo2/CLK . kind = Signal
SIG /subis/_element_0/foo2/CLK . name = CLK
SIG /subis/_element_0/foo2/CLK . path = /subis/_element_0/foo2/CLK
SIG /subis/_element_0/foo2/CLK . type = Clock
SIG /subis/_element_0/foo2/CLK . class = VSignal
SIG /subis/_element_0/foo2/CLK . wave_format = 
SIG /subis/_element_0/foo2/CLK . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/CLK . used_by 
SIG CLK . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/D_IN . kind = Signal
SIG /subis/_element_0/foo2/D_IN . name = D_IN
SIG /subis/_element_0/foo2/D_IN . path = /subis/_element_0/foo2/D_IN
SIG /subis/_element_0/foo2/D_IN . type = Int#(32)
SIG /subis/_element_0/foo2/D_IN . class = VSignal
SIG /subis/_element_0/foo2/D_IN . wave_format = {Int#(32) {/subis_0/foo2$D_IN}}
SIG /subis/_element_0/foo2/D_IN . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/D_IN . used_by /subis/_element_0.foo()
SIG D_IN . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/EN . kind = Signal
SIG /subis/_element_0/foo2/EN . name = EN
SIG /subis/_element_0/foo2/EN . path = /subis/_element_0/foo2/EN
SIG /subis/_element_0/foo2/EN . type = Bool
SIG /subis/_element_0/foo2/EN . class = VSignal
SIG /subis/_element_0/foo2/EN . wave_format = {Bool {/subis_0/foo2$EN}}
SIG /subis/_element_0/foo2/EN . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/EN . used_by /subis/_element_0.foo()
SIG EN . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/Q_OUT . kind = Signal
SIG /subis/_element_0/foo2/Q_OUT . name = Q_OUT
SIG /subis/_element_0/foo2/Q_OUT . path = /subis/_element_0/foo2/Q_OUT
SIG /subis/_element_0/foo2/Q_OUT . type = Int#(32)
SIG /subis/_element_0/foo2/Q_OUT . class = VSignal
SIG /subis/_element_0/foo2/Q_OUT . wave_format = {Int#(32) /subis_0/foo2}
SIG /subis/_element_0/foo2/Q_OUT . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/Q_OUT . used_by /subis/_element_0.bar()
SIG Q_OUT . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/RST . kind = Signal
SIG /subis/_element_0/foo2/RST . name = RST
SIG /subis/_element_0/foo2/RST . path = /subis/_element_0/foo2/RST
SIG /subis/_element_0/foo2/RST . type = Reset
SIG /subis/_element_0/foo2/RST . class = VSignal
SIG /subis/_element_0/foo2/RST . wave_format = 
SIG /subis/_element_0/foo2/RST . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/RST . used_by 
SIG RST . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo_x . kind = Signal
SIG /subis/_element_0/foo_x . name = foo_x
SIG /subis/_element_0/foo_x . path = /subis/_element_0/foo_x
SIG /subis/_element_0/foo_x . type = Int#(32)
SIG /subis/_element_0/foo_x . class = VSignal
SIG /subis/_element_0/foo_x . wave_format = {Int#(32) /subis_0/foo_x}
SIG /subis/_element_0/foo_x . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/foo_x . used_by 
SIG foo_x . inst = /subis/_element_0
SIG /subis/_element_1/CLK . kind = Signal
SIG /subis/_element_1/CLK . name = CLK
SIG /subis/_element_1/CLK . path = /subis/_element_1/CLK
SIG /subis/_element_1/CLK . type = Clock
SIG /subis/_element_1/CLK . class = VSignal
SIG /subis/_element_1/CLK . wave_format = {Clock /subis_1/CLK}
SIG /subis/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/CLK . used_by 
SIG CLK . inst = /subis/_element_1
SIG /subis/_element_1/EN_foo . kind = Signal
SIG /subis/_element_1/EN_foo . name = EN_foo
SIG /subis/_element_1/EN_foo . path = /subis/_element_1/EN_foo
SIG /subis/_element_1/EN_foo . type = Bool
SIG /subis/_element_1/EN_foo . class = VSignal
SIG /subis/_element_1/EN_foo . wave_format = {Bool /subis_1/EN_foo}
SIG /subis/_element_1/EN_foo . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/EN_foo . used_by 
SIG EN_foo . inst = /subis/_element_1
SIG /subis/_element_1/RST_N . kind = Signal
SIG /subis/_element_1/RST_N . name = RST_N
SIG /subis/_element_1/RST_N . path = /subis/_element_1/RST_N
SIG /subis/_element_1/RST_N . type = Reset
SIG /subis/_element_1/RST_N . class = VSignal
SIG /subis/_element_1/RST_N . wave_format = {Reset /subis_1/RST_N}
SIG /subis/_element_1/RST_N . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/RST_N . used_by 
SIG RST_N . inst = /subis/_element_1
SIG /subis/_element_1/RadyOnTheReadMethod . kind = Signal
SIG /subis/_element_1/RadyOnTheReadMethod . name = RadyOnTheReadMethod
SIG /subis/_element_1/RadyOnTheReadMethod . path = /subis/_element_1/RadyOnTheReadMethod
SIG /subis/_element_1/RadyOnTheReadMethod . type = Bool
SIG /subis/_element_1/RadyOnTheReadMethod . class = VSignal
SIG /subis/_element_1/RadyOnTheReadMethod . wave_format = {Bool /subis_1/RadyOnTheReadMethod}
SIG /subis/_element_1/RadyOnTheReadMethod . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/RadyOnTheReadMethod . used_by 
SIG RadyOnTheReadMethod . inst = /subis/_element_1
SIG /subis/_element_1/ax . kind = Signal
SIG /subis/_element_1/ax . name = ax
SIG /subis/_element_1/ax . path = /subis/_element_1/ax
SIG /subis/_element_1/ax . type = Bit#(3)
SIG /subis/_element_1/ax . class = VSignal
SIG /subis/_element_1/ax . wave_format = {Bit#(3) /subis_1/ax}
SIG /subis/_element_1/ax . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/ax . used_by 
SIG ax . inst = /subis/_element_1
SIG /subis/_element_1/bar . kind = Signal
SIG /subis/_element_1/bar . name = bar
SIG /subis/_element_1/bar . path = /subis/_element_1/bar
SIG /subis/_element_1/bar . type = Int#(32)
SIG /subis/_element_1/bar . class = VSignal
SIG /subis/_element_1/bar . wave_format = {Int#(32) /subis_1/bar}
SIG /subis/_element_1/bar . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/bar . used_by 
SIG bar . inst = /subis/_element_1
SIG /subis/_element_1/barx/CLK . kind = Signal
SIG /subis/_element_1/barx/CLK . name = CLK
SIG /subis/_element_1/barx/CLK . path = /subis/_element_1/barx/CLK
SIG /subis/_element_1/barx/CLK . type = Clock
SIG /subis/_element_1/barx/CLK . class = VSignal
SIG /subis/_element_1/barx/CLK . wave_format = 
SIG /subis/_element_1/barx/CLK . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/CLK . used_by 
SIG CLK . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/D_IN . kind = Signal
SIG /subis/_element_1/barx/D_IN . name = D_IN
SIG /subis/_element_1/barx/D_IN . path = /subis/_element_1/barx/D_IN
SIG /subis/_element_1/barx/D_IN . type = Bit#(3)
SIG /subis/_element_1/barx/D_IN . class = VSignal
SIG /subis/_element_1/barx/D_IN . wave_format = {Bit#(3) {/subis_1/barx$D_IN}}
SIG /subis/_element_1/barx/D_IN . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/D_IN . used_by 
SIG D_IN . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/EN . kind = Signal
SIG /subis/_element_1/barx/EN . name = EN
SIG /subis/_element_1/barx/EN . path = /subis/_element_1/barx/EN
SIG /subis/_element_1/barx/EN . type = Bool
SIG /subis/_element_1/barx/EN . class = VSignal
SIG /subis/_element_1/barx/EN . wave_format = {Bool {/subis_1/barx$EN}}
SIG /subis/_element_1/barx/EN . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/EN . used_by 
SIG EN . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/Q_OUT . kind = Signal
SIG /subis/_element_1/barx/Q_OUT . name = Q_OUT
SIG /subis/_element_1/barx/Q_OUT . path = /subis/_element_1/barx/Q_OUT
SIG /subis/_element_1/barx/Q_OUT . type = Bit#(3)
SIG /subis/_element_1/barx/Q_OUT . class = VSignal
SIG /subis/_element_1/barx/Q_OUT . wave_format = {Bit#(3) /subis_1/barx}
SIG /subis/_element_1/barx/Q_OUT . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/Q_OUT . used_by /subis/_element_1.bar()
SIG Q_OUT . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/RST . kind = Signal
SIG /subis/_element_1/barx/RST . name = RST
SIG /subis/_element_1/barx/RST . path = /subis/_element_1/barx/RST
SIG /subis/_element_1/barx/RST . type = Reset
SIG /subis/_element_1/barx/RST . class = VSignal
SIG /subis/_element_1/barx/RST . wave_format = 
SIG /subis/_element_1/barx/RST . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/RST . used_by 
SIG RST . inst = /subis/_element_1/barx
SIG /subis/_element_1/foo2/CLK . kind = Signal
SIG /subis/_element_1/foo2/CLK . name = CLK
SIG /subis/_element_1/foo2/CLK . path = /subis/_element_1/foo2/CLK
SIG /subis/_element_1/foo2/CLK . type = Clock
SIG /subis/_element_1/foo2/CLK . class = VSignal
SIG /subis/_element_1/foo2/CLK . wave_format = 
SIG /subis/_element_1/foo2/CLK . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/CLK . used_by 
SIG CLK . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/D_IN . kind = Signal
SIG /subis/_element_1/foo2/D_IN . name = D_IN
SIG /subis/_element_1/foo2/D_IN . path = /subis/_element_1/foo2/D_IN
SIG /subis/_element_1/foo2/D_IN . type = Int#(32)
SIG /subis/_element_1/foo2/D_IN . class = VSignal
SIG /subis/_element_1/foo2/D_IN . wave_format = {Int#(32) {/subis_1/foo2$D_IN}}
SIG /subis/_element_1/foo2/D_IN . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/D_IN . used_by /subis/_element_1.foo()
SIG D_IN . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/EN . kind = Signal
SIG /subis/_element_1/foo2/EN . name = EN
SIG /subis/_element_1/foo2/EN . path = /subis/_element_1/foo2/EN
SIG /subis/_element_1/foo2/EN . type = Bool
SIG /subis/_element_1/foo2/EN . class = VSignal
SIG /subis/_element_1/foo2/EN . wave_format = {Bool {/subis_1/foo2$EN}}
SIG /subis/_element_1/foo2/EN . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/EN . used_by /subis/_element_1.foo()
SIG EN . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/Q_OUT . kind = Signal
SIG /subis/_element_1/foo2/Q_OUT . name = Q_OUT
SIG /subis/_element_1/foo2/Q_OUT . path = /subis/_element_1/foo2/Q_OUT
SIG /subis/_element_1/foo2/Q_OUT . type = Int#(32)
SIG /subis/_element_1/foo2/Q_OUT . class = VSignal
SIG /subis/_element_1/foo2/Q_OUT . wave_format = {Int#(32) /subis_1/foo2}
SIG /subis/_element_1/foo2/Q_OUT . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/Q_OUT . used_by /subis/_element_1.bar()
SIG Q_OUT . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/RST . kind = Signal
SIG /subis/_element_1/foo2/RST . name = RST
SIG /subis/_element_1/foo2/RST . path = /subis/_element_1/foo2/RST
SIG /subis/_element_1/foo2/RST . type = Reset
SIG /subis/_element_1/foo2/RST . class = VSignal
SIG /subis/_element_1/foo2/RST . wave_format = 
SIG /subis/_element_1/foo2/RST . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/RST . used_by 
SIG RST . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo_x . kind = Signal
SIG /subis/_element_1/foo_x . name = foo_x
SIG /subis/_element_1/foo_x . path = /subis/_element_1/foo_x
SIG /subis/_element_1/foo_x . type = Int#(32)
SIG /subis/_element_1/foo_x . class = VSignal
SIG /subis/_element_1/foo_x . wave_format = {Int#(32) /subis_1/foo_x}
SIG /subis/_element_1/foo_x . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/foo_x . used_by 
SIG foo_x . inst = /subis/_element_1
SIG /xx/_element_0/I_IN . kind = Signal
SIG /xx/_element_0/I_IN . name = I_IN
SIG /xx/_element_0/I_IN . path = /xx/_element_0/I_IN
SIG /xx/_element_0/I_IN . type = Inout#(Test::Bar)
SIG /xx/_element_0/I_IN . class = VSignal
SIG /xx/_element_0/I_IN . wave_format = {Inout#(Test::Bar) /xx_0/I_IN}
SIG /xx/_element_0/I_IN . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/I_IN . used_by 
SIG I_IN . inst = /xx/_element_0
SIG /xx/_element_0/I_OUT . kind = Signal
SIG /xx/_element_0/I_OUT . name = I_OUT
SIG /xx/_element_0/I_OUT . path = /xx/_element_0/I_OUT
SIG /xx/_element_0/I_OUT . type = Inout#(Bool)
SIG /xx/_element_0/I_OUT . class = VSignal
SIG /xx/_element_0/I_OUT . wave_format = {Inout#(Bool) /xx_0/I_OUT}
SIG /xx/_element_0/I_OUT . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/I_OUT . used_by 
SIG I_OUT . inst = /xx/_element_0
SIG /xx/_element_0/V . kind = Signal
SIG /xx/_element_0/V . name = V
SIG /xx/_element_0/V . path = /xx/_element_0/V
SIG /xx/_element_0/V . type = Int#(32)
SIG /xx/_element_0/V . class = VSignal
SIG /xx/_element_0/V . wave_format = {Int#(32) /xx_0/V}
SIG /xx/_element_0/V . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/V . used_by 
SIG V . inst = /xx/_element_0
SIG /xx/_element_0/WGET . kind = Signal
SIG /xx/_element_0/WGET . name = WGET
SIG /xx/_element_0/WGET . path = /xx/_element_0/WGET
SIG /xx/_element_0/WGET . type = Test::Bar
SIG /xx/_element_0/WGET . class = VSignal
SIG /xx/_element_0/WGET . wave_format = {Test::Bar /xx_0/WGET}
SIG /xx/_element_0/WGET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WGET . used_by 
SIG WGET . inst = /xx/_element_0
SIG /xx/_element_0/WHAS . kind = Signal
SIG /xx/_element_0/WHAS . name = WHAS
SIG /xx/_element_0/WHAS . path = /xx/_element_0/WHAS
SIG /xx/_element_0/WHAS . type = Bool
SIG /xx/_element_0/WHAS . class = VSignal
SIG /xx/_element_0/WHAS . wave_format = {Bool /xx_0/WHAS}
SIG /xx/_element_0/WHAS . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WHAS . used_by 
SIG WHAS . inst = /xx/_element_0
SIG /xx/_element_0/WSET . kind = Signal
SIG /xx/_element_0/WSET . name = WSET
SIG /xx/_element_0/WSET . path = /xx/_element_0/WSET
SIG /xx/_element_0/WSET . type = Bool
SIG /xx/_element_0/WSET . class = VSignal
SIG /xx/_element_0/WSET . wave_format = {Bool /xx_0/WSET}
SIG /xx/_element_0/WSET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WSET . used_by 
SIG WSET . inst = /xx/_element_0
SIG /xx/_element_0/WVAL . kind = Signal
SIG /xx/_element_0/WVAL . name = WVAL
SIG /xx/_element_0/WVAL . path = /xx/_element_0/WVAL
SIG /xx/_element_0/WVAL . type = Test::Bar
SIG /xx/_element_0/WVAL . class = VSignal
SIG /xx/_element_0/WVAL . wave_format = {Test::Bar /xx_0/WVAL}
SIG /xx/_element_0/WVAL . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WVAL . used_by 
SIG WVAL . inst = /xx/_element_0
SIG /xx/_element_1/I_IN . kind = Signal
SIG /xx/_element_1/I_IN . name = I_IN
SIG /xx/_element_1/I_IN . path = /xx/_element_1/I_IN
SIG /xx/_element_1/I_IN . type = Inout#(Test::Bar)
SIG /xx/_element_1/I_IN . class = VSignal
SIG /xx/_element_1/I_IN . wave_format = {Inout#(Test::Bar) /xx_1/I_IN}
SIG /xx/_element_1/I_IN . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/I_IN . used_by 
SIG I_IN . inst = /xx/_element_1
SIG /xx/_element_1/I_OUT . kind = Signal
SIG /xx/_element_1/I_OUT . name = I_OUT
SIG /xx/_element_1/I_OUT . path = /xx/_element_1/I_OUT
SIG /xx/_element_1/I_OUT . type = Inout#(Bool)
SIG /xx/_element_1/I_OUT . class = VSignal
SIG /xx/_element_1/I_OUT . wave_format = {Inout#(Bool) /xx_1/I_OUT}
SIG /xx/_element_1/I_OUT . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/I_OUT . used_by 
SIG I_OUT . inst = /xx/_element_1
SIG /xx/_element_1/V . kind = Signal
SIG /xx/_element_1/V . name = V
SIG /xx/_element_1/V . path = /xx/_element_1/V
SIG /xx/_element_1/V . type = Int#(32)
SIG /xx/_element_1/V . class = VSignal
SIG /xx/_element_1/V . wave_format = {Int#(32) /xx_1/V}
SIG /xx/_element_1/V . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/V . used_by 
SIG V . inst = /xx/_element_1
SIG /xx/_element_1/WGET . kind = Signal
SIG /xx/_element_1/WGET . name = WGET
SIG /xx/_element_1/WGET . path = /xx/_element_1/WGET
SIG /xx/_element_1/WGET . type = Test::Bar
SIG /xx/_element_1/WGET . class = VSignal
SIG /xx/_element_1/WGET . wave_format = {Test::Bar /xx_1/WGET}
SIG /xx/_element_1/WGET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WGET . used_by 
SIG WGET . inst = /xx/_element_1
SIG /xx/_element_1/WHAS . kind = Signal
SIG /xx/_element_1/WHAS . name = WHAS
SIG /xx/_element_1/WHAS . path = /xx/_element_1/WHAS
SIG /xx/_element_1/WHAS . type = Bool
SIG /xx/_element_1/WHAS . class = VSignal
SIG /xx/_element_1/WHAS . wave_format = {Bool /xx_1/WHAS}
SIG /xx/_element_1/WHAS . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WHAS . used_by 
SIG WHAS . inst = /xx/_element_1
SIG /xx/_element_1/WSET . kind = Signal
SIG /xx/_element_1/WSET . name = WSET
SIG /xx/_element_1/WSET . path = /xx/_element_1/WSET
SIG /xx/_element_1/WSET . type = Bool
SIG /xx/_element_1/WSET . class = VSignal
SIG /xx/_element_1/WSET . wave_format = {Bool /xx_1/WSET}
SIG /xx/_element_1/WSET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WSET . used_by 
SIG WSET . inst = /xx/_element_1
SIG /xx/_element_1/WVAL . kind = Signal
SIG /xx/_element_1/WVAL . name = WVAL
SIG /xx/_element_1/WVAL . path = /xx/_element_1/WVAL
SIG /xx/_element_1/WVAL . type = Test::Bar
SIG /xx/_element_1/WVAL . class = VSignal
SIG /xx/_element_1/WVAL . wave_format = {Test::Bar /xx_1/WVAL}
SIG /xx/_element_1/WVAL . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WVAL . used_by 
SIG WVAL . inst = /xx/_element_1
SIG /y/_element_0/CLK . kind = Signal
SIG /y/_element_0/CLK . name = CLK
SIG /y/_element_0/CLK . path = /y/_element_0/CLK
SIG /y/_element_0/CLK . type = Clock
SIG /y/_element_0/CLK . class = VSignal
SIG /y/_element_0/CLK . wave_format = 
SIG /y/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/CLK . used_by 
SIG CLK . inst = /y/_element_0
SIG /y/_element_0/D_IN . kind = Signal
SIG /y/_element_0/D_IN . name = D_IN
SIG /y/_element_0/D_IN . path = /y/_element_0/D_IN
SIG /y/_element_0/D_IN . type = Int#(32)
SIG /y/_element_0/D_IN . class = VSignal
SIG /y/_element_0/D_IN . wave_format = {Int#(32) {/y_0$D_IN}}
SIG /y/_element_0/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/D_IN . used_by 
SIG D_IN . inst = /y/_element_0
SIG /y/_element_0/EN . kind = Signal
SIG /y/_element_0/EN . name = EN
SIG /y/_element_0/EN . path = /y/_element_0/EN
SIG /y/_element_0/EN . type = Bool
SIG /y/_element_0/EN . class = VSignal
SIG /y/_element_0/EN . wave_format = {Bool {/y_0$EN}}
SIG /y/_element_0/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/EN . used_by 
SIG EN . inst = /y/_element_0
SIG /y/_element_0/Q_OUT . kind = Signal
SIG /y/_element_0/Q_OUT . name = Q_OUT
SIG /y/_element_0/Q_OUT . path = /y/_element_0/Q_OUT
SIG /y/_element_0/Q_OUT . type = Int#(32)
SIG /y/_element_0/Q_OUT . class = VSignal
SIG /y/_element_0/Q_OUT . wave_format = {Int#(32) /y_0}
SIG /y/_element_0/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_0
SIG /y/_element_1/CLK . kind = Signal
SIG /y/_element_1/CLK . name = CLK
SIG /y/_element_1/CLK . path = /y/_element_1/CLK
SIG /y/_element_1/CLK . type = Clock
SIG /y/_element_1/CLK . class = VSignal
SIG /y/_element_1/CLK . wave_format = 
SIG /y/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/CLK . used_by 
SIG CLK . inst = /y/_element_1
SIG /y/_element_1/D_IN . kind = Signal
SIG /y/_element_1/D_IN . name = D_IN
SIG /y/_element_1/D_IN . path = /y/_element_1/D_IN
SIG /y/_element_1/D_IN . type = Int#(32)
SIG /y/_element_1/D_IN . class = VSignal
SIG /y/_element_1/D_IN . wave_format = {Int#(32) {/y_1$D_IN}}
SIG /y/_element_1/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/D_IN . used_by 
SIG D_IN . inst = /y/_element_1
SIG /y/_element_1/EN . kind = Signal
SIG /y/_element_1/EN . name = EN
SIG /y/_element_1/EN . path = /y/_element_1/EN
SIG /y/_element_1/EN . type = Bool
SIG /y/_element_1/EN . class = VSignal
SIG /y/_element_1/EN . wave_format = {Bool {/y_1$EN}}
SIG /y/_element_1/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/EN . used_by 
SIG EN . inst = /y/_element_1
SIG /y/_element_1/Q_OUT . kind = Signal
SIG /y/_element_1/Q_OUT . name = Q_OUT
SIG /y/_element_1/Q_OUT . path = /y/_element_1/Q_OUT
SIG /y/_element_1/Q_OUT . type = Int#(32)
SIG /y/_element_1/Q_OUT . class = VSignal
SIG /y/_element_1/Q_OUT . wave_format = {Int#(32) /y_1}
SIG /y/_element_1/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_1
SIG /y/_element_2/CLK . kind = Signal
SIG /y/_element_2/CLK . name = CLK
SIG /y/_element_2/CLK . path = /y/_element_2/CLK
SIG /y/_element_2/CLK . type = Clock
SIG /y/_element_2/CLK . class = VSignal
SIG /y/_element_2/CLK . wave_format = 
SIG /y/_element_2/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/CLK . used_by 
SIG CLK . inst = /y/_element_2
SIG /y/_element_2/D_IN . kind = Signal
SIG /y/_element_2/D_IN . name = D_IN
SIG /y/_element_2/D_IN . path = /y/_element_2/D_IN
SIG /y/_element_2/D_IN . type = Int#(32)
SIG /y/_element_2/D_IN . class = VSignal
SIG /y/_element_2/D_IN . wave_format = {Int#(32) {/y_2$D_IN}}
SIG /y/_element_2/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/D_IN . used_by 
SIG D_IN . inst = /y/_element_2
SIG /y/_element_2/EN . kind = Signal
SIG /y/_element_2/EN . name = EN
SIG /y/_element_2/EN . path = /y/_element_2/EN
SIG /y/_element_2/EN . type = Bool
SIG /y/_element_2/EN . class = VSignal
SIG /y/_element_2/EN . wave_format = {Bool {/y_2$EN}}
SIG /y/_element_2/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/EN . used_by 
SIG EN . inst = /y/_element_2
SIG /y/_element_2/Q_OUT . kind = Signal
SIG /y/_element_2/Q_OUT . name = Q_OUT
SIG /y/_element_2/Q_OUT . path = /y/_element_2/Q_OUT
SIG /y/_element_2/Q_OUT . type = Int#(32)
SIG /y/_element_2/Q_OUT . class = VSignal
SIG /y/_element_2/Q_OUT . wave_format = {Int#(32) /y_2}
SIG /y/_element_2/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_2
SIG /y/_element_3/CLK . kind = Signal
SIG /y/_element_3/CLK . name = CLK
SIG /y/_element_3/CLK . path = /y/_element_3/CLK
SIG /y/_element_3/CLK . type = Clock
SIG /y/_element_3/CLK . class = VSignal
SIG /y/_element_3/CLK . wave_format = 
SIG /y/_element_3/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/CLK . used_by 
SIG CLK . inst = /y/_element_3
SIG /y/_element_3/D_IN . kind = Signal
SIG /y/_element_3/D_IN . name = D_IN
SIG /y/_element_3/D_IN . path = /y/_element_3/D_IN
SIG /y/_element_3/D_IN . type = Int#(32)
SIG /y/_element_3/D_IN . class = VSignal
SIG /y/_element_3/D_IN . wave_format = {Int#(32) {/y_3$D_IN}}
SIG /y/_element_3/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/D_IN . used_by 
SIG D_IN . inst = /y/_element_3
SIG /y/_element_3/EN . kind = Signal
SIG /y/_element_3/EN . name = EN
SIG /y/_element_3/EN . path = /y/_element_3/EN
SIG /y/_element_3/EN . type = Bool
SIG /y/_element_3/EN . class = VSignal
SIG /y/_element_3/EN . wave_format = {Bool {/y_3$EN}}
SIG /y/_element_3/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/EN . used_by 
SIG EN . inst = /y/_element_3
SIG /y/_element_3/Q_OUT . kind = Signal
SIG /y/_element_3/Q_OUT . name = Q_OUT
SIG /y/_element_3/Q_OUT . path = /y/_element_3/Q_OUT
SIG /y/_element_3/Q_OUT . type = Int#(32)
SIG /y/_element_3/Q_OUT . class = VSignal
SIG /y/_element_3/Q_OUT . wave_format = {Int#(32) /y_3}
SIG /y/_element_3/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_3
SIG /zw/_element_0/CLK . kind = Signal
SIG /zw/_element_0/CLK . name = CLK
SIG /zw/_element_0/CLK . path = /zw/_element_0/CLK
SIG /zw/_element_0/CLK . type = Clock
SIG /zw/_element_0/CLK . class = VSignal
SIG /zw/_element_0/CLK . wave_format = 
SIG /zw/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/CLK . used_by 
SIG CLK . inst = /zw/_element_0
SIG /zw/_element_0/D_IN . kind = Signal
SIG /zw/_element_0/D_IN . name = D_IN
SIG /zw/_element_0/D_IN . path = /zw/_element_0/D_IN
SIG /zw/_element_0/D_IN . type = Int#(32)
SIG /zw/_element_0/D_IN . class = VSignal
SIG /zw/_element_0/D_IN . wave_format = {Int#(32) {/zw_0$D_IN}}
SIG /zw/_element_0/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/D_IN . used_by 
SIG D_IN . inst = /zw/_element_0
SIG /zw/_element_0/EN . kind = Signal
SIG /zw/_element_0/EN . name = EN
SIG /zw/_element_0/EN . path = /zw/_element_0/EN
SIG /zw/_element_0/EN . type = Bool
SIG /zw/_element_0/EN . class = VSignal
SIG /zw/_element_0/EN . wave_format = {Bool {/zw_0$EN}}
SIG /zw/_element_0/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/EN . used_by 
SIG EN . inst = /zw/_element_0
SIG /zw/_element_0/Q_OUT . kind = Signal
SIG /zw/_element_0/Q_OUT . name = Q_OUT
SIG /zw/_element_0/Q_OUT . path = /zw/_element_0/Q_OUT
SIG /zw/_element_0/Q_OUT . type = Int#(32)
SIG /zw/_element_0/Q_OUT . class = VSignal
SIG /zw/_element_0/Q_OUT . wave_format = {Int#(32) /zw_0}
SIG /zw/_element_0/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_0
SIG /zw/_element_0/RST . kind = Signal
SIG /zw/_element_0/RST . name = RST
SIG /zw/_element_0/RST . path = /zw/_element_0/RST
SIG /zw/_element_0/RST . type = Reset
SIG /zw/_element_0/RST . class = VSignal
SIG /zw/_element_0/RST . wave_format = 
SIG /zw/_element_0/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/RST . used_by 
SIG RST . inst = /zw/_element_0
SIG /zw/_element_1/CLK . kind = Signal
SIG /zw/_element_1/CLK . name = CLK
SIG /zw/_element_1/CLK . path = /zw/_element_1/CLK
SIG /zw/_element_1/CLK . type = Clock
SIG /zw/_element_1/CLK . class = VSignal
SIG /zw/_element_1/CLK . wave_format = 
SIG /zw/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/CLK . used_by 
SIG CLK . inst = /zw/_element_1
SIG /zw/_element_1/D_IN . kind = Signal
SIG /zw/_element_1/D_IN . name = D_IN
SIG /zw/_element_1/D_IN . path = /zw/_element_1/D_IN
SIG /zw/_element_1/D_IN . type = Int#(32)
SIG /zw/_element_1/D_IN . class = VSignal
SIG /zw/_element_1/D_IN . wave_format = {Int#(32) {/zw_1$D_IN}}
SIG /zw/_element_1/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/D_IN . used_by 
SIG D_IN . inst = /zw/_element_1
SIG /zw/_element_1/EN . kind = Signal
SIG /zw/_element_1/EN . name = EN
SIG /zw/_element_1/EN . path = /zw/_element_1/EN
SIG /zw/_element_1/EN . type = Bool
SIG /zw/_element_1/EN . class = VSignal
SIG /zw/_element_1/EN . wave_format = {Bool {/zw_1$EN}}
SIG /zw/_element_1/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/EN . used_by 
SIG EN . inst = /zw/_element_1
SIG /zw/_element_1/Q_OUT . kind = Signal
SIG /zw/_element_1/Q_OUT . name = Q_OUT
SIG /zw/_element_1/Q_OUT . path = /zw/_element_1/Q_OUT
SIG /zw/_element_1/Q_OUT . type = Int#(32)
SIG /zw/_element_1/Q_OUT . class = VSignal
SIG /zw/_element_1/Q_OUT . wave_format = {Int#(32) /zw_1}
SIG /zw/_element_1/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_1
SIG /zw/_element_1/RST . kind = Signal
SIG /zw/_element_1/RST . name = RST
SIG /zw/_element_1/RST . path = /zw/_element_1/RST
SIG /zw/_element_1/RST . type = Reset
SIG /zw/_element_1/RST . class = VSignal
SIG /zw/_element_1/RST . wave_format = 
SIG /zw/_element_1/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/RST . used_by 
SIG RST . inst = /zw/_element_1
SIG /zw/_element_2/CLK . kind = Signal
SIG /zw/_element_2/CLK . name = CLK
SIG /zw/_element_2/CLK . path = /zw/_element_2/CLK
SIG /zw/_element_2/CLK . type = Clock
SIG /zw/_element_2/CLK . class = VSignal
SIG /zw/_element_2/CLK . wave_format = 
SIG /zw/_element_2/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/CLK . used_by 
SIG CLK . inst = /zw/_element_2
SIG /zw/_element_2/D_IN . kind = Signal
SIG /zw/_element_2/D_IN . name = D_IN
SIG /zw/_element_2/D_IN . path = /zw/_element_2/D_IN
SIG /zw/_element_2/D_IN . type = Int#(32)
SIG /zw/_element_2/D_IN . class = VSignal
SIG /zw/_element_2/D_IN . wave_format = {Int#(32) {/zw_2$D_IN}}
SIG /zw/_element_2/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/D_IN . used_by 
SIG D_IN . inst = /zw/_element_2
SIG /zw/_element_2/EN . kind = Signal
SIG /zw/_element_2/EN . name = EN
SIG /zw/_element_2/EN . path = /zw/_element_2/EN
SIG /zw/_element_2/EN . type = Bool
SIG /zw/_element_2/EN . class = VSignal
SIG /zw/_element_2/EN . wave_format = {Bool {/zw_2$EN}}
SIG /zw/_element_2/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/EN . used_by 
SIG EN . inst = /zw/_element_2
SIG /zw/_element_2/Q_OUT . kind = Signal
SIG /zw/_element_2/Q_OUT . name = Q_OUT
SIG /zw/_element_2/Q_OUT . path = /zw/_element_2/Q_OUT
SIG /zw/_element_2/Q_OUT . type = Int#(32)
SIG /zw/_element_2/Q_OUT . class = VSignal
SIG /zw/_element_2/Q_OUT . wave_format = {Int#(32) /zw_2}
SIG /zw/_element_2/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_2
SIG /zw/_element_2/RST . kind = Signal
SIG /zw/_element_2/RST . name = RST
SIG /zw/_element_2/RST . path = /zw/_element_2/RST
SIG /zw/_element_2/RST . type = Reset
SIG /zw/_element_2/RST . class = VSignal
SIG /zw/_element_2/RST . wave_format = 
SIG /zw/_element_2/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/RST . used_by 
SIG RST . inst = /zw/_element_2
SIG /zw/_element_3/CLK . kind = Signal
SIG /zw/_element_3/CLK . name = CLK
SIG /zw/_element_3/CLK . path = /zw/_element_3/CLK
SIG /zw/_element_3/CLK . type = Clock
SIG /zw/_element_3/CLK . class = VSignal
SIG /zw/_element_3/CLK . wave_format = 
SIG /zw/_element_3/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/CLK . used_by 
SIG CLK . inst = /zw/_element_3
SIG /zw/_element_3/D_IN . kind = Signal
SIG /zw/_element_3/D_IN . name = D_IN
SIG /zw/_element_3/D_IN . path = /zw/_element_3/D_IN
SIG /zw/_element_3/D_IN . type = Int#(32)
SIG /zw/_element_3/D_IN . class = VSignal
SIG /zw/_element_3/D_IN . wave_format = {Int#(32) {/zw_3$D_IN}}
SIG /zw/_element_3/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/D_IN . used_by 
SIG D_IN . inst = /zw/_element_3
SIG /zw/_element_3/EN . kind = Signal
SIG /zw/_element_3/EN . name = EN
SIG /zw/_element_3/EN . path = /zw/_element_3/EN
SIG /zw/_element_3/EN . type = Bool
SIG /zw/_element_3/EN . class = VSignal
SIG /zw/_element_3/EN . wave_format = {Bool {/zw_3$EN}}
SIG /zw/_element_3/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/EN . used_by 
SIG EN . inst = /zw/_element_3
SIG /zw/_element_3/Q_OUT . kind = Signal
SIG /zw/_element_3/Q_OUT . name = Q_OUT
SIG /zw/_element_3/Q_OUT . path = /zw/_element_3/Q_OUT
SIG /zw/_element_3/Q_OUT . type = Int#(32)
SIG /zw/_element_3/Q_OUT . class = VSignal
SIG /zw/_element_3/Q_OUT . wave_format = {Int#(32) /zw_3}
SIG /zw/_element_3/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_3
SIG /zw/_element_3/RST . kind = Signal
SIG /zw/_element_3/RST . name = RST
SIG /zw/_element_3/RST . path = /zw/_element_3/RST
SIG /zw/_element_3/RST . type = Reset
SIG /zw/_element_3/RST . class = VSignal
SIG /zw/_element_3/RST . wave_format = 
SIG /zw/_element_3/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/RST . used_by 
SIG RST . inst = /zw/_element_3
SIG /zw/_element_4/CLK . kind = Signal
SIG /zw/_element_4/CLK . name = CLK
SIG /zw/_element_4/CLK . path = /zw/_element_4/CLK
SIG /zw/_element_4/CLK . type = Clock
SIG /zw/_element_4/CLK . class = VSignal
SIG /zw/_element_4/CLK . wave_format = 
SIG /zw/_element_4/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/CLK . used_by 
SIG CLK . inst = /zw/_element_4
SIG /zw/_element_4/D_IN . kind = Signal
SIG /zw/_element_4/D_IN . name = D_IN
SIG /zw/_element_4/D_IN . path = /zw/_element_4/D_IN
SIG /zw/_element_4/D_IN . type = Int#(32)
SIG /zw/_element_4/D_IN . class = VSignal
SIG /zw/_element_4/D_IN . wave_format = {Int#(32) {/zw_4$D_IN}}
SIG /zw/_element_4/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/D_IN . used_by 
SIG D_IN . inst = /zw/_element_4
SIG /zw/_element_4/EN . kind = Signal
SIG /zw/_element_4/EN . name = EN
SIG /zw/_element_4/EN . path = /zw/_element_4/EN
SIG /zw/_element_4/EN . type = Bool
SIG /zw/_element_4/EN . class = VSignal
SIG /zw/_element_4/EN . wave_format = {Bool {/zw_4$EN}}
SIG /zw/_element_4/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/EN . used_by 
SIG EN . inst = /zw/_element_4
SIG /zw/_element_4/Q_OUT . kind = Signal
SIG /zw/_element_4/Q_OUT . name = Q_OUT
SIG /zw/_element_4/Q_OUT . path = /zw/_element_4/Q_OUT
SIG /zw/_element_4/Q_OUT . type = Int#(32)
SIG /zw/_element_4/Q_OUT . class = VSignal
SIG /zw/_element_4/Q_OUT . wave_format = {Int#(32) /zw_4}
SIG /zw/_element_4/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_4
SIG /zw/_element_4/RST . kind = Signal
SIG /zw/_element_4/RST . name = RST
SIG /zw/_element_4/RST . path = /zw/_element_4/RST
SIG /zw/_element_4/RST . type = Reset
SIG /zw/_element_4/RST . class = VSignal
SIG /zw/_element_4/RST . wave_format = 
SIG /zw/_element_4/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/RST . used_by 
SIG RST . inst = /zw/_element_4
starting method testing
METH  /Loop/Body_0/aa_0.read name = read
METH  /Loop/Body_0/aa_0.read path = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.read path synth = /aa_0
METH  /Loop/Body_0/aa_0.read path bsv = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.read wave_format = {Int#(32) /aa_0}
METH  /Loop/Body_0/aa_0.read class = VMethod
METH  /Loop/Body_0/aa_0.read signals = /Loop/Body_0/aa_0/Q_OUT
METH  /Loop/Body_0/aa_0.read used_by = 
----
METH  /Loop/Body_0/aa_0.write name = write
METH  /Loop/Body_0/aa_0.write path = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.write path synth = /aa_0
METH  /Loop/Body_0/aa_0.write path bsv = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.write wave_format = {Int#(32) {/aa_0$D_IN}} {Bool {/aa_0$EN}}
METH  /Loop/Body_0/aa_0.write class = VMethod
METH  /Loop/Body_0/aa_0.write signals = /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN
METH  /Loop/Body_0/aa_0.write used_by = 
----
METH  /Loop/Body_0/bb_0.read name = read
METH  /Loop/Body_0/bb_0.read path = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.read path synth = /bb_0
METH  /Loop/Body_0/bb_0.read path bsv = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.read wave_format = {Int#(32) /bb_0}
METH  /Loop/Body_0/bb_0.read class = VMethod
METH  /Loop/Body_0/bb_0.read signals = /Loop/Body_0/bb_0/Q_OUT
METH  /Loop/Body_0/bb_0.read used_by = 
----
METH  /Loop/Body_0/bb_0.write name = write
METH  /Loop/Body_0/bb_0.write path = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.write path synth = /bb_0
METH  /Loop/Body_0/bb_0.write path bsv = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.write wave_format = {Int#(32) {/bb_0$D_IN}} {Bool {/bb_0$EN}}
METH  /Loop/Body_0/bb_0.write class = VMethod
METH  /Loop/Body_0/bb_0.write signals = /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN
METH  /Loop/Body_0/bb_0.write used_by = 
----
METH  /Loop/Body_1/aa_1.read name = read
METH  /Loop/Body_1/aa_1.read path = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.read path synth = /aa_1
METH  /Loop/Body_1/aa_1.read path bsv = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.read wave_format = {Int#(32) /aa_1}
METH  /Loop/Body_1/aa_1.read class = VMethod
METH  /Loop/Body_1/aa_1.read signals = /Loop/Body_1/aa_1/Q_OUT
METH  /Loop/Body_1/aa_1.read used_by = 
----
METH  /Loop/Body_1/aa_1.write name = write
METH  /Loop/Body_1/aa_1.write path = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.write path synth = /aa_1
METH  /Loop/Body_1/aa_1.write path bsv = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.write wave_format = {Int#(32) {/aa_1$D_IN}} {Bool {/aa_1$EN}}
METH  /Loop/Body_1/aa_1.write class = VMethod
METH  /Loop/Body_1/aa_1.write signals = /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN
METH  /Loop/Body_1/aa_1.write used_by = 
----
METH  /Loop/Body_1/bb_1.read name = read
METH  /Loop/Body_1/bb_1.read path = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.read path synth = /bb_1
METH  /Loop/Body_1/bb_1.read path bsv = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.read wave_format = {Int#(32) /bb_1}
METH  /Loop/Body_1/bb_1.read class = VMethod
METH  /Loop/Body_1/bb_1.read signals = /Loop/Body_1/bb_1/Q_OUT
METH  /Loop/Body_1/bb_1.read used_by = 
----
METH  /Loop/Body_1/bb_1.write name = write
METH  /Loop/Body_1/bb_1.write path = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.write path synth = /bb_1
METH  /Loop/Body_1/bb_1.write path bsv = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.write wave_format = {Int#(32) {/bb_1$D_IN}} {Bool {/bb_1$EN}}
METH  /Loop/Body_1/bb_1.write class = VMethod
METH  /Loop/Body_1/bb_1.write signals = /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN
METH  /Loop/Body_1/bb_1.write used_by = 
----
METH  /Loop/Body_2/aa_2.read name = read
METH  /Loop/Body_2/aa_2.read path = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.read path synth = /aa_2
METH  /Loop/Body_2/aa_2.read path bsv = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.read wave_format = {Int#(32) /aa_2}
METH  /Loop/Body_2/aa_2.read class = VMethod
METH  /Loop/Body_2/aa_2.read signals = /Loop/Body_2/aa_2/Q_OUT
METH  /Loop/Body_2/aa_2.read used_by = 
----
METH  /Loop/Body_2/aa_2.write name = write
METH  /Loop/Body_2/aa_2.write path = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.write path synth = /aa_2
METH  /Loop/Body_2/aa_2.write path bsv = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.write wave_format = {Int#(32) {/aa_2$D_IN}} {Bool {/aa_2$EN}}
METH  /Loop/Body_2/aa_2.write class = VMethod
METH  /Loop/Body_2/aa_2.write signals = /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN
METH  /Loop/Body_2/aa_2.write used_by = 
----
METH  /Loop/Body_2/bb_2.read name = read
METH  /Loop/Body_2/bb_2.read path = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.read path synth = /bb_2
METH  /Loop/Body_2/bb_2.read path bsv = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.read wave_format = {Int#(32) /bb_2}
METH  /Loop/Body_2/bb_2.read class = VMethod
METH  /Loop/Body_2/bb_2.read signals = /Loop/Body_2/bb_2/Q_OUT
METH  /Loop/Body_2/bb_2.read used_by = 
----
METH  /Loop/Body_2/bb_2.write name = write
METH  /Loop/Body_2/bb_2.write path = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.write path synth = /bb_2
METH  /Loop/Body_2/bb_2.write path bsv = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.write wave_format = {Int#(32) {/bb_2$D_IN}} {Bool {/bb_2$EN}}
METH  /Loop/Body_2/bb_2.write class = VMethod
METH  /Loop/Body_2/bb_2.write signals = /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN
METH  /Loop/Body_2/bb_2.write used_by = 
----
METH  /Loop/Body_3/aa_3.read name = read
METH  /Loop/Body_3/aa_3.read path = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.read path synth = /aa_3
METH  /Loop/Body_3/aa_3.read path bsv = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.read wave_format = {Int#(32) /aa_3}
METH  /Loop/Body_3/aa_3.read class = VMethod
METH  /Loop/Body_3/aa_3.read signals = /Loop/Body_3/aa_3/Q_OUT
METH  /Loop/Body_3/aa_3.read used_by = 
----
METH  /Loop/Body_3/aa_3.write name = write
METH  /Loop/Body_3/aa_3.write path = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.write path synth = /aa_3
METH  /Loop/Body_3/aa_3.write path bsv = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.write wave_format = {Int#(32) {/aa_3$D_IN}} {Bool {/aa_3$EN}}
METH  /Loop/Body_3/aa_3.write class = VMethod
METH  /Loop/Body_3/aa_3.write signals = /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN
METH  /Loop/Body_3/aa_3.write used_by = 
----
METH  /Loop/Body_3/bb_3.read name = read
METH  /Loop/Body_3/bb_3.read path = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.read path synth = /bb_3
METH  /Loop/Body_3/bb_3.read path bsv = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.read wave_format = {Int#(32) /bb_3}
METH  /Loop/Body_3/bb_3.read class = VMethod
METH  /Loop/Body_3/bb_3.read signals = /Loop/Body_3/bb_3/Q_OUT
METH  /Loop/Body_3/bb_3.read used_by = 
----
METH  /Loop/Body_3/bb_3.write name = write
METH  /Loop/Body_3/bb_3.write path = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.write path synth = /bb_3
METH  /Loop/Body_3/bb_3.write path bsv = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.write wave_format = {Int#(32) {/bb_3$D_IN}} {Bool {/bb_3$EN}}
METH  /Loop/Body_3/bb_3.write class = VMethod
METH  /Loop/Body_3/bb_3.write signals = /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN
METH  /Loop/Body_3/bb_3.write used_by = 
----
METH  /Loop/x_0.read name = read
METH  /Loop/x_0.read path = /Loop/x_0
METH  /Loop/x_0.read path synth = /x_0
METH  /Loop/x_0.read path bsv = /Loop/x_0
METH  /Loop/x_0.read wave_format = {Int#(32) /x_0}
METH  /Loop/x_0.read class = VMethod
METH  /Loop/x_0.read signals = /Loop/x_0/Q_OUT
METH  /Loop/x_0.read used_by = 
----
METH  /Loop/x_0.write name = write
METH  /Loop/x_0.write path = /Loop/x_0
METH  /Loop/x_0.write path synth = /x_0
METH  /Loop/x_0.write path bsv = /Loop/x_0
METH  /Loop/x_0.write wave_format = {Int#(32) {/x_0$D_IN}} {Bool {/x_0$EN}}
METH  /Loop/x_0.write class = VMethod
METH  /Loop/x_0.write signals = /Loop/x_0/D_IN /Loop/x_0/EN
METH  /Loop/x_0.write used_by = 
----
METH  /Loop/x_1.read name = read
METH  /Loop/x_1.read path = /Loop/x_1
METH  /Loop/x_1.read path synth = /x_1
METH  /Loop/x_1.read path bsv = /Loop/x_1
METH  /Loop/x_1.read wave_format = {Int#(32) /x_1}
METH  /Loop/x_1.read class = VMethod
METH  /Loop/x_1.read signals = /Loop/x_1/Q_OUT
METH  /Loop/x_1.read used_by = 
----
METH  /Loop/x_1.write name = write
METH  /Loop/x_1.write path = /Loop/x_1
METH  /Loop/x_1.write path synth = /x_1
METH  /Loop/x_1.write path bsv = /Loop/x_1
METH  /Loop/x_1.write wave_format = {Int#(32) {/x_1$D_IN}} {Bool {/x_1$EN}}
METH  /Loop/x_1.write class = VMethod
METH  /Loop/x_1.write signals = /Loop/x_1/D_IN /Loop/x_1/EN
METH  /Loop/x_1.write used_by = 
----
METH  /Loop/x_2.read name = read
METH  /Loop/x_2.read path = /Loop/x_2
METH  /Loop/x_2.read path synth = /x_2
METH  /Loop/x_2.read path bsv = /Loop/x_2
METH  /Loop/x_2.read wave_format = {Int#(32) /x_2}
METH  /Loop/x_2.read class = VMethod
METH  /Loop/x_2.read signals = /Loop/x_2/Q_OUT
METH  /Loop/x_2.read used_by = 
----
METH  /Loop/x_2.write name = write
METH  /Loop/x_2.write path = /Loop/x_2
METH  /Loop/x_2.write path synth = /x_2
METH  /Loop/x_2.write path bsv = /Loop/x_2
METH  /Loop/x_2.write wave_format = {Int#(32) {/x_2$D_IN}} {Bool {/x_2$EN}}
METH  /Loop/x_2.write class = VMethod
METH  /Loop/x_2.write signals = /Loop/x_2/D_IN /Loop/x_2/EN
METH  /Loop/x_2.write used_by = 
----
METH  /Loop/x_3.read name = read
METH  /Loop/x_3.read path = /Loop/x_3
METH  /Loop/x_3.read path synth = /x_3
METH  /Loop/x_3.read path bsv = /Loop/x_3
METH  /Loop/x_3.read wave_format = {Int#(32) /x_3}
METH  /Loop/x_3.read class = VMethod
METH  /Loop/x_3.read signals = /Loop/x_3/Q_OUT
METH  /Loop/x_3.read used_by = 
----
METH  /Loop/x_3.write name = write
METH  /Loop/x_3.write path = /Loop/x_3
METH  /Loop/x_3.write path synth = /x_3
METH  /Loop/x_3.write path bsv = /Loop/x_3
METH  /Loop/x_3.write wave_format = {Int#(32) {/x_3$D_IN}} {Bool {/x_3$EN}}
METH  /Loop/x_3.write class = VMethod
METH  /Loop/x_3.write signals = /Loop/x_3/D_IN /Loop/x_3/EN
METH  /Loop/x_3.write used_by = 
----
METH  /subis/_element_0.RDY_bar name = RDY_bar
METH  /subis/_element_0.RDY_bar path = /subis/_element_0
METH  /subis/_element_0.RDY_bar path synth = /subis_0
METH  /subis/_element_0.RDY_bar path bsv = /subis/_element_0
METH  /subis/_element_0.RDY_bar wave_format = {Bool /subis_0/RadyOnTheReadMethod}
METH  /subis/_element_0.RDY_bar class = VMethod
METH  /subis/_element_0.RDY_bar signals = /subis/_element_0/RadyOnTheReadMethod
METH  /subis/_element_0.RDY_bar used_by = 
----
METH  /subis/_element_0.bar name = bar
METH  /subis/_element_0.bar path = /subis/_element_0
METH  /subis/_element_0.bar path synth = /subis_0
METH  /subis/_element_0.bar path bsv = /subis/_element_0
METH  /subis/_element_0.bar wave_format = {Int#(32) /subis_0/bar}
METH  /subis/_element_0.bar class = VMethod
METH  /subis/_element_0.bar signals = /subis/_element_0/bar
METH  /subis/_element_0.bar used_by = 
----
METH  /subis/_element_0.foo name = foo
METH  /subis/_element_0.foo path = /subis/_element_0
METH  /subis/_element_0.foo path synth = /subis_0
METH  /subis/_element_0.foo path bsv = /subis/_element_0
METH  /subis/_element_0.foo wave_format = {Int#(32) /subis_0/foo_x} {Bool /subis_0/EN_foo}
METH  /subis/_element_0.foo class = VMethod
METH  /subis/_element_0.foo signals = /subis/_element_0/EN_foo /subis/_element_0/foo_x
METH  /subis/_element_0.foo used_by = 
----
METH  /subis/_element_0/barx.read name = read
METH  /subis/_element_0/barx.read path = /subis/_element_0/barx
METH  /subis/_element_0/barx.read path synth = /subis_0/barx
METH  /subis/_element_0/barx.read path bsv = /subis/_element_0/barx
METH  /subis/_element_0/barx.read wave_format = {Bit#(3) /subis_0/barx}
METH  /subis/_element_0/barx.read class = VMethod
METH  /subis/_element_0/barx.read signals = /subis/_element_0/barx/Q_OUT
METH  /subis/_element_0/barx.read used_by = /subis/_element_0.bar()
----
METH  /subis/_element_0/barx.write name = write
METH  /subis/_element_0/barx.write path = /subis/_element_0/barx
METH  /subis/_element_0/barx.write path synth = /subis_0/barx
METH  /subis/_element_0/barx.write path bsv = /subis/_element_0/barx
METH  /subis/_element_0/barx.write wave_format = {Bit#(3) {/subis_0/barx$D_IN}} {Bool {/subis_0/barx$EN}}
METH  /subis/_element_0/barx.write class = VMethod
METH  /subis/_element_0/barx.write signals = /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN
METH  /subis/_element_0/barx.write used_by = 
----
METH  /subis/_element_0/foo2.read name = read
METH  /subis/_element_0/foo2.read path = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.read path synth = /subis_0/foo2
METH  /subis/_element_0/foo2.read path bsv = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.read wave_format = {Int#(32) /subis_0/foo2}
METH  /subis/_element_0/foo2.read class = VMethod
METH  /subis/_element_0/foo2.read signals = /subis/_element_0/foo2/Q_OUT
METH  /subis/_element_0/foo2.read used_by = /subis/_element_0.bar()
----
METH  /subis/_element_0/foo2.write name = write
METH  /subis/_element_0/foo2.write path = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.write path synth = /subis_0/foo2
METH  /subis/_element_0/foo2.write path bsv = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.write wave_format = {Int#(32) {/subis_0/foo2$D_IN}} {Bool {/subis_0/foo2$EN}}
METH  /subis/_element_0/foo2.write class = VMethod
METH  /subis/_element_0/foo2.write signals = /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN
METH  /subis/_element_0/foo2.write used_by = /subis/_element_0.foo()
----
METH  /subis/_element_1.RDY_bar name = RDY_bar
METH  /subis/_element_1.RDY_bar path = /subis/_element_1
METH  /subis/_element_1.RDY_bar path synth = /subis_1
METH  /subis/_element_1.RDY_bar path bsv = /subis/_element_1
METH  /subis/_element_1.RDY_bar wave_format = {Bool /subis_1/RadyOnTheReadMethod}
METH  /subis/_element_1.RDY_bar class = VMethod
METH  /subis/_element_1.RDY_bar signals = /subis/_element_1/RadyOnTheReadMethod
METH  /subis/_element_1.RDY_bar used_by = 
----
METH  /subis/_element_1.bar name = bar
METH  /subis/_element_1.bar path = /subis/_element_1
METH  /subis/_element_1.bar path synth = /subis_1
METH  /subis/_element_1.bar path bsv = /subis/_element_1
METH  /subis/_element_1.bar wave_format = {Int#(32) /subis_1/bar}
METH  /subis/_element_1.bar class = VMethod
METH  /subis/_element_1.bar signals = /subis/_element_1/bar
METH  /subis/_element_1.bar used_by = 
----
METH  /subis/_element_1.foo name = foo
METH  /subis/_element_1.foo path = /subis/_element_1
METH  /subis/_element_1.foo path synth = /subis_1
METH  /subis/_element_1.foo path bsv = /subis/_element_1
METH  /subis/_element_1.foo wave_format = {Int#(32) /subis_1/foo_x} {Bool /subis_1/EN_foo}
METH  /subis/_element_1.foo class = VMethod
METH  /subis/_element_1.foo signals = /subis/_element_1/EN_foo /subis/_element_1/foo_x
METH  /subis/_element_1.foo used_by = 
----
METH  /subis/_element_1/barx.read name = read
METH  /subis/_element_1/barx.read path = /subis/_element_1/barx
METH  /subis/_element_1/barx.read path synth = /subis_1/barx
METH  /subis/_element_1/barx.read path bsv = /subis/_element_1/barx
METH  /subis/_element_1/barx.read wave_format = {Bit#(3) /subis_1/barx}
METH  /subis/_element_1/barx.read class = VMethod
METH  /subis/_element_1/barx.read signals = /subis/_element_1/barx/Q_OUT
METH  /subis/_element_1/barx.read used_by = /subis/_element_1.bar()
----
METH  /subis/_element_1/barx.write name = write
METH  /subis/_element_1/barx.write path = /subis/_element_1/barx
METH  /subis/_element_1/barx.write path synth = /subis_1/barx
METH  /subis/_element_1/barx.write path bsv = /subis/_element_1/barx
METH  /subis/_element_1/barx.write wave_format = {Bit#(3) {/subis_1/barx$D_IN}} {Bool {/subis_1/barx$EN}}
METH  /subis/_element_1/barx.write class = VMethod
METH  /subis/_element_1/barx.write signals = /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN
METH  /subis/_element_1/barx.write used_by = 
----
METH  /subis/_element_1/foo2.read name = read
METH  /subis/_element_1/foo2.read path = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.read path synth = /subis_1/foo2
METH  /subis/_element_1/foo2.read path bsv = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.read wave_format = {Int#(32) /subis_1/foo2}
METH  /subis/_element_1/foo2.read class = VMethod
METH  /subis/_element_1/foo2.read signals = /subis/_element_1/foo2/Q_OUT
METH  /subis/_element_1/foo2.read used_by = /subis/_element_1.bar()
----
METH  /subis/_element_1/foo2.write name = write
METH  /subis/_element_1/foo2.write path = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.write path synth = /subis_1/foo2
METH  /subis/_element_1/foo2.write path bsv = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.write wave_format = {Int#(32) {/subis_1/foo2$D_IN}} {Bool {/subis_1/foo2$EN}}
METH  /subis/_element_1/foo2.write class = VMethod
METH  /subis/_element_1/foo2.write signals = /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN
METH  /subis/_element_1/foo2.write used_by = /subis/_element_1.foo()
----
METH  /xx/_element_0.wget name = wget
METH  /xx/_element_0.wget path = /xx/_element_0
METH  /xx/_element_0.wget path synth = /xx_0
METH  /xx/_element_0.wget path bsv = /xx/_element_0
METH  /xx/_element_0.wget wave_format = {Test::Bar /xx_0/WGET}
METH  /xx/_element_0.wget class = VMethod
METH  /xx/_element_0.wget signals = /xx/_element_0/WGET
METH  /xx/_element_0.wget used_by = 
----
METH  /xx/_element_0.whas name = whas
METH  /xx/_element_0.whas path = /xx/_element_0
METH  /xx/_element_0.whas path synth = /xx_0
METH  /xx/_element_0.whas path bsv = /xx/_element_0
METH  /xx/_element_0.whas wave_format = {Bool /xx_0/WHAS}
METH  /xx/_element_0.whas class = VMethod
METH  /xx/_element_0.whas signals = /xx/_element_0/WHAS
METH  /xx/_element_0.whas used_by = 
----
METH  /xx/_element_0.wset name = wset
METH  /xx/_element_0.wset path = /xx/_element_0
METH  /xx/_element_0.wset path synth = /xx_0
METH  /xx/_element_0.wset path bsv = /xx/_element_0
METH  /xx/_element_0.wset wave_format = {Test::Bar /xx_0/WVAL} {Bool /xx_0/WSET}
METH  /xx/_element_0.wset class = VMethod
METH  /xx/_element_0.wset signals = /xx/_element_0/WSET /xx/_element_0/WVAL
METH  /xx/_element_0.wset used_by = 
----
METH  /xx/_element_1.wget name = wget
METH  /xx/_element_1.wget path = /xx/_element_1
METH  /xx/_element_1.wget path synth = /xx_1
METH  /xx/_element_1.wget path bsv = /xx/_element_1
METH  /xx/_element_1.wget wave_format = {Test::Bar /xx_1/WGET}
METH  /xx/_element_1.wget class = VMethod
METH  /xx/_element_1.wget signals = /xx/_element_1/WGET
METH  /xx/_element_1.wget used_by = 
----
METH  /xx/_element_1.whas name = whas
METH  /xx/_element_1.whas path = /xx/_element_1
METH  /xx/_element_1.whas path synth = /xx_1
METH  /xx/_element_1.whas path bsv = /xx/_element_1
METH  /xx/_element_1.whas wave_format = {Bool /xx_1/WHAS}
METH  /xx/_element_1.whas class = VMethod
METH  /xx/_element_1.whas signals = /xx/_element_1/WHAS
METH  /xx/_element_1.whas used_by = 
----
METH  /xx/_element_1.wset name = wset
METH  /xx/_element_1.wset path = /xx/_element_1
METH  /xx/_element_1.wset path synth = /xx_1
METH  /xx/_element_1.wset path bsv = /xx/_element_1
METH  /xx/_element_1.wset wave_format = {Test::Bar /xx_1/WVAL} {Bool /xx_1/WSET}
METH  /xx/_element_1.wset class = VMethod
METH  /xx/_element_1.wset signals = /xx/_element_1/WSET /xx/_element_1/WVAL
METH  /xx/_element_1.wset used_by = 
----
METH  /y/_element_0.read name = read
METH  /y/_element_0.read path = /y/_element_0
METH  /y/_element_0.read path synth = /y_0
METH  /y/_element_0.read path bsv = /y/_element_0
METH  /y/_element_0.read wave_format = {Int#(32) /y_0}
METH  /y/_element_0.read class = VMethod
METH  /y/_element_0.read signals = /y/_element_0/Q_OUT
METH  /y/_element_0.read used_by = 
----
METH  /y/_element_0.write name = write
METH  /y/_element_0.write path = /y/_element_0
METH  /y/_element_0.write path synth = /y_0
METH  /y/_element_0.write path bsv = /y/_element_0
METH  /y/_element_0.write wave_format = {Int#(32) {/y_0$D_IN}} {Bool {/y_0$EN}}
METH  /y/_element_0.write class = VMethod
METH  /y/_element_0.write signals = /y/_element_0/D_IN /y/_element_0/EN
METH  /y/_element_0.write used_by = 
----
METH  /y/_element_1.read name = read
METH  /y/_element_1.read path = /y/_element_1
METH  /y/_element_1.read path synth = /y_1
METH  /y/_element_1.read path bsv = /y/_element_1
METH  /y/_element_1.read wave_format = {Int#(32) /y_1}
METH  /y/_element_1.read class = VMethod
METH  /y/_element_1.read signals = /y/_element_1/Q_OUT
METH  /y/_element_1.read used_by = 
----
METH  /y/_element_1.write name = write
METH  /y/_element_1.write path = /y/_element_1
METH  /y/_element_1.write path synth = /y_1
METH  /y/_element_1.write path bsv = /y/_element_1
METH  /y/_element_1.write wave_format = {Int#(32) {/y_1$D_IN}} {Bool {/y_1$EN}}
METH  /y/_element_1.write class = VMethod
METH  /y/_element_1.write signals = /y/_element_1/D_IN /y/_element_1/EN
METH  /y/_element_1.write used_by = 
----
METH  /y/_element_2.read name = read
METH  /y/_element_2.read path = /y/_element_2
METH  /y/_element_2.read path synth = /y_2
METH  /y/_element_2.read path bsv = /y/_element_2
METH  /y/_element_2.read wave_format = {Int#(32) /y_2}
METH  /y/_element_2.read class = VMethod
METH  /y/_element_2.read signals = /y/_element_2/Q_OUT
METH  /y/_element_2.read used_by = 
----
METH  /y/_element_2.write name = write
METH  /y/_element_2.write path = /y/_element_2
METH  /y/_element_2.write path synth = /y_2
METH  /y/_element_2.write path bsv = /y/_element_2
METH  /y/_element_2.write wave_format = {Int#(32) {/y_2$D_IN}} {Bool {/y_2$EN}}
METH  /y/_element_2.write class = VMethod
METH  /y/_element_2.write signals = /y/_element_2/D_IN /y/_element_2/EN
METH  /y/_element_2.write used_by = 
----
METH  /y/_element_3.read name = read
METH  /y/_element_3.read path = /y/_element_3
METH  /y/_element_3.read path synth = /y_3
METH  /y/_element_3.read path bsv = /y/_element_3
METH  /y/_element_3.read wave_format = {Int#(32) /y_3}
METH  /y/_element_3.read class = VMethod
METH  /y/_element_3.read signals = /y/_element_3/Q_OUT
METH  /y/_element_3.read used_by = 
----
METH  /y/_element_3.write name = write
METH  /y/_element_3.write path = /y/_element_3
METH  /y/_element_3.write path synth = /y_3
METH  /y/_element_3.write path bsv = /y/_element_3
METH  /y/_element_3.write wave_format = {Int#(32) {/y_3$D_IN}} {Bool {/y_3$EN}}
METH  /y/_element_3.write class = VMethod
METH  /y/_element_3.write signals = /y/_element_3/D_IN /y/_element_3/EN
METH  /y/_element_3.write used_by = 
----
METH  /zw/_element_0.read name = read
METH  /zw/_element_0.read path = /zw/_element_0
METH  /zw/_element_0.read path synth = /zw_0
METH  /zw/_element_0.read path bsv = /zw/_element_0
METH  /zw/_element_0.read wave_format = {Int#(32) /zw_0}
METH  /zw/_element_0.read class = VMethod
METH  /zw/_element_0.read signals = /zw/_element_0/Q_OUT
METH  /zw/_element_0.read used_by = 
----
METH  /zw/_element_0.write name = write
METH  /zw/_element_0.write path = /zw/_element_0
METH  /zw/_element_0.write path synth = /zw_0
METH  /zw/_element_0.write path bsv = /zw/_element_0
METH  /zw/_element_0.write wave_format = {Int#(32) {/zw_0$D_IN}} {Bool {/zw_0$EN}}
METH  /zw/_element_0.write class = VMethod
METH  /zw/_element_0.write signals = /zw/_element_0/D_IN /zw/_element_0/EN
METH  /zw/_element_0.write used_by = 
----
METH  /zw/_element_1.read name = read
METH  /zw/_element_1.read path = /zw/_element_1
METH  /zw/_element_1.read path synth = /zw_1
METH  /zw/_element_1.read path bsv = /zw/_element_1
METH  /zw/_element_1.read wave_format = {Int#(32) /zw_1}
METH  /zw/_element_1.read class = VMethod
METH  /zw/_element_1.read signals = /zw/_element_1/Q_OUT
METH  /zw/_element_1.read used_by = 
----
METH  /zw/_element_1.write name = write
METH  /zw/_element_1.write path = /zw/_element_1
METH  /zw/_element_1.write path synth = /zw_1
METH  /zw/_element_1.write path bsv = /zw/_element_1
METH  /zw/_element_1.write wave_format = {Int#(32) {/zw_1$D_IN}} {Bool {/zw_1$EN}}
METH  /zw/_element_1.write class = VMethod
METH  /zw/_element_1.write signals = /zw/_element_1/D_IN /zw/_element_1/EN
METH  /zw/_element_1.write used_by = 
----
METH  /zw/_element_2.read name = read
METH  /zw/_element_2.read path = /zw/_element_2
METH  /zw/_element_2.read path synth = /zw_2
METH  /zw/_element_2.read path bsv = /zw/_element_2
METH  /zw/_element_2.read wave_format = {Int#(32) /zw_2}
METH  /zw/_element_2.read class = VMethod
METH  /zw/_element_2.read signals = /zw/_element_2/Q_OUT
METH  /zw/_element_2.read used_by = 
----
METH  /zw/_element_2.write name = write
METH  /zw/_element_2.write path = /zw/_element_2
METH  /zw/_element_2.write path synth = /zw_2
METH  /zw/_element_2.write path bsv = /zw/_element_2
METH  /zw/_element_2.write wave_format = {Int#(32) {/zw_2$D_IN}} {Bool {/zw_2$EN}}
METH  /zw/_element_2.write class = VMethod
METH  /zw/_element_2.write signals = /zw/_element_2/D_IN /zw/_element_2/EN
METH  /zw/_element_2.write used_by = 
----
METH  /zw/_element_3.read name = read
METH  /zw/_element_3.read path = /zw/_element_3
METH  /zw/_element_3.read path synth = /zw_3
METH  /zw/_element_3.read path bsv = /zw/_element_3
METH  /zw/_element_3.read wave_format = {Int#(32) /zw_3}
METH  /zw/_element_3.read class = VMethod
METH  /zw/_element_3.read signals = /zw/_element_3/Q_OUT
METH  /zw/_element_3.read used_by = 
----
METH  /zw/_element_3.write name = write
METH  /zw/_element_3.write path = /zw/_element_3
METH  /zw/_element_3.write path synth = /zw_3
METH  /zw/_element_3.write path bsv = /zw/_element_3
METH  /zw/_element_3.write wave_format = {Int#(32) {/zw_3$D_IN}} {Bool {/zw_3$EN}}
METH  /zw/_element_3.write class = VMethod
METH  /zw/_element_3.write signals = /zw/_element_3/D_IN /zw/_element_3/EN
METH  /zw/_element_3.write used_by = 
----
METH  /zw/_element_4.read name = read
METH  /zw/_element_4.read path = /zw/_element_4
METH  /zw/_element_4.read path synth = /zw_4
METH  /zw/_element_4.read path bsv = /zw/_element_4
METH  /zw/_element_4.read wave_format = {Int#(32) /zw_4}
METH  /zw/_element_4.read class = VMethod
METH  /zw/_element_4.read signals = /zw/_element_4/Q_OUT
METH  /zw/_element_4.read used_by = 
----
METH  /zw/_element_4.write name = write
METH  /zw/_element_4.write path = /zw/_element_4
METH  /zw/_element_4.write path synth = /zw_4
METH  /zw/_element_4.write path bsv = /zw/_element_4
METH  /zw/_element_4.write wave_format = {Int#(32) {/zw_4$D_IN}} {Bool {/zw_4$EN}}
METH  /zw/_element_4.write class = VMethod
METH  /zw/_element_4.write signals = /zw/_element_4/D_IN /zw/_element_4/EN
METH  /zw/_element_4.write used_by = 
----
===========================RESET====================
top = /
f1 = /subis/_element_0 /subis/_element_1 /xx/_element_0 /xx/_element_1 /y/_element_0 /y/_element_1 /y/_element_2 /y/_element_3 /zw/_element_0 /zw/_element_1 /zw/_element_2 /zw/_element_3 /zw/_element_4
f2 = 
f3 = 
f4 = /Loop/Body_0/aa_0 /Loop/Body_0/bb_0 /Loop/Body_1/aa_1 /Loop/Body_1/bb_1 /Loop/Body_2/aa_2 /Loop/Body_2/bb_2 /Loop/Body_3/aa_3 /Loop/Body_3/bb_3 /Loop/x_0 /Loop/x_1 /Loop/x_2 /Loop/x_3 /subis/_element_0/barx /subis/_element_0/foo2 /subis/_element_1/barx /subis/_element_1/foo2 /xx/_element_0 /xx/_element_1 /y/_element_0 /y/_element_1 /y/_element_2 /y/_element_3 /zw/_element_0 /zw/_element_1 /zw/_element_2 /zw/_element_3 /zw/_element_4
f5 = / /subis/_element_0 /subis/_element_1
f6 = /Loop /Loop /Loop/Body_0 /Loop/Body_1 /Loop/Body_2 /Loop/Body_3 /subis /xx /y /zw
Command: inst filter *
/
/y
/y/_element_0
/y/_element_1
/y/_element_2
/y/_element_3
/zw
/zw/_element_0
/zw/_element_1
/zw/_element_2
/zw/_element_3
/zw/_element_4
/xx
/xx/_element_0
/xx/_element_1
/Loop
/Loop/x_0
/Loop/x_1
/Loop/x_2
/Loop/x_3
/Loop
/Loop/Body_0
/Loop/Body_0/aa_0
/Loop/Body_0/bb_0
/Loop/Body_1
/Loop/Body_1/aa_1
/Loop/Body_1/bb_1
/Loop/Body_2
/Loop/Body_2/aa_2
/Loop/Body_2/bb_2
/Loop/Body_3
/Loop/Body_3/aa_3
/Loop/Body_3/bb_3
/subis
/subis/_element_0
/subis/_element_0/foo2
/subis/_element_0/barx
/subis/_element_1
/subis/_element_1/foo2
/subis/_element_1/barx
---------
Command: inst filter /*
/
/y
/zw
/xx
/Loop
/Loop
/subis
---------
Command: inst filter r* g*
Caught error:  inst filter: Expected a search expression, found `r* g*'
---------
Command: inst filter /r1/*o*
---------
Command: inst filter /r1/*ll* -kind rule
Caught error:  Unsupported argument to -kind option `rule', must be `Rule', `Synth', `Prim' or `Inst'
---------
Command: inst filter /r1/*ll* -kind Rule
---------
Command: inst filter /r2/*ll* -kind Prim
---------
Command: inst filter /r.*/* -kind Prim
---------
Command: inst filter /r.*/r.* -regexp
---------
Command: inst filter /r.*/^r.* -regexp
---------
Command: inst filter {/r.*/^r[0-9]+} -regexp
---------
Command: inst filter {/r.*/^r[0-9]*} -regexp
---------
Command: inst filter {^r[0-9]+} -regexp
---------
Command: inst filter {.*/r[0-9]+} -regexp
---------
s1 = /CLK /Loop/Body_0/aa_0/CLK /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN /Loop/Body_0/aa_0/Q_OUT /Loop/Body_0/bb_0/CLK /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN /Loop/Body_0/bb_0/Q_OUT /Loop/Body_1/aa_1/CLK /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN /Loop/Body_1/aa_1/Q_OUT /Loop/Body_1/bb_1/CLK /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN /Loop/Body_1/bb_1/Q_OUT /Loop/Body_2/aa_2/CLK /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN /Loop/Body_2/aa_2/Q_OUT /Loop/Body_2/bb_2/CLK /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN /Loop/Body_2/bb_2/Q_OUT /Loop/Body_3/aa_3/CLK /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN /Loop/Body_3/aa_3/Q_OUT /Loop/Body_3/bb_3/CLK /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN /Loop/Body_3/bb_3/Q_OUT /Loop/x_0/CLK /Loop/x_0/D_IN /Loop/x_0/EN /Loop/x_0/Q_OUT /Loop/x_1/CLK /Loop/x_1/D_IN /Loop/x_1/EN /Loop/x_1/Q_OUT /Loop/x_2/CLK /Loop/x_2/D_IN /Loop/x_2/EN /Loop/x_2/Q_OUT /Loop/x_3/CLK /Loop/x_3/D_IN /Loop/x_3/EN /Loop/x_3/Q_OUT /RST_N /i /subis/_element_0/CLK /subis/_element_0/EN_foo /subis/_element_0/RST_N /subis/_element_0/RadyOnTheReadMethod /subis/_element_0/ax /subis/_element_0/bar /subis/_element_0/barx/CLK /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN /subis/_element_0/barx/Q_OUT /subis/_element_0/barx/RST /subis/_element_0/foo2/CLK /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN /subis/_element_0/foo2/Q_OUT /subis/_element_0/foo2/RST /subis/_element_0/foo_x /subis/_element_1/CLK /subis/_element_1/EN_foo /subis/_element_1/RST_N /subis/_element_1/RadyOnTheReadMethod /subis/_element_1/ax /subis/_element_1/bar /subis/_element_1/barx/CLK /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN /subis/_element_1/barx/Q_OUT /subis/_element_1/barx/RST /subis/_element_1/foo2/CLK /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN /subis/_element_1/foo2/Q_OUT /subis/_element_1/foo2/RST /subis/_element_1/foo_x /xx/_element_0/I_IN /xx/_element_0/I_OUT /xx/_element_0/V /xx/_element_0/WGET /xx/_element_0/WHAS /xx/_element_0/WSET /xx/_element_0/WVAL /xx/_element_1/I_IN /xx/_element_1/I_OUT /xx/_element_1/V /xx/_element_1/WGET /xx/_element_1/WHAS /xx/_element_1/WSET /xx/_element_1/WVAL /y/_element_0/CLK /y/_element_0/D_IN /y/_element_0/EN /y/_element_0/Q_OUT /y/_element_1/CLK /y/_element_1/D_IN /y/_element_1/EN /y/_element_1/Q_OUT /y/_element_2/CLK /y/_element_2/D_IN /y/_element_2/EN /y/_element_2/Q_OUT /y/_element_3/CLK /y/_element_3/D_IN /y/_element_3/EN /y/_element_3/Q_OUT /zw/_element_0/CLK /zw/_element_0/D_IN /zw/_element_0/EN /zw/_element_0/Q_OUT /zw/_element_0/RST /zw/_element_1/CLK /zw/_element_1/D_IN /zw/_element_1/EN /zw/_element_1/Q_OUT /zw/_element_1/RST /zw/_element_2/CLK /zw/_element_2/D_IN /zw/_element_2/EN /zw/_element_2/Q_OUT /zw/_element_2/RST /zw/_element_3/CLK /zw/_element_3/D_IN /zw/_element_3/EN /zw/_element_3/Q_OUT /zw/_element_3/RST /zw/_element_4/CLK /zw/_element_4/D_IN /zw/_element_4/EN /zw/_element_4/Q_OUT /zw/_element_4/RST
s2 = /subis/_element_0/bar /subis/_element_1/bar
s3 = 
Command: signal filter
Caught error:  signal filter: Expected a search expression, found `'
---------
Command: signal filter *
/i
/CLK
/RST_N
/y/_element_0/CLK
/y/_element_0/D_IN
/y/_element_0/EN
/y/_element_0/Q_OUT
/y/_element_1/CLK
/y/_element_1/D_IN
/y/_element_1/EN
/y/_element_1/Q_OUT
/y/_element_2/CLK
/y/_element_2/D_IN
/y/_element_2/EN
/y/_element_2/Q_OUT
/y/_element_3/CLK
/y/_element_3/D_IN
/y/_element_3/EN
/y/_element_3/Q_OUT
/zw/_element_0/CLK
/zw/_element_0/RST
/zw/_element_0/D_IN
/zw/_element_0/EN
/zw/_element_0/Q_OUT
/zw/_element_1/CLK
/zw/_element_1/RST
/zw/_element_1/D_IN
/zw/_element_1/EN
/zw/_element_1/Q_OUT
/zw/_element_2/CLK
/zw/_element_2/RST
/zw/_element_2/D_IN
/zw/_element_2/EN
/zw/_element_2/Q_OUT
/zw/_element_3/CLK
/zw/_element_3/RST
/zw/_element_3/D_IN
/zw/_element_3/EN
/zw/_element_3/Q_OUT
/zw/_element_4/CLK
/zw/_element_4/RST
/zw/_element_4/D_IN
/zw/_element_4/EN
/zw/_element_4/Q_OUT
/xx/_element_0/V
/xx/_element_0/I_IN
/xx/_element_0/WVAL
/xx/_element_0/WSET
/xx/_element_0/WGET
/xx/_element_0/WHAS
/xx/_element_0/I_OUT
/xx/_element_1/V
/xx/_element_1/I_IN
/xx/_element_1/WVAL
/xx/_element_1/WSET
/xx/_element_1/WGET
/xx/_element_1/WHAS
/xx/_element_1/I_OUT
/Loop/x_0/CLK
/Loop/x_0/D_IN
/Loop/x_0/EN
/Loop/x_0/Q_OUT
/Loop/x_1/CLK
/Loop/x_1/D_IN
/Loop/x_1/EN
/Loop/x_1/Q_OUT
/Loop/x_2/CLK
/Loop/x_2/D_IN
/Loop/x_2/EN
/Loop/x_2/Q_OUT
/Loop/x_3/CLK
/Loop/x_3/D_IN
/Loop/x_3/EN
/Loop/x_3/Q_OUT
/Loop/Body_0/aa_0/CLK
/Loop/Body_0/aa_0/D_IN
/Loop/Body_0/aa_0/EN
/Loop/Body_0/aa_0/Q_OUT
/Loop/Body_0/bb_0/CLK
/Loop/Body_0/bb_0/D_IN
/Loop/Body_0/bb_0/EN
/Loop/Body_0/bb_0/Q_OUT
/Loop/Body_1/aa_1/CLK
/Loop/Body_1/aa_1/D_IN
/Loop/Body_1/aa_1/EN
/Loop/Body_1/aa_1/Q_OUT
/Loop/Body_1/bb_1/CLK
/Loop/Body_1/bb_1/D_IN
/Loop/Body_1/bb_1/EN
/Loop/Body_1/bb_1/Q_OUT
/Loop/Body_2/aa_2/CLK
/Loop/Body_2/aa_2/D_IN
/Loop/Body_2/aa_2/EN
/Loop/Body_2/aa_2/Q_OUT
/Loop/Body_2/bb_2/CLK
/Loop/Body_2/bb_2/D_IN
/Loop/Body_2/bb_2/EN
/Loop/Body_2/bb_2/Q_OUT
/Loop/Body_3/aa_3/CLK
/Loop/Body_3/aa_3/D_IN
/Loop/Body_3/aa_3/EN
/Loop/Body_3/aa_3/Q_OUT
/Loop/Body_3/bb_3/CLK
/Loop/Body_3/bb_3/D_IN
/Loop/Body_3/bb_3/EN
/Loop/Body_3/bb_3/Q_OUT
/subis/_element_0/ax
/subis/_element_0/CLK
/subis/_element_0/RST_N
/subis/_element_0/foo_x
/subis/_element_0/EN_foo
/subis/_element_0/bar
/subis/_element_0/RadyOnTheReadMethod
/subis/_element_0/foo2/CLK
/subis/_element_0/foo2/RST
/subis/_element_0/foo2/D_IN
/subis/_element_0/foo2/EN
/subis/_element_0/foo2/Q_OUT
/subis/_element_0/barx/CLK
/subis/_element_0/barx/RST
/subis/_element_0/barx/D_IN
/subis/_element_0/barx/EN
/subis/_element_0/barx/Q_OUT
/subis/_element_1/ax
/subis/_element_1/CLK
/subis/_element_1/RST_N
/subis/_element_1/foo_x
/subis/_element_1/EN_foo
/subis/_element_1/bar
/subis/_element_1/RadyOnTheReadMethod
/subis/_element_1/foo2/CLK
/subis/_element_1/foo2/RST
/subis/_element_1/foo2/D_IN
/subis/_element_1/foo2/EN
/subis/_element_1/foo2/Q_OUT
/subis/_element_1/barx/CLK
/subis/_element_1/barx/RST
/subis/_element_1/barx/D_IN
/subis/_element_1/barx/EN
/subis/_element_1/barx/Q_OUT
---------
Command: signal filter */*
/i
/CLK
/RST_N
/y/_element_0/CLK
/y/_element_0/D_IN
/y/_element_0/EN
/y/_element_0/Q_OUT
/y/_element_1/CLK
/y/_element_1/D_IN
/y/_element_1/EN
/y/_element_1/Q_OUT
/y/_element_2/CLK
/y/_element_2/D_IN
/y/_element_2/EN
/y/_element_2/Q_OUT
/y/_element_3/CLK
/y/_element_3/D_IN
/y/_element_3/EN
/y/_element_3/Q_OUT
/zw/_element_0/CLK
/zw/_element_0/RST
/zw/_element_0/D_IN
/zw/_element_0/EN
/zw/_element_0/Q_OUT
/zw/_element_1/CLK
/zw/_element_1/RST
/zw/_element_1/D_IN
/zw/_element_1/EN
/zw/_element_1/Q_OUT
/zw/_element_2/CLK
/zw/_element_2/RST
/zw/_element_2/D_IN
/zw/_element_2/EN
/zw/_element_2/Q_OUT
/zw/_element_3/CLK
/zw/_element_3/RST
/zw/_element_3/D_IN
/zw/_element_3/EN
/zw/_element_3/Q_OUT
/zw/_element_4/CLK
/zw/_element_4/RST
/zw/_element_4/D_IN
/zw/_element_4/EN
/zw/_element_4/Q_OUT
/xx/_element_0/V
/xx/_element_0/I_IN
/xx/_element_0/WVAL
/xx/_element_0/WSET
/xx/_element_0/WGET
/xx/_element_0/WHAS
/xx/_element_0/I_OUT
/xx/_element_1/V
/xx/_element_1/I_IN
/xx/_element_1/WVAL
/xx/_element_1/WSET
/xx/_element_1/WGET
/xx/_element_1/WHAS
/xx/_element_1/I_OUT
/Loop/x_0/CLK
/Loop/x_0/D_IN
/Loop/x_0/EN
/Loop/x_0/Q_OUT
/Loop/x_1/CLK
/Loop/x_1/D_IN
/Loop/x_1/EN
/Loop/x_1/Q_OUT
/Loop/x_2/CLK
/Loop/x_2/D_IN
/Loop/x_2/EN
/Loop/x_2/Q_OUT
/Loop/x_3/CLK
/Loop/x_3/D_IN
/Loop/x_3/EN
/Loop/x_3/Q_OUT
/Loop/Body_0/aa_0/CLK
/Loop/Body_0/aa_0/D_IN
/Loop/Body_0/aa_0/EN
/Loop/Body_0/aa_0/Q_OUT
/Loop/Body_0/bb_0/CLK
/Loop/Body_0/bb_0/D_IN
/Loop/Body_0/bb_0/EN
/Loop/Body_0/bb_0/Q_OUT
/Loop/Body_1/aa_1/CLK
/Loop/Body_1/aa_1/D_IN
/Loop/Body_1/aa_1/EN
/Loop/Body_1/aa_1/Q_OUT
/Loop/Body_1/bb_1/CLK
/Loop/Body_1/bb_1/D_IN
/Loop/Body_1/bb_1/EN
/Loop/Body_1/bb_1/Q_OUT
/Loop/Body_2/aa_2/CLK
/Loop/Body_2/aa_2/D_IN
/Loop/Body_2/aa_2/EN
/Loop/Body_2/aa_2/Q_OUT
/Loop/Body_2/bb_2/CLK
/Loop/Body_2/bb_2/D_IN
/Loop/Body_2/bb_2/EN
/Loop/Body_2/bb_2/Q_OUT
/Loop/Body_3/aa_3/CLK
/Loop/Body_3/aa_3/D_IN
/Loop/Body_3/aa_3/EN
/Loop/Body_3/aa_3/Q_OUT
/Loop/Body_3/bb_3/CLK
/Loop/Body_3/bb_3/D_IN
/Loop/Body_3/bb_3/EN
/Loop/Body_3/bb_3/Q_OUT
/subis/_element_0/ax
/subis/_element_0/CLK
/subis/_element_0/RST_N
/subis/_element_0/foo_x
/subis/_element_0/EN_foo
/subis/_element_0/bar
/subis/_element_0/RadyOnTheReadMethod
/subis/_element_0/foo2/CLK
/subis/_element_0/foo2/RST
/subis/_element_0/foo2/D_IN
/subis/_element_0/foo2/EN
/subis/_element_0/foo2/Q_OUT
/subis/_element_0/barx/CLK
/subis/_element_0/barx/RST
/subis/_element_0/barx/D_IN
/subis/_element_0/barx/EN
/subis/_element_0/barx/Q_OUT
/subis/_element_1/ax
/subis/_element_1/CLK
/subis/_element_1/RST_N
/subis/_element_1/foo_x
/subis/_element_1/EN_foo
/subis/_element_1/bar
/subis/_element_1/RadyOnTheReadMethod
/subis/_element_1/foo2/CLK
/subis/_element_1/foo2/RST
/subis/_element_1/foo2/D_IN
/subis/_element_1/foo2/EN
/subis/_element_1/foo2/Q_OUT
/subis/_element_1/barx/CLK
/subis/_element_1/barx/RST
/subis/_element_1/barx/D_IN
/subis/_element_1/barx/EN
/subis/_element_1/barx/Q_OUT
---------
Command: signal filter */
---------
Command: signal filter /*/
---------
Command: signal filter /*/*
/i
/CLK
/RST_N
---------
Command: signal filter /r2/*
---------
Command: signal filter /r2/* -nametype synth
---------
Command: signal filter /*/r2/*
---------
starting insttest
got path INST /
INST / . kind = Synth
INST / . position = 
INST / . module = mkTest
INST / . class = VInst
INST / . hiertree = vInst40 mkTest {synth branch}
INST / . wave_format = {Inout#(Test::Bar) /i}
INST / . key = 1
INST / . ancestors = /
INST / . name bsv = mkTest
INST / . name synth = 
INST / . path bsv = /
INST / . path synth = /
INST / . signals = /CLK /RST_N /i
INST / . predsignals = 
INST / . bodysignals = 
INST / . predmethods = 
INST / . bodymethods = 
INST / . portmethods = 
got path INST /Loop
INST /Loop . kind = Inst
INST /Loop . position = Test2.bsv 19 4
INST /Loop . module = mkTest
INST /Loop . class = VInst
INST /Loop . hiertree = vInst44 Loop {}
INST /Loop . wave_format = 
INST /Loop . key = 5
INST /Loop . ancestors = / /Loop
INST /Loop . name bsv = Loop
INST /Loop . name synth = Loop
INST /Loop . path bsv = /Loop
INST /Loop . path synth = /
INST /Loop . parent = /
INST /Loop . signals = 
INST /Loop . predsignals = 
INST /Loop . bodysignals = 
INST /Loop . predmethods = 
INST /Loop . bodymethods = 
INST /Loop . portmethods = 
Error on name lookup /Loop  found 'vInst44 vInst45'
got path INST /Loop
INST /Loop . kind = Inst
INST /Loop . position = Test2.bsv 23 4
INST /Loop . module = mkTest
INST /Loop . class = VInst
INST /Loop . hiertree = vInst45 Loop {}
INST /Loop . wave_format = 
INST /Loop . key = 6
INST /Loop . ancestors = / /Loop
INST /Loop . name bsv = Loop
INST /Loop . name synth = Loop
INST /Loop . path bsv = /Loop
INST /Loop . path synth = /
INST /Loop . parent = /
INST /Loop . signals = 
INST /Loop . predsignals = 
INST /Loop . bodysignals = 
INST /Loop . predmethods = 
INST /Loop . bodymethods = 
INST /Loop . portmethods = 
Error on name lookup /Loop  found 'vInst44 vInst45'
got path INST /Loop/Body_0
INST /Loop/Body_0 . kind = Inst
INST /Loop/Body_0 . position = Test2.bsv 23 44
INST /Loop/Body_0 . module = mkTest
INST /Loop/Body_0 . class = VInst
INST /Loop/Body_0 . hiertree = vInst62 Body_0 {}
INST /Loop/Body_0 . wave_format = 
INST /Loop/Body_0 . key = 23
INST /Loop/Body_0 . ancestors = / /Loop /Loop/Body_0
INST /Loop/Body_0 . name bsv = Body_0
INST /Loop/Body_0 . name synth = Body_0
INST /Loop/Body_0 . path bsv = /Loop/Body_0
INST /Loop/Body_0 . path synth = /
INST /Loop/Body_0 . parent = /Loop
INST /Loop/Body_0 . signals = 
INST /Loop/Body_0 . predsignals = 
INST /Loop/Body_0 . bodysignals = 
INST /Loop/Body_0 . predmethods = 
INST /Loop/Body_0 . bodymethods = 
INST /Loop/Body_0 . portmethods = 
got path INST /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . kind = Prim
INST /Loop/Body_0/aa_0 . position = Test2.bsv 24 6
INST /Loop/Body_0/aa_0 . module = mkTest
INST /Loop/Body_0/aa_0 . class = VInst
INST /Loop/Body_0/aa_0 . hiertree = vInst66 {aa_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_0/aa_0 . wave_format = {Int#(32) {/aa_0$D_IN}} {Bool {/aa_0$EN}} {Int#(32) /aa_0}
INST /Loop/Body_0/aa_0 . key = 27
INST /Loop/Body_0/aa_0 . ancestors = / /Loop /Loop/Body_0 /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . name bsv = aa_0
INST /Loop/Body_0/aa_0 . name synth = aa_0
INST /Loop/Body_0/aa_0 . path bsv = /Loop/Body_0/aa_0
INST /Loop/Body_0/aa_0 . path synth = /aa_0
INST /Loop/Body_0/aa_0 . parent = /Loop/Body_0
INST /Loop/Body_0/aa_0 . signals = /Loop/Body_0/aa_0/CLK /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN /Loop/Body_0/aa_0/Q_OUT
INST /Loop/Body_0/aa_0 . predsignals = 
INST /Loop/Body_0/aa_0 . bodysignals = 
INST /Loop/Body_0/aa_0 . predmethods = 
INST /Loop/Body_0/aa_0 . bodymethods = 
INST /Loop/Body_0/aa_0 . portmethods = /Loop/Body_0/aa_0.read /Loop/Body_0/aa_0.write
got path INST /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . kind = Prim
INST /Loop/Body_0/bb_0 . position = Test2.bsv 25 6
INST /Loop/Body_0/bb_0 . module = mkTest
INST /Loop/Body_0/bb_0 . class = VInst
INST /Loop/Body_0/bb_0 . hiertree = vInst67 {bb_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_0/bb_0 . wave_format = {Int#(32) {/bb_0$D_IN}} {Bool {/bb_0$EN}} {Int#(32) /bb_0}
INST /Loop/Body_0/bb_0 . key = 28
INST /Loop/Body_0/bb_0 . ancestors = / /Loop /Loop/Body_0 /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . name bsv = bb_0
INST /Loop/Body_0/bb_0 . name synth = bb_0
INST /Loop/Body_0/bb_0 . path bsv = /Loop/Body_0/bb_0
INST /Loop/Body_0/bb_0 . path synth = /bb_0
INST /Loop/Body_0/bb_0 . parent = /Loop/Body_0
INST /Loop/Body_0/bb_0 . signals = /Loop/Body_0/bb_0/CLK /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN /Loop/Body_0/bb_0/Q_OUT
INST /Loop/Body_0/bb_0 . predsignals = 
INST /Loop/Body_0/bb_0 . bodysignals = 
INST /Loop/Body_0/bb_0 . predmethods = 
INST /Loop/Body_0/bb_0 . bodymethods = 
INST /Loop/Body_0/bb_0 . portmethods = /Loop/Body_0/bb_0.read /Loop/Body_0/bb_0.write
got path INST /Loop/Body_1
INST /Loop/Body_1 . kind = Inst
INST /Loop/Body_1 . position = Test2.bsv 23 44
INST /Loop/Body_1 . module = mkTest
INST /Loop/Body_1 . class = VInst
INST /Loop/Body_1 . hiertree = vInst63 Body_1 {}
INST /Loop/Body_1 . wave_format = 
INST /Loop/Body_1 . key = 24
INST /Loop/Body_1 . ancestors = / /Loop /Loop/Body_1
INST /Loop/Body_1 . name bsv = Body_1
INST /Loop/Body_1 . name synth = Body_1
INST /Loop/Body_1 . path bsv = /Loop/Body_1
INST /Loop/Body_1 . path synth = /
INST /Loop/Body_1 . parent = /Loop
INST /Loop/Body_1 . signals = 
INST /Loop/Body_1 . predsignals = 
INST /Loop/Body_1 . bodysignals = 
INST /Loop/Body_1 . predmethods = 
INST /Loop/Body_1 . bodymethods = 
INST /Loop/Body_1 . portmethods = 
got path INST /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . kind = Prim
INST /Loop/Body_1/aa_1 . position = Test2.bsv 24 6
INST /Loop/Body_1/aa_1 . module = mkTest
INST /Loop/Body_1/aa_1 . class = VInst
INST /Loop/Body_1/aa_1 . hiertree = vInst68 {aa_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_1/aa_1 . wave_format = {Int#(32) {/aa_1$D_IN}} {Bool {/aa_1$EN}} {Int#(32) /aa_1}
INST /Loop/Body_1/aa_1 . key = 29
INST /Loop/Body_1/aa_1 . ancestors = / /Loop /Loop/Body_1 /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . name bsv = aa_1
INST /Loop/Body_1/aa_1 . name synth = aa_1
INST /Loop/Body_1/aa_1 . path bsv = /Loop/Body_1/aa_1
INST /Loop/Body_1/aa_1 . path synth = /aa_1
INST /Loop/Body_1/aa_1 . parent = /Loop/Body_1
INST /Loop/Body_1/aa_1 . signals = /Loop/Body_1/aa_1/CLK /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN /Loop/Body_1/aa_1/Q_OUT
INST /Loop/Body_1/aa_1 . predsignals = 
INST /Loop/Body_1/aa_1 . bodysignals = 
INST /Loop/Body_1/aa_1 . predmethods = 
INST /Loop/Body_1/aa_1 . bodymethods = 
INST /Loop/Body_1/aa_1 . portmethods = /Loop/Body_1/aa_1.read /Loop/Body_1/aa_1.write
got path INST /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . kind = Prim
INST /Loop/Body_1/bb_1 . position = Test2.bsv 25 6
INST /Loop/Body_1/bb_1 . module = mkTest
INST /Loop/Body_1/bb_1 . class = VInst
INST /Loop/Body_1/bb_1 . hiertree = vInst69 {bb_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_1/bb_1 . wave_format = {Int#(32) {/bb_1$D_IN}} {Bool {/bb_1$EN}} {Int#(32) /bb_1}
INST /Loop/Body_1/bb_1 . key = 30
INST /Loop/Body_1/bb_1 . ancestors = / /Loop /Loop/Body_1 /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . name bsv = bb_1
INST /Loop/Body_1/bb_1 . name synth = bb_1
INST /Loop/Body_1/bb_1 . path bsv = /Loop/Body_1/bb_1
INST /Loop/Body_1/bb_1 . path synth = /bb_1
INST /Loop/Body_1/bb_1 . parent = /Loop/Body_1
INST /Loop/Body_1/bb_1 . signals = /Loop/Body_1/bb_1/CLK /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN /Loop/Body_1/bb_1/Q_OUT
INST /Loop/Body_1/bb_1 . predsignals = 
INST /Loop/Body_1/bb_1 . bodysignals = 
INST /Loop/Body_1/bb_1 . predmethods = 
INST /Loop/Body_1/bb_1 . bodymethods = 
INST /Loop/Body_1/bb_1 . portmethods = /Loop/Body_1/bb_1.read /Loop/Body_1/bb_1.write
got path INST /Loop/Body_2
INST /Loop/Body_2 . kind = Inst
INST /Loop/Body_2 . position = Test2.bsv 23 44
INST /Loop/Body_2 . module = mkTest
INST /Loop/Body_2 . class = VInst
INST /Loop/Body_2 . hiertree = vInst64 Body_2 {}
INST /Loop/Body_2 . wave_format = 
INST /Loop/Body_2 . key = 25
INST /Loop/Body_2 . ancestors = / /Loop /Loop/Body_2
INST /Loop/Body_2 . name bsv = Body_2
INST /Loop/Body_2 . name synth = Body_2
INST /Loop/Body_2 . path bsv = /Loop/Body_2
INST /Loop/Body_2 . path synth = /
INST /Loop/Body_2 . parent = /Loop
INST /Loop/Body_2 . signals = 
INST /Loop/Body_2 . predsignals = 
INST /Loop/Body_2 . bodysignals = 
INST /Loop/Body_2 . predmethods = 
INST /Loop/Body_2 . bodymethods = 
INST /Loop/Body_2 . portmethods = 
got path INST /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . kind = Prim
INST /Loop/Body_2/aa_2 . position = Test2.bsv 24 6
INST /Loop/Body_2/aa_2 . module = mkTest
INST /Loop/Body_2/aa_2 . class = VInst
INST /Loop/Body_2/aa_2 . hiertree = vInst70 {aa_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_2/aa_2 . wave_format = {Int#(32) {/aa_2$D_IN}} {Bool {/aa_2$EN}} {Int#(32) /aa_2}
INST /Loop/Body_2/aa_2 . key = 31
INST /Loop/Body_2/aa_2 . ancestors = / /Loop /Loop/Body_2 /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . name bsv = aa_2
INST /Loop/Body_2/aa_2 . name synth = aa_2
INST /Loop/Body_2/aa_2 . path bsv = /Loop/Body_2/aa_2
INST /Loop/Body_2/aa_2 . path synth = /aa_2
INST /Loop/Body_2/aa_2 . parent = /Loop/Body_2
INST /Loop/Body_2/aa_2 . signals = /Loop/Body_2/aa_2/CLK /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN /Loop/Body_2/aa_2/Q_OUT
INST /Loop/Body_2/aa_2 . predsignals = 
INST /Loop/Body_2/aa_2 . bodysignals = 
INST /Loop/Body_2/aa_2 . predmethods = 
INST /Loop/Body_2/aa_2 . bodymethods = 
INST /Loop/Body_2/aa_2 . portmethods = /Loop/Body_2/aa_2.read /Loop/Body_2/aa_2.write
got path INST /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . kind = Prim
INST /Loop/Body_2/bb_2 . position = Test2.bsv 25 6
INST /Loop/Body_2/bb_2 . module = mkTest
INST /Loop/Body_2/bb_2 . class = VInst
INST /Loop/Body_2/bb_2 . hiertree = vInst71 {bb_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_2/bb_2 . wave_format = {Int#(32) {/bb_2$D_IN}} {Bool {/bb_2$EN}} {Int#(32) /bb_2}
INST /Loop/Body_2/bb_2 . key = 32
INST /Loop/Body_2/bb_2 . ancestors = / /Loop /Loop/Body_2 /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . name bsv = bb_2
INST /Loop/Body_2/bb_2 . name synth = bb_2
INST /Loop/Body_2/bb_2 . path bsv = /Loop/Body_2/bb_2
INST /Loop/Body_2/bb_2 . path synth = /bb_2
INST /Loop/Body_2/bb_2 . parent = /Loop/Body_2
INST /Loop/Body_2/bb_2 . signals = /Loop/Body_2/bb_2/CLK /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN /Loop/Body_2/bb_2/Q_OUT
INST /Loop/Body_2/bb_2 . predsignals = 
INST /Loop/Body_2/bb_2 . bodysignals = 
INST /Loop/Body_2/bb_2 . predmethods = 
INST /Loop/Body_2/bb_2 . bodymethods = 
INST /Loop/Body_2/bb_2 . portmethods = /Loop/Body_2/bb_2.read /Loop/Body_2/bb_2.write
got path INST /Loop/Body_3
INST /Loop/Body_3 . kind = Inst
INST /Loop/Body_3 . position = Test2.bsv 23 44
INST /Loop/Body_3 . module = mkTest
INST /Loop/Body_3 . class = VInst
INST /Loop/Body_3 . hiertree = vInst65 Body_3 {}
INST /Loop/Body_3 . wave_format = 
INST /Loop/Body_3 . key = 26
INST /Loop/Body_3 . ancestors = / /Loop /Loop/Body_3
INST /Loop/Body_3 . name bsv = Body_3
INST /Loop/Body_3 . name synth = Body_3
INST /Loop/Body_3 . path bsv = /Loop/Body_3
INST /Loop/Body_3 . path synth = /
INST /Loop/Body_3 . parent = /Loop
INST /Loop/Body_3 . signals = 
INST /Loop/Body_3 . predsignals = 
INST /Loop/Body_3 . bodysignals = 
INST /Loop/Body_3 . predmethods = 
INST /Loop/Body_3 . bodymethods = 
INST /Loop/Body_3 . portmethods = 
got path INST /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . kind = Prim
INST /Loop/Body_3/aa_3 . position = Test2.bsv 24 6
INST /Loop/Body_3/aa_3 . module = mkTest
INST /Loop/Body_3/aa_3 . class = VInst
INST /Loop/Body_3/aa_3 . hiertree = vInst72 {aa_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_3/aa_3 . wave_format = {Int#(32) {/aa_3$D_IN}} {Bool {/aa_3$EN}} {Int#(32) /aa_3}
INST /Loop/Body_3/aa_3 . key = 33
INST /Loop/Body_3/aa_3 . ancestors = / /Loop /Loop/Body_3 /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . name bsv = aa_3
INST /Loop/Body_3/aa_3 . name synth = aa_3
INST /Loop/Body_3/aa_3 . path bsv = /Loop/Body_3/aa_3
INST /Loop/Body_3/aa_3 . path synth = /aa_3
INST /Loop/Body_3/aa_3 . parent = /Loop/Body_3
INST /Loop/Body_3/aa_3 . signals = /Loop/Body_3/aa_3/CLK /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN /Loop/Body_3/aa_3/Q_OUT
INST /Loop/Body_3/aa_3 . predsignals = 
INST /Loop/Body_3/aa_3 . bodysignals = 
INST /Loop/Body_3/aa_3 . predmethods = 
INST /Loop/Body_3/aa_3 . bodymethods = 
INST /Loop/Body_3/aa_3 . portmethods = /Loop/Body_3/aa_3.read /Loop/Body_3/aa_3.write
got path INST /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . kind = Prim
INST /Loop/Body_3/bb_3 . position = Test2.bsv 25 6
INST /Loop/Body_3/bb_3 . module = mkTest
INST /Loop/Body_3/bb_3 . class = VInst
INST /Loop/Body_3/bb_3 . hiertree = vInst73 {bb_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/Body_3/bb_3 . wave_format = {Int#(32) {/bb_3$D_IN}} {Bool {/bb_3$EN}} {Int#(32) /bb_3}
INST /Loop/Body_3/bb_3 . key = 34
INST /Loop/Body_3/bb_3 . ancestors = / /Loop /Loop/Body_3 /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . name bsv = bb_3
INST /Loop/Body_3/bb_3 . name synth = bb_3
INST /Loop/Body_3/bb_3 . path bsv = /Loop/Body_3/bb_3
INST /Loop/Body_3/bb_3 . path synth = /bb_3
INST /Loop/Body_3/bb_3 . parent = /Loop/Body_3
INST /Loop/Body_3/bb_3 . signals = /Loop/Body_3/bb_3/CLK /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN /Loop/Body_3/bb_3/Q_OUT
INST /Loop/Body_3/bb_3 . predsignals = 
INST /Loop/Body_3/bb_3 . bodysignals = 
INST /Loop/Body_3/bb_3 . predmethods = 
INST /Loop/Body_3/bb_3 . bodymethods = 
INST /Loop/Body_3/bb_3 . portmethods = /Loop/Body_3/bb_3.read /Loop/Body_3/bb_3.write
got path INST /Loop/x_0
INST /Loop/x_0 . kind = Prim
INST /Loop/x_0 . position = Test2.bsv 20 7
INST /Loop/x_0 . module = mkTest
INST /Loop/x_0 . class = VInst
INST /Loop/x_0 . hiertree = vInst58 {x_0  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_0 . wave_format = {Int#(32) {/x_0$D_IN}} {Bool {/x_0$EN}} {Int#(32) /x_0}
INST /Loop/x_0 . key = 19
INST /Loop/x_0 . ancestors = / /Loop /Loop/x_0
INST /Loop/x_0 . name bsv = x_0
INST /Loop/x_0 . name synth = x_0
INST /Loop/x_0 . path bsv = /Loop/x_0
INST /Loop/x_0 . path synth = /x_0
INST /Loop/x_0 . parent = /Loop
INST /Loop/x_0 . signals = /Loop/x_0/CLK /Loop/x_0/D_IN /Loop/x_0/EN /Loop/x_0/Q_OUT
INST /Loop/x_0 . predsignals = 
INST /Loop/x_0 . bodysignals = 
INST /Loop/x_0 . predmethods = 
INST /Loop/x_0 . bodymethods = 
INST /Loop/x_0 . portmethods = /Loop/x_0.read /Loop/x_0.write
got path INST /Loop/x_1
INST /Loop/x_1 . kind = Prim
INST /Loop/x_1 . position = Test2.bsv 20 7
INST /Loop/x_1 . module = mkTest
INST /Loop/x_1 . class = VInst
INST /Loop/x_1 . hiertree = vInst59 {x_1  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_1 . wave_format = {Int#(32) {/x_1$D_IN}} {Bool {/x_1$EN}} {Int#(32) /x_1}
INST /Loop/x_1 . key = 20
INST /Loop/x_1 . ancestors = / /Loop /Loop/x_1
INST /Loop/x_1 . name bsv = x_1
INST /Loop/x_1 . name synth = x_1
INST /Loop/x_1 . path bsv = /Loop/x_1
INST /Loop/x_1 . path synth = /x_1
INST /Loop/x_1 . parent = /Loop
INST /Loop/x_1 . signals = /Loop/x_1/CLK /Loop/x_1/D_IN /Loop/x_1/EN /Loop/x_1/Q_OUT
INST /Loop/x_1 . predsignals = 
INST /Loop/x_1 . bodysignals = 
INST /Loop/x_1 . predmethods = 
INST /Loop/x_1 . bodymethods = 
INST /Loop/x_1 . portmethods = /Loop/x_1.read /Loop/x_1.write
got path INST /Loop/x_2
INST /Loop/x_2 . kind = Prim
INST /Loop/x_2 . position = Test2.bsv 20 7
INST /Loop/x_2 . module = mkTest
INST /Loop/x_2 . class = VInst
INST /Loop/x_2 . hiertree = vInst60 {x_2  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_2 . wave_format = {Int#(32) {/x_2$D_IN}} {Bool {/x_2$EN}} {Int#(32) /x_2}
INST /Loop/x_2 . key = 21
INST /Loop/x_2 . ancestors = / /Loop /Loop/x_2
INST /Loop/x_2 . name bsv = x_2
INST /Loop/x_2 . name synth = x_2
INST /Loop/x_2 . path bsv = /Loop/x_2
INST /Loop/x_2 . path synth = /x_2
INST /Loop/x_2 . parent = /Loop
INST /Loop/x_2 . signals = /Loop/x_2/CLK /Loop/x_2/D_IN /Loop/x_2/EN /Loop/x_2/Q_OUT
INST /Loop/x_2 . predsignals = 
INST /Loop/x_2 . bodysignals = 
INST /Loop/x_2 . predmethods = 
INST /Loop/x_2 . bodymethods = 
INST /Loop/x_2 . portmethods = /Loop/x_2.read /Loop/x_2.write
got path INST /Loop/x_3
INST /Loop/x_3 . kind = Prim
INST /Loop/x_3 . position = Test2.bsv 20 7
INST /Loop/x_3 . module = mkTest
INST /Loop/x_3 . class = VInst
INST /Loop/x_3 . hiertree = vInst61 {x_3  Reg#(Int#(32))} {prim leaf}
INST /Loop/x_3 . wave_format = {Int#(32) {/x_3$D_IN}} {Bool {/x_3$EN}} {Int#(32) /x_3}
INST /Loop/x_3 . key = 22
INST /Loop/x_3 . ancestors = / /Loop /Loop/x_3
INST /Loop/x_3 . name bsv = x_3
INST /Loop/x_3 . name synth = x_3
INST /Loop/x_3 . path bsv = /Loop/x_3
INST /Loop/x_3 . path synth = /x_3
INST /Loop/x_3 . parent = /Loop
INST /Loop/x_3 . signals = /Loop/x_3/CLK /Loop/x_3/D_IN /Loop/x_3/EN /Loop/x_3/Q_OUT
INST /Loop/x_3 . predsignals = 
INST /Loop/x_3 . bodysignals = 
INST /Loop/x_3 . predmethods = 
INST /Loop/x_3 . bodymethods = 
INST /Loop/x_3 . portmethods = /Loop/x_3.read /Loop/x_3.write
got path INST /subis
INST /subis . kind = Inst
INST /subis . position = Test2.bsv 29 23
INST /subis . module = mkTest
INST /subis . class = VInst
INST /subis . hiertree = vInst46 subis {}
INST /subis . wave_format = 
INST /subis . key = 7
INST /subis . ancestors = / /subis
INST /subis . name bsv = subis
INST /subis . name synth = subis
INST /subis . path bsv = /subis
INST /subis . path synth = /
INST /subis . parent = /
INST /subis . signals = 
INST /subis . predsignals = 
INST /subis . bodysignals = 
INST /subis . predmethods = 
INST /subis . bodymethods = 
INST /subis . portmethods = 
got path INST /subis/_element_0
INST /subis/_element_0 . kind = Synth
INST /subis/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /subis/_element_0 . module = mkSub
INST /subis/_element_0 . class = VInst
INST /subis/_element_0 . hiertree = vInst74 {_element_0  Sub_Ifc} {synth branch}
INST /subis/_element_0 . wave_format = {Bit#(3) /subis_0/ax} {Int#(32) /subis_0/foo_x} {Bool /subis_0/EN_foo} {Int#(32) /subis_0/bar} {Bool /subis_0/RadyOnTheReadMethod}
INST /subis/_element_0 . key = 35
INST /subis/_element_0 . ancestors = / /subis /subis/_element_0
INST /subis/_element_0 . name bsv = _element_0
INST /subis/_element_0 . name synth = subis_0
INST /subis/_element_0 . path bsv = /subis/_element_0
INST /subis/_element_0 . path synth = /subis_0
INST /subis/_element_0 . parent = /subis
INST /subis/_element_0 . signals = /subis/_element_0/CLK /subis/_element_0/EN_foo /subis/_element_0/RST_N /subis/_element_0/RadyOnTheReadMethod /subis/_element_0/ax /subis/_element_0/bar /subis/_element_0/foo_x
INST /subis/_element_0 . predsignals = 
INST /subis/_element_0 . bodysignals = 
INST /subis/_element_0 . predmethods = 
INST /subis/_element_0 . bodymethods = 
INST /subis/_element_0 . portmethods = /subis/_element_0.RDY_bar /subis/_element_0.bar /subis/_element_0.foo
got path INST /subis/_element_0/barx
INST /subis/_element_0/barx . kind = Prim
INST /subis/_element_0/barx . position = Test2.bsv 42 18
INST /subis/_element_0/barx . module = mkSub
INST /subis/_element_0/barx . class = VInst
INST /subis/_element_0/barx . hiertree = vInst77 {barx  Reg#(Bit#(3))} {prim leaf}
INST /subis/_element_0/barx . wave_format = {Bit#(3) {/subis_0/barx$D_IN}} {Bool {/subis_0/barx$EN}} {Bit#(3) /subis_0/barx}
INST /subis/_element_0/barx . key = 38
INST /subis/_element_0/barx . ancestors = / /subis /subis/_element_0 /subis/_element_0/barx
INST /subis/_element_0/barx . name bsv = barx
INST /subis/_element_0/barx . name synth = barx
INST /subis/_element_0/barx . path bsv = /subis/_element_0/barx
INST /subis/_element_0/barx . path synth = /subis_0/barx
INST /subis/_element_0/barx . parent = /subis/_element_0
INST /subis/_element_0/barx . signals = /subis/_element_0/barx/CLK /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN /subis/_element_0/barx/Q_OUT /subis/_element_0/barx/RST
INST /subis/_element_0/barx . predsignals = 
INST /subis/_element_0/barx . bodysignals = 
INST /subis/_element_0/barx . predmethods = 
INST /subis/_element_0/barx . bodymethods = 
INST /subis/_element_0/barx . portmethods = /subis/_element_0/barx.read /subis/_element_0/barx.write
got path INST /subis/_element_0/foo2
INST /subis/_element_0/foo2 . kind = Prim
INST /subis/_element_0/foo2 . position = Test2.bsv 41 14
INST /subis/_element_0/foo2 . module = mkSub
INST /subis/_element_0/foo2 . class = VInst
INST /subis/_element_0/foo2 . hiertree = vInst76 {foo2  Reg#(Int#(32))} {prim leaf}
INST /subis/_element_0/foo2 . wave_format = {Int#(32) {/subis_0/foo2$D_IN}} {Bool {/subis_0/foo2$EN}} {Int#(32) /subis_0/foo2}
INST /subis/_element_0/foo2 . key = 37
INST /subis/_element_0/foo2 . ancestors = / /subis /subis/_element_0 /subis/_element_0/foo2
INST /subis/_element_0/foo2 . name bsv = foo2
INST /subis/_element_0/foo2 . name synth = foo2
INST /subis/_element_0/foo2 . path bsv = /subis/_element_0/foo2
INST /subis/_element_0/foo2 . path synth = /subis_0/foo2
INST /subis/_element_0/foo2 . parent = /subis/_element_0
INST /subis/_element_0/foo2 . signals = /subis/_element_0/foo2/CLK /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN /subis/_element_0/foo2/Q_OUT /subis/_element_0/foo2/RST
INST /subis/_element_0/foo2 . predsignals = 
INST /subis/_element_0/foo2 . bodysignals = 
INST /subis/_element_0/foo2 . predmethods = 
INST /subis/_element_0/foo2 . bodymethods = 
INST /subis/_element_0/foo2 . portmethods = /subis/_element_0/foo2.read /subis/_element_0/foo2.write
got path INST /subis/_element_1
INST /subis/_element_1 . kind = Synth
INST /subis/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /subis/_element_1 . module = mkSub
INST /subis/_element_1 . class = VInst
INST /subis/_element_1 . hiertree = vInst75 {_element_1  Sub_Ifc} {synth branch}
INST /subis/_element_1 . wave_format = {Bit#(3) /subis_1/ax} {Int#(32) /subis_1/foo_x} {Bool /subis_1/EN_foo} {Int#(32) /subis_1/bar} {Bool /subis_1/RadyOnTheReadMethod}
INST /subis/_element_1 . key = 36
INST /subis/_element_1 . ancestors = / /subis /subis/_element_1
INST /subis/_element_1 . name bsv = _element_1
INST /subis/_element_1 . name synth = subis_1
INST /subis/_element_1 . path bsv = /subis/_element_1
INST /subis/_element_1 . path synth = /subis_1
INST /subis/_element_1 . parent = /subis
INST /subis/_element_1 . signals = /subis/_element_1/CLK /subis/_element_1/EN_foo /subis/_element_1/RST_N /subis/_element_1/RadyOnTheReadMethod /subis/_element_1/ax /subis/_element_1/bar /subis/_element_1/foo_x
INST /subis/_element_1 . predsignals = 
INST /subis/_element_1 . bodysignals = 
INST /subis/_element_1 . predmethods = 
INST /subis/_element_1 . bodymethods = 
INST /subis/_element_1 . portmethods = /subis/_element_1.RDY_bar /subis/_element_1.bar /subis/_element_1.foo
got path INST /subis/_element_1/barx
INST /subis/_element_1/barx . kind = Prim
INST /subis/_element_1/barx . position = Test2.bsv 42 18
INST /subis/_element_1/barx . module = mkSub
INST /subis/_element_1/barx . class = VInst
INST /subis/_element_1/barx . hiertree = vInst79 {barx  Reg#(Bit#(3))} {prim leaf}
INST /subis/_element_1/barx . wave_format = {Bit#(3) {/subis_1/barx$D_IN}} {Bool {/subis_1/barx$EN}} {Bit#(3) /subis_1/barx}
INST /subis/_element_1/barx . key = 40
INST /subis/_element_1/barx . ancestors = / /subis /subis/_element_1 /subis/_element_1/barx
INST /subis/_element_1/barx . name bsv = barx
INST /subis/_element_1/barx . name synth = barx
INST /subis/_element_1/barx . path bsv = /subis/_element_1/barx
INST /subis/_element_1/barx . path synth = /subis_1/barx
INST /subis/_element_1/barx . parent = /subis/_element_1
INST /subis/_element_1/barx . signals = /subis/_element_1/barx/CLK /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN /subis/_element_1/barx/Q_OUT /subis/_element_1/barx/RST
INST /subis/_element_1/barx . predsignals = 
INST /subis/_element_1/barx . bodysignals = 
INST /subis/_element_1/barx . predmethods = 
INST /subis/_element_1/barx . bodymethods = 
INST /subis/_element_1/barx . portmethods = /subis/_element_1/barx.read /subis/_element_1/barx.write
got path INST /subis/_element_1/foo2
INST /subis/_element_1/foo2 . kind = Prim
INST /subis/_element_1/foo2 . position = Test2.bsv 41 14
INST /subis/_element_1/foo2 . module = mkSub
INST /subis/_element_1/foo2 . class = VInst
INST /subis/_element_1/foo2 . hiertree = vInst78 {foo2  Reg#(Int#(32))} {prim leaf}
INST /subis/_element_1/foo2 . wave_format = {Int#(32) {/subis_1/foo2$D_IN}} {Bool {/subis_1/foo2$EN}} {Int#(32) /subis_1/foo2}
INST /subis/_element_1/foo2 . key = 39
INST /subis/_element_1/foo2 . ancestors = / /subis /subis/_element_1 /subis/_element_1/foo2
INST /subis/_element_1/foo2 . name bsv = foo2
INST /subis/_element_1/foo2 . name synth = foo2
INST /subis/_element_1/foo2 . path bsv = /subis/_element_1/foo2
INST /subis/_element_1/foo2 . path synth = /subis_1/foo2
INST /subis/_element_1/foo2 . parent = /subis/_element_1
INST /subis/_element_1/foo2 . signals = /subis/_element_1/foo2/CLK /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN /subis/_element_1/foo2/Q_OUT /subis/_element_1/foo2/RST
INST /subis/_element_1/foo2 . predsignals = 
INST /subis/_element_1/foo2 . bodysignals = 
INST /subis/_element_1/foo2 . predmethods = 
INST /subis/_element_1/foo2 . bodymethods = 
INST /subis/_element_1/foo2 . portmethods = /subis/_element_1/foo2.read /subis/_element_1/foo2.write
got path INST /xx
INST /xx . kind = Inst
INST /xx . position = Test2.bsv 17 25
INST /xx . module = mkTest
INST /xx . class = VInst
INST /xx . hiertree = vInst43 xx {}
INST /xx . wave_format = 
INST /xx . key = 4
INST /xx . ancestors = / /xx
INST /xx . name bsv = xx
INST /xx . name synth = xx
INST /xx . path bsv = /xx
INST /xx . path synth = /
INST /xx . parent = /
INST /xx . signals = 
INST /xx . predsignals = 
INST /xx . bodysignals = 
INST /xx . predmethods = 
INST /xx . bodymethods = 
INST /xx . portmethods = 
got path INST /xx/_element_0
INST /xx/_element_0 . kind = Prim
INST /xx/_element_0 . position = %/Libraries/List.bs 764 4 {Library List}
INST /xx/_element_0 . module = mkTest
INST /xx/_element_0 . class = VInst
INST /xx/_element_0 . hiertree = vInst56 {_element_0  Foo#(Bar)} {prim leaf}
INST /xx/_element_0 . wave_format = {Int#(32) /xx_0/V} {Inout#(Test::Bar) /xx_0/I_IN} {Test::Bar /xx_0/WVAL} {Bool /xx_0/WSET} {Test::Bar /xx_0/WGET} {Bool /xx_0/WHAS} {Inout#(Bool) /xx_0/I_OUT}
INST /xx/_element_0 . key = 17
INST /xx/_element_0 . ancestors = / /xx /xx/_element_0
INST /xx/_element_0 . name bsv = _element_0
INST /xx/_element_0 . name synth = xx_0
INST /xx/_element_0 . path bsv = /xx/_element_0
INST /xx/_element_0 . path synth = /xx_0
INST /xx/_element_0 . parent = /xx
INST /xx/_element_0 . signals = /xx/_element_0/I_IN /xx/_element_0/I_OUT /xx/_element_0/V /xx/_element_0/WGET /xx/_element_0/WHAS /xx/_element_0/WSET /xx/_element_0/WVAL
INST /xx/_element_0 . predsignals = 
INST /xx/_element_0 . bodysignals = 
INST /xx/_element_0 . predmethods = 
INST /xx/_element_0 . bodymethods = 
INST /xx/_element_0 . portmethods = /xx/_element_0.wget /xx/_element_0.whas /xx/_element_0.wset
got path INST /xx/_element_1
INST /xx/_element_1 . kind = Prim
INST /xx/_element_1 . position = %/Libraries/List.bs 764 4 {Library List}
INST /xx/_element_1 . module = mkTest
INST /xx/_element_1 . class = VInst
INST /xx/_element_1 . hiertree = vInst57 {_element_1  Foo#(Bar)} {prim leaf}
INST /xx/_element_1 . wave_format = {Int#(32) /xx_1/V} {Inout#(Test::Bar) /xx_1/I_IN} {Test::Bar /xx_1/WVAL} {Bool /xx_1/WSET} {Test::Bar /xx_1/WGET} {Bool /xx_1/WHAS} {Inout#(Bool) /xx_1/I_OUT}
INST /xx/_element_1 . key = 18
INST /xx/_element_1 . ancestors = / /xx /xx/_element_1
INST /xx/_element_1 . name bsv = _element_1
INST /xx/_element_1 . name synth = xx_1
INST /xx/_element_1 . path bsv = /xx/_element_1
INST /xx/_element_1 . path synth = /xx_1
INST /xx/_element_1 . parent = /xx
INST /xx/_element_1 . signals = /xx/_element_1/I_IN /xx/_element_1/I_OUT /xx/_element_1/V /xx/_element_1/WGET /xx/_element_1/WHAS /xx/_element_1/WSET /xx/_element_1/WVAL
INST /xx/_element_1 . predsignals = 
INST /xx/_element_1 . bodysignals = 
INST /xx/_element_1 . predmethods = 
INST /xx/_element_1 . bodymethods = 
INST /xx/_element_1 . portmethods = /xx/_element_1.wget /xx/_element_1.whas /xx/_element_1.wset
got path INST /y
INST /y . kind = Inst
INST /y . position = Test2.bsv 9 25
INST /y . module = mkTest
INST /y . class = VInst
INST /y . hiertree = vInst41 y {}
INST /y . wave_format = 
INST /y . key = 2
INST /y . ancestors = / /y
INST /y . name bsv = y
INST /y . name synth = y
INST /y . path bsv = /y
INST /y . path synth = /
INST /y . parent = /
INST /y . signals = 
INST /y . predsignals = 
INST /y . bodysignals = 
INST /y . predmethods = 
INST /y . bodymethods = 
INST /y . portmethods = 
got path INST /y/_element_0
INST /y/_element_0 . kind = Prim
INST /y/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_0 . module = mkTest
INST /y/_element_0 . class = VInst
INST /y/_element_0 . hiertree = vInst47 {_element_0  Reg#(Int#(32))} {prim leaf}
INST /y/_element_0 . wave_format = {Int#(32) {/y_0$D_IN}} {Bool {/y_0$EN}} {Int#(32) /y_0}
INST /y/_element_0 . key = 8
INST /y/_element_0 . ancestors = / /y /y/_element_0
INST /y/_element_0 . name bsv = _element_0
INST /y/_element_0 . name synth = y_0
INST /y/_element_0 . path bsv = /y/_element_0
INST /y/_element_0 . path synth = /y_0
INST /y/_element_0 . parent = /y
INST /y/_element_0 . signals = /y/_element_0/CLK /y/_element_0/D_IN /y/_element_0/EN /y/_element_0/Q_OUT
INST /y/_element_0 . predsignals = 
INST /y/_element_0 . bodysignals = 
INST /y/_element_0 . predmethods = 
INST /y/_element_0 . bodymethods = 
INST /y/_element_0 . portmethods = /y/_element_0.read /y/_element_0.write
got path INST /y/_element_1
INST /y/_element_1 . kind = Prim
INST /y/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_1 . module = mkTest
INST /y/_element_1 . class = VInst
INST /y/_element_1 . hiertree = vInst48 {_element_1  Reg#(Int#(32))} {prim leaf}
INST /y/_element_1 . wave_format = {Int#(32) {/y_1$D_IN}} {Bool {/y_1$EN}} {Int#(32) /y_1}
INST /y/_element_1 . key = 9
INST /y/_element_1 . ancestors = / /y /y/_element_1
INST /y/_element_1 . name bsv = _element_1
INST /y/_element_1 . name synth = y_1
INST /y/_element_1 . path bsv = /y/_element_1
INST /y/_element_1 . path synth = /y_1
INST /y/_element_1 . parent = /y
INST /y/_element_1 . signals = /y/_element_1/CLK /y/_element_1/D_IN /y/_element_1/EN /y/_element_1/Q_OUT
INST /y/_element_1 . predsignals = 
INST /y/_element_1 . bodysignals = 
INST /y/_element_1 . predmethods = 
INST /y/_element_1 . bodymethods = 
INST /y/_element_1 . portmethods = /y/_element_1.read /y/_element_1.write
got path INST /y/_element_2
INST /y/_element_2 . kind = Prim
INST /y/_element_2 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_2 . module = mkTest
INST /y/_element_2 . class = VInst
INST /y/_element_2 . hiertree = vInst49 {_element_2  Reg#(Int#(32))} {prim leaf}
INST /y/_element_2 . wave_format = {Int#(32) {/y_2$D_IN}} {Bool {/y_2$EN}} {Int#(32) /y_2}
INST /y/_element_2 . key = 10
INST /y/_element_2 . ancestors = / /y /y/_element_2
INST /y/_element_2 . name bsv = _element_2
INST /y/_element_2 . name synth = y_2
INST /y/_element_2 . path bsv = /y/_element_2
INST /y/_element_2 . path synth = /y_2
INST /y/_element_2 . parent = /y
INST /y/_element_2 . signals = /y/_element_2/CLK /y/_element_2/D_IN /y/_element_2/EN /y/_element_2/Q_OUT
INST /y/_element_2 . predsignals = 
INST /y/_element_2 . bodysignals = 
INST /y/_element_2 . predmethods = 
INST /y/_element_2 . bodymethods = 
INST /y/_element_2 . portmethods = /y/_element_2.read /y/_element_2.write
got path INST /y/_element_3
INST /y/_element_3 . kind = Prim
INST /y/_element_3 . position = %/Libraries/List.bs 727 4 {Library List}
INST /y/_element_3 . module = mkTest
INST /y/_element_3 . class = VInst
INST /y/_element_3 . hiertree = vInst50 {_element_3  Reg#(Int#(32))} {prim leaf}
INST /y/_element_3 . wave_format = {Int#(32) {/y_3$D_IN}} {Bool {/y_3$EN}} {Int#(32) /y_3}
INST /y/_element_3 . key = 11
INST /y/_element_3 . ancestors = / /y /y/_element_3
INST /y/_element_3 . name bsv = _element_3
INST /y/_element_3 . name synth = y_3
INST /y/_element_3 . path bsv = /y/_element_3
INST /y/_element_3 . path synth = /y_3
INST /y/_element_3 . parent = /y
INST /y/_element_3 . signals = /y/_element_3/CLK /y/_element_3/D_IN /y/_element_3/EN /y/_element_3/Q_OUT
INST /y/_element_3 . predsignals = 
INST /y/_element_3 . bodysignals = 
INST /y/_element_3 . predmethods = 
INST /y/_element_3 . bodymethods = 
INST /y/_element_3 . portmethods = /y/_element_3.read /y/_element_3.write
got path INST /zw
INST /zw . kind = Inst
INST /zw . position = Test2.bsv 14 25
INST /zw . module = mkTest
INST /zw . class = VInst
INST /zw . hiertree = vInst42 zw {}
INST /zw . wave_format = 
INST /zw . key = 3
INST /zw . ancestors = / /zw
INST /zw . name bsv = zw
INST /zw . name synth = zw
INST /zw . path bsv = /zw
INST /zw . path synth = /
INST /zw . parent = /
INST /zw . signals = 
INST /zw . predsignals = 
INST /zw . bodysignals = 
INST /zw . predmethods = 
INST /zw . bodymethods = 
INST /zw . portmethods = 
got path INST /zw/_element_0
INST /zw/_element_0 . kind = Prim
INST /zw/_element_0 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_0 . module = mkTest
INST /zw/_element_0 . class = VInst
INST /zw/_element_0 . hiertree = vInst51 {_element_0  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_0 . wave_format = {Int#(32) {/zw_0$D_IN}} {Bool {/zw_0$EN}} {Int#(32) /zw_0}
INST /zw/_element_0 . key = 12
INST /zw/_element_0 . ancestors = / /zw /zw/_element_0
INST /zw/_element_0 . name bsv = _element_0
INST /zw/_element_0 . name synth = zw_0
INST /zw/_element_0 . path bsv = /zw/_element_0
INST /zw/_element_0 . path synth = /zw_0
INST /zw/_element_0 . parent = /zw
INST /zw/_element_0 . signals = /zw/_element_0/CLK /zw/_element_0/D_IN /zw/_element_0/EN /zw/_element_0/Q_OUT /zw/_element_0/RST
INST /zw/_element_0 . predsignals = 
INST /zw/_element_0 . bodysignals = 
INST /zw/_element_0 . predmethods = 
INST /zw/_element_0 . bodymethods = 
INST /zw/_element_0 . portmethods = /zw/_element_0.read /zw/_element_0.write
got path INST /zw/_element_1
INST /zw/_element_1 . kind = Prim
INST /zw/_element_1 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_1 . module = mkTest
INST /zw/_element_1 . class = VInst
INST /zw/_element_1 . hiertree = vInst52 {_element_1  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_1 . wave_format = {Int#(32) {/zw_1$D_IN}} {Bool {/zw_1$EN}} {Int#(32) /zw_1}
INST /zw/_element_1 . key = 13
INST /zw/_element_1 . ancestors = / /zw /zw/_element_1
INST /zw/_element_1 . name bsv = _element_1
INST /zw/_element_1 . name synth = zw_1
INST /zw/_element_1 . path bsv = /zw/_element_1
INST /zw/_element_1 . path synth = /zw_1
INST /zw/_element_1 . parent = /zw
INST /zw/_element_1 . signals = /zw/_element_1/CLK /zw/_element_1/D_IN /zw/_element_1/EN /zw/_element_1/Q_OUT /zw/_element_1/RST
INST /zw/_element_1 . predsignals = 
INST /zw/_element_1 . bodysignals = 
INST /zw/_element_1 . predmethods = 
INST /zw/_element_1 . bodymethods = 
INST /zw/_element_1 . portmethods = /zw/_element_1.read /zw/_element_1.write
got path INST /zw/_element_2
INST /zw/_element_2 . kind = Prim
INST /zw/_element_2 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_2 . module = mkTest
INST /zw/_element_2 . class = VInst
INST /zw/_element_2 . hiertree = vInst53 {_element_2  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_2 . wave_format = {Int#(32) {/zw_2$D_IN}} {Bool {/zw_2$EN}} {Int#(32) /zw_2}
INST /zw/_element_2 . key = 14
INST /zw/_element_2 . ancestors = / /zw /zw/_element_2
INST /zw/_element_2 . name bsv = _element_2
INST /zw/_element_2 . name synth = zw_2
INST /zw/_element_2 . path bsv = /zw/_element_2
INST /zw/_element_2 . path synth = /zw_2
INST /zw/_element_2 . parent = /zw
INST /zw/_element_2 . signals = /zw/_element_2/CLK /zw/_element_2/D_IN /zw/_element_2/EN /zw/_element_2/Q_OUT /zw/_element_2/RST
INST /zw/_element_2 . predsignals = 
INST /zw/_element_2 . bodysignals = 
INST /zw/_element_2 . predmethods = 
INST /zw/_element_2 . bodymethods = 
INST /zw/_element_2 . portmethods = /zw/_element_2.read /zw/_element_2.write
got path INST /zw/_element_3
INST /zw/_element_3 . kind = Prim
INST /zw/_element_3 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_3 . module = mkTest
INST /zw/_element_3 . class = VInst
INST /zw/_element_3 . hiertree = vInst54 {_element_3  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_3 . wave_format = {Int#(32) {/zw_3$D_IN}} {Bool {/zw_3$EN}} {Int#(32) /zw_3}
INST /zw/_element_3 . key = 15
INST /zw/_element_3 . ancestors = / /zw /zw/_element_3
INST /zw/_element_3 . name bsv = _element_3
INST /zw/_element_3 . name synth = zw_3
INST /zw/_element_3 . path bsv = /zw/_element_3
INST /zw/_element_3 . path synth = /zw_3
INST /zw/_element_3 . parent = /zw
INST /zw/_element_3 . signals = /zw/_element_3/CLK /zw/_element_3/D_IN /zw/_element_3/EN /zw/_element_3/Q_OUT /zw/_element_3/RST
INST /zw/_element_3 . predsignals = 
INST /zw/_element_3 . bodysignals = 
INST /zw/_element_3 . predmethods = 
INST /zw/_element_3 . bodymethods = 
INST /zw/_element_3 . portmethods = /zw/_element_3.read /zw/_element_3.write
got path INST /zw/_element_4
INST /zw/_element_4 . kind = Prim
INST /zw/_element_4 . position = %/Libraries/List.bs 727 4 {Library List}
INST /zw/_element_4 . module = mkTest
INST /zw/_element_4 . class = VInst
INST /zw/_element_4 . hiertree = vInst55 {_element_4  Reg#(Int#(32))} {prim leaf}
INST /zw/_element_4 . wave_format = {Int#(32) {/zw_4$D_IN}} {Bool {/zw_4$EN}} {Int#(32) /zw_4}
INST /zw/_element_4 . key = 16
INST /zw/_element_4 . ancestors = / /zw /zw/_element_4
INST /zw/_element_4 . name bsv = _element_4
INST /zw/_element_4 . name synth = zw_4
INST /zw/_element_4 . path bsv = /zw/_element_4
INST /zw/_element_4 . path synth = /zw_4
INST /zw/_element_4 . parent = /zw
INST /zw/_element_4 . signals = /zw/_element_4/CLK /zw/_element_4/D_IN /zw/_element_4/EN /zw/_element_4/Q_OUT /zw/_element_4/RST
INST /zw/_element_4 . predsignals = 
INST /zw/_element_4 . bodysignals = 
INST /zw/_element_4 . predmethods = 
INST /zw/_element_4 . bodymethods = 
INST /zw/_element_4 . portmethods = /zw/_element_4.read /zw/_element_4.write
starting method testing
RULE  /subis/_element_0 show = /subis/_element_0.bar()
RULE  /subis/_element_0 name = bar
RULE  /subis/_element_0 kind = Method
RULE  /subis/_element_0 wave_format = {Bool /subis_0/CAN_FIRE_bar} {Bool /subis_0/WILL_FIRE_bar}
RULE  /subis/_element_0 predmethods = 
RULE  /subis/_element_0 bodymethods = /subis/_element_0/barx.read /subis/_element_0/foo2.read
RULE  /subis/_element_0 signals = /subis/_element_0/CAN_FIRE_bar /subis/_element_0/WILL_FIRE_bar
RULE  /subis/_element_0 predsignals = 
RULE  /subis/_element_0 bodysignals = /subis/_element_0/barx/Q_OUT /subis/_element_0/foo2/Q_OUT
----
RULE  /subis/_element_0 show = /subis/_element_0.foo()
RULE  /subis/_element_0 name = foo
RULE  /subis/_element_0 kind = Method
RULE  /subis/_element_0 wave_format = {Bool /subis_0/CAN_FIRE_foo} {Bool /subis_0/WILL_FIRE_foo}
RULE  /subis/_element_0 predmethods = 
RULE  /subis/_element_0 bodymethods = /subis/_element_0/foo2.write
RULE  /subis/_element_0 signals = /subis/_element_0/CAN_FIRE_foo /subis/_element_0/WILL_FIRE_foo
RULE  /subis/_element_0 predsignals = 
RULE  /subis/_element_0 bodysignals = /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN
----
RULE  /subis/_element_1 show = /subis/_element_1.bar()
RULE  /subis/_element_1 name = bar
RULE  /subis/_element_1 kind = Method
RULE  /subis/_element_1 wave_format = {Bool /subis_1/CAN_FIRE_bar} {Bool /subis_1/WILL_FIRE_bar}
RULE  /subis/_element_1 predmethods = 
RULE  /subis/_element_1 bodymethods = /subis/_element_1/barx.read /subis/_element_1/foo2.read
RULE  /subis/_element_1 signals = /subis/_element_1/CAN_FIRE_bar /subis/_element_1/WILL_FIRE_bar
RULE  /subis/_element_1 predsignals = 
RULE  /subis/_element_1 bodysignals = /subis/_element_1/barx/Q_OUT /subis/_element_1/foo2/Q_OUT
----
RULE  /subis/_element_1 show = /subis/_element_1.foo()
RULE  /subis/_element_1 name = foo
RULE  /subis/_element_1 kind = Method
RULE  /subis/_element_1 wave_format = {Bool /subis_1/CAN_FIRE_foo} {Bool /subis_1/WILL_FIRE_foo}
RULE  /subis/_element_1 predmethods = 
RULE  /subis/_element_1 bodymethods = /subis/_element_1/foo2.write
RULE  /subis/_element_1 signals = /subis/_element_1/CAN_FIRE_foo /subis/_element_1/WILL_FIRE_foo
RULE  /subis/_element_1 predsignals = 
RULE  /subis/_element_1 bodysignals = /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN
----
starting signaltest
SIG /CLK . kind = Signal
SIG /CLK . name = CLK
SIG /CLK . path = /CLK
SIG /CLK . type = Clock
SIG /CLK . class = VSignal
SIG /CLK . wave_format = {Clock /CLK}
SIG /CLK . position = 
SIG /CLK . used_by 
SIG CLK . inst = /
SIG /Loop/Body_0/aa_0/CLK . kind = Signal
SIG /Loop/Body_0/aa_0/CLK . name = CLK
SIG /Loop/Body_0/aa_0/CLK . path = /Loop/Body_0/aa_0/CLK
SIG /Loop/Body_0/aa_0/CLK . type = Clock
SIG /Loop/Body_0/aa_0/CLK . class = VSignal
SIG /Loop/Body_0/aa_0/CLK . wave_format = 
SIG /Loop/Body_0/aa_0/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/CLK . used_by 
SIG CLK . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/D_IN . kind = Signal
SIG /Loop/Body_0/aa_0/D_IN . name = D_IN
SIG /Loop/Body_0/aa_0/D_IN . path = /Loop/Body_0/aa_0/D_IN
SIG /Loop/Body_0/aa_0/D_IN . type = Int#(32)
SIG /Loop/Body_0/aa_0/D_IN . class = VSignal
SIG /Loop/Body_0/aa_0/D_IN . wave_format = {Int#(32) {/aa_0$D_IN}}
SIG /Loop/Body_0/aa_0/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/EN . kind = Signal
SIG /Loop/Body_0/aa_0/EN . name = EN
SIG /Loop/Body_0/aa_0/EN . path = /Loop/Body_0/aa_0/EN
SIG /Loop/Body_0/aa_0/EN . type = Bool
SIG /Loop/Body_0/aa_0/EN . class = VSignal
SIG /Loop/Body_0/aa_0/EN . wave_format = {Bool {/aa_0$EN}}
SIG /Loop/Body_0/aa_0/EN . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/EN . used_by 
SIG EN . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/aa_0/Q_OUT . kind = Signal
SIG /Loop/Body_0/aa_0/Q_OUT . name = Q_OUT
SIG /Loop/Body_0/aa_0/Q_OUT . path = /Loop/Body_0/aa_0/Q_OUT
SIG /Loop/Body_0/aa_0/Q_OUT . type = Int#(32)
SIG /Loop/Body_0/aa_0/Q_OUT . class = VSignal
SIG /Loop/Body_0/aa_0/Q_OUT . wave_format = {Int#(32) /aa_0}
SIG /Loop/Body_0/aa_0/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_0/aa_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_0/aa_0
SIG /Loop/Body_0/bb_0/CLK . kind = Signal
SIG /Loop/Body_0/bb_0/CLK . name = CLK
SIG /Loop/Body_0/bb_0/CLK . path = /Loop/Body_0/bb_0/CLK
SIG /Loop/Body_0/bb_0/CLK . type = Clock
SIG /Loop/Body_0/bb_0/CLK . class = VSignal
SIG /Loop/Body_0/bb_0/CLK . wave_format = 
SIG /Loop/Body_0/bb_0/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/CLK . used_by 
SIG CLK . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/D_IN . kind = Signal
SIG /Loop/Body_0/bb_0/D_IN . name = D_IN
SIG /Loop/Body_0/bb_0/D_IN . path = /Loop/Body_0/bb_0/D_IN
SIG /Loop/Body_0/bb_0/D_IN . type = Int#(32)
SIG /Loop/Body_0/bb_0/D_IN . class = VSignal
SIG /Loop/Body_0/bb_0/D_IN . wave_format = {Int#(32) {/bb_0$D_IN}}
SIG /Loop/Body_0/bb_0/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/EN . kind = Signal
SIG /Loop/Body_0/bb_0/EN . name = EN
SIG /Loop/Body_0/bb_0/EN . path = /Loop/Body_0/bb_0/EN
SIG /Loop/Body_0/bb_0/EN . type = Bool
SIG /Loop/Body_0/bb_0/EN . class = VSignal
SIG /Loop/Body_0/bb_0/EN . wave_format = {Bool {/bb_0$EN}}
SIG /Loop/Body_0/bb_0/EN . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/EN . used_by 
SIG EN . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_0/bb_0/Q_OUT . kind = Signal
SIG /Loop/Body_0/bb_0/Q_OUT . name = Q_OUT
SIG /Loop/Body_0/bb_0/Q_OUT . path = /Loop/Body_0/bb_0/Q_OUT
SIG /Loop/Body_0/bb_0/Q_OUT . type = Int#(32)
SIG /Loop/Body_0/bb_0/Q_OUT . class = VSignal
SIG /Loop/Body_0/bb_0/Q_OUT . wave_format = {Int#(32) /bb_0}
SIG /Loop/Body_0/bb_0/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_0/bb_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_0/bb_0
SIG /Loop/Body_1/aa_1/CLK . kind = Signal
SIG /Loop/Body_1/aa_1/CLK . name = CLK
SIG /Loop/Body_1/aa_1/CLK . path = /Loop/Body_1/aa_1/CLK
SIG /Loop/Body_1/aa_1/CLK . type = Clock
SIG /Loop/Body_1/aa_1/CLK . class = VSignal
SIG /Loop/Body_1/aa_1/CLK . wave_format = 
SIG /Loop/Body_1/aa_1/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/CLK . used_by 
SIG CLK . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/D_IN . kind = Signal
SIG /Loop/Body_1/aa_1/D_IN . name = D_IN
SIG /Loop/Body_1/aa_1/D_IN . path = /Loop/Body_1/aa_1/D_IN
SIG /Loop/Body_1/aa_1/D_IN . type = Int#(32)
SIG /Loop/Body_1/aa_1/D_IN . class = VSignal
SIG /Loop/Body_1/aa_1/D_IN . wave_format = {Int#(32) {/aa_1$D_IN}}
SIG /Loop/Body_1/aa_1/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/EN . kind = Signal
SIG /Loop/Body_1/aa_1/EN . name = EN
SIG /Loop/Body_1/aa_1/EN . path = /Loop/Body_1/aa_1/EN
SIG /Loop/Body_1/aa_1/EN . type = Bool
SIG /Loop/Body_1/aa_1/EN . class = VSignal
SIG /Loop/Body_1/aa_1/EN . wave_format = {Bool {/aa_1$EN}}
SIG /Loop/Body_1/aa_1/EN . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/EN . used_by 
SIG EN . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/aa_1/Q_OUT . kind = Signal
SIG /Loop/Body_1/aa_1/Q_OUT . name = Q_OUT
SIG /Loop/Body_1/aa_1/Q_OUT . path = /Loop/Body_1/aa_1/Q_OUT
SIG /Loop/Body_1/aa_1/Q_OUT . type = Int#(32)
SIG /Loop/Body_1/aa_1/Q_OUT . class = VSignal
SIG /Loop/Body_1/aa_1/Q_OUT . wave_format = {Int#(32) /aa_1}
SIG /Loop/Body_1/aa_1/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_1/aa_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_1/aa_1
SIG /Loop/Body_1/bb_1/CLK . kind = Signal
SIG /Loop/Body_1/bb_1/CLK . name = CLK
SIG /Loop/Body_1/bb_1/CLK . path = /Loop/Body_1/bb_1/CLK
SIG /Loop/Body_1/bb_1/CLK . type = Clock
SIG /Loop/Body_1/bb_1/CLK . class = VSignal
SIG /Loop/Body_1/bb_1/CLK . wave_format = 
SIG /Loop/Body_1/bb_1/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/CLK . used_by 
SIG CLK . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/D_IN . kind = Signal
SIG /Loop/Body_1/bb_1/D_IN . name = D_IN
SIG /Loop/Body_1/bb_1/D_IN . path = /Loop/Body_1/bb_1/D_IN
SIG /Loop/Body_1/bb_1/D_IN . type = Int#(32)
SIG /Loop/Body_1/bb_1/D_IN . class = VSignal
SIG /Loop/Body_1/bb_1/D_IN . wave_format = {Int#(32) {/bb_1$D_IN}}
SIG /Loop/Body_1/bb_1/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/EN . kind = Signal
SIG /Loop/Body_1/bb_1/EN . name = EN
SIG /Loop/Body_1/bb_1/EN . path = /Loop/Body_1/bb_1/EN
SIG /Loop/Body_1/bb_1/EN . type = Bool
SIG /Loop/Body_1/bb_1/EN . class = VSignal
SIG /Loop/Body_1/bb_1/EN . wave_format = {Bool {/bb_1$EN}}
SIG /Loop/Body_1/bb_1/EN . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/EN . used_by 
SIG EN . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_1/bb_1/Q_OUT . kind = Signal
SIG /Loop/Body_1/bb_1/Q_OUT . name = Q_OUT
SIG /Loop/Body_1/bb_1/Q_OUT . path = /Loop/Body_1/bb_1/Q_OUT
SIG /Loop/Body_1/bb_1/Q_OUT . type = Int#(32)
SIG /Loop/Body_1/bb_1/Q_OUT . class = VSignal
SIG /Loop/Body_1/bb_1/Q_OUT . wave_format = {Int#(32) /bb_1}
SIG /Loop/Body_1/bb_1/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_1/bb_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_1/bb_1
SIG /Loop/Body_2/aa_2/CLK . kind = Signal
SIG /Loop/Body_2/aa_2/CLK . name = CLK
SIG /Loop/Body_2/aa_2/CLK . path = /Loop/Body_2/aa_2/CLK
SIG /Loop/Body_2/aa_2/CLK . type = Clock
SIG /Loop/Body_2/aa_2/CLK . class = VSignal
SIG /Loop/Body_2/aa_2/CLK . wave_format = 
SIG /Loop/Body_2/aa_2/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/CLK . used_by 
SIG CLK . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/D_IN . kind = Signal
SIG /Loop/Body_2/aa_2/D_IN . name = D_IN
SIG /Loop/Body_2/aa_2/D_IN . path = /Loop/Body_2/aa_2/D_IN
SIG /Loop/Body_2/aa_2/D_IN . type = Int#(32)
SIG /Loop/Body_2/aa_2/D_IN . class = VSignal
SIG /Loop/Body_2/aa_2/D_IN . wave_format = {Int#(32) {/aa_2$D_IN}}
SIG /Loop/Body_2/aa_2/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/EN . kind = Signal
SIG /Loop/Body_2/aa_2/EN . name = EN
SIG /Loop/Body_2/aa_2/EN . path = /Loop/Body_2/aa_2/EN
SIG /Loop/Body_2/aa_2/EN . type = Bool
SIG /Loop/Body_2/aa_2/EN . class = VSignal
SIG /Loop/Body_2/aa_2/EN . wave_format = {Bool {/aa_2$EN}}
SIG /Loop/Body_2/aa_2/EN . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/EN . used_by 
SIG EN . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/aa_2/Q_OUT . kind = Signal
SIG /Loop/Body_2/aa_2/Q_OUT . name = Q_OUT
SIG /Loop/Body_2/aa_2/Q_OUT . path = /Loop/Body_2/aa_2/Q_OUT
SIG /Loop/Body_2/aa_2/Q_OUT . type = Int#(32)
SIG /Loop/Body_2/aa_2/Q_OUT . class = VSignal
SIG /Loop/Body_2/aa_2/Q_OUT . wave_format = {Int#(32) /aa_2}
SIG /Loop/Body_2/aa_2/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_2/aa_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_2/aa_2
SIG /Loop/Body_2/bb_2/CLK . kind = Signal
SIG /Loop/Body_2/bb_2/CLK . name = CLK
SIG /Loop/Body_2/bb_2/CLK . path = /Loop/Body_2/bb_2/CLK
SIG /Loop/Body_2/bb_2/CLK . type = Clock
SIG /Loop/Body_2/bb_2/CLK . class = VSignal
SIG /Loop/Body_2/bb_2/CLK . wave_format = 
SIG /Loop/Body_2/bb_2/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/CLK . used_by 
SIG CLK . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/D_IN . kind = Signal
SIG /Loop/Body_2/bb_2/D_IN . name = D_IN
SIG /Loop/Body_2/bb_2/D_IN . path = /Loop/Body_2/bb_2/D_IN
SIG /Loop/Body_2/bb_2/D_IN . type = Int#(32)
SIG /Loop/Body_2/bb_2/D_IN . class = VSignal
SIG /Loop/Body_2/bb_2/D_IN . wave_format = {Int#(32) {/bb_2$D_IN}}
SIG /Loop/Body_2/bb_2/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/EN . kind = Signal
SIG /Loop/Body_2/bb_2/EN . name = EN
SIG /Loop/Body_2/bb_2/EN . path = /Loop/Body_2/bb_2/EN
SIG /Loop/Body_2/bb_2/EN . type = Bool
SIG /Loop/Body_2/bb_2/EN . class = VSignal
SIG /Loop/Body_2/bb_2/EN . wave_format = {Bool {/bb_2$EN}}
SIG /Loop/Body_2/bb_2/EN . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/EN . used_by 
SIG EN . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_2/bb_2/Q_OUT . kind = Signal
SIG /Loop/Body_2/bb_2/Q_OUT . name = Q_OUT
SIG /Loop/Body_2/bb_2/Q_OUT . path = /Loop/Body_2/bb_2/Q_OUT
SIG /Loop/Body_2/bb_2/Q_OUT . type = Int#(32)
SIG /Loop/Body_2/bb_2/Q_OUT . class = VSignal
SIG /Loop/Body_2/bb_2/Q_OUT . wave_format = {Int#(32) /bb_2}
SIG /Loop/Body_2/bb_2/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_2/bb_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_2/bb_2
SIG /Loop/Body_3/aa_3/CLK . kind = Signal
SIG /Loop/Body_3/aa_3/CLK . name = CLK
SIG /Loop/Body_3/aa_3/CLK . path = /Loop/Body_3/aa_3/CLK
SIG /Loop/Body_3/aa_3/CLK . type = Clock
SIG /Loop/Body_3/aa_3/CLK . class = VSignal
SIG /Loop/Body_3/aa_3/CLK . wave_format = 
SIG /Loop/Body_3/aa_3/CLK . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/CLK . used_by 
SIG CLK . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/D_IN . kind = Signal
SIG /Loop/Body_3/aa_3/D_IN . name = D_IN
SIG /Loop/Body_3/aa_3/D_IN . path = /Loop/Body_3/aa_3/D_IN
SIG /Loop/Body_3/aa_3/D_IN . type = Int#(32)
SIG /Loop/Body_3/aa_3/D_IN . class = VSignal
SIG /Loop/Body_3/aa_3/D_IN . wave_format = {Int#(32) {/aa_3$D_IN}}
SIG /Loop/Body_3/aa_3/D_IN . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/EN . kind = Signal
SIG /Loop/Body_3/aa_3/EN . name = EN
SIG /Loop/Body_3/aa_3/EN . path = /Loop/Body_3/aa_3/EN
SIG /Loop/Body_3/aa_3/EN . type = Bool
SIG /Loop/Body_3/aa_3/EN . class = VSignal
SIG /Loop/Body_3/aa_3/EN . wave_format = {Bool {/aa_3$EN}}
SIG /Loop/Body_3/aa_3/EN . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/EN . used_by 
SIG EN . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/aa_3/Q_OUT . kind = Signal
SIG /Loop/Body_3/aa_3/Q_OUT . name = Q_OUT
SIG /Loop/Body_3/aa_3/Q_OUT . path = /Loop/Body_3/aa_3/Q_OUT
SIG /Loop/Body_3/aa_3/Q_OUT . type = Int#(32)
SIG /Loop/Body_3/aa_3/Q_OUT . class = VSignal
SIG /Loop/Body_3/aa_3/Q_OUT . wave_format = {Int#(32) /aa_3}
SIG /Loop/Body_3/aa_3/Q_OUT . position = Test2.bsv 24 6
SIG /Loop/Body_3/aa_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_3/aa_3
SIG /Loop/Body_3/bb_3/CLK . kind = Signal
SIG /Loop/Body_3/bb_3/CLK . name = CLK
SIG /Loop/Body_3/bb_3/CLK . path = /Loop/Body_3/bb_3/CLK
SIG /Loop/Body_3/bb_3/CLK . type = Clock
SIG /Loop/Body_3/bb_3/CLK . class = VSignal
SIG /Loop/Body_3/bb_3/CLK . wave_format = 
SIG /Loop/Body_3/bb_3/CLK . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/CLK . used_by 
SIG CLK . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/D_IN . kind = Signal
SIG /Loop/Body_3/bb_3/D_IN . name = D_IN
SIG /Loop/Body_3/bb_3/D_IN . path = /Loop/Body_3/bb_3/D_IN
SIG /Loop/Body_3/bb_3/D_IN . type = Int#(32)
SIG /Loop/Body_3/bb_3/D_IN . class = VSignal
SIG /Loop/Body_3/bb_3/D_IN . wave_format = {Int#(32) {/bb_3$D_IN}}
SIG /Loop/Body_3/bb_3/D_IN . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/D_IN . used_by 
SIG D_IN . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/EN . kind = Signal
SIG /Loop/Body_3/bb_3/EN . name = EN
SIG /Loop/Body_3/bb_3/EN . path = /Loop/Body_3/bb_3/EN
SIG /Loop/Body_3/bb_3/EN . type = Bool
SIG /Loop/Body_3/bb_3/EN . class = VSignal
SIG /Loop/Body_3/bb_3/EN . wave_format = {Bool {/bb_3$EN}}
SIG /Loop/Body_3/bb_3/EN . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/EN . used_by 
SIG EN . inst = /Loop/Body_3/bb_3
SIG /Loop/Body_3/bb_3/Q_OUT . kind = Signal
SIG /Loop/Body_3/bb_3/Q_OUT . name = Q_OUT
SIG /Loop/Body_3/bb_3/Q_OUT . path = /Loop/Body_3/bb_3/Q_OUT
SIG /Loop/Body_3/bb_3/Q_OUT . type = Int#(32)
SIG /Loop/Body_3/bb_3/Q_OUT . class = VSignal
SIG /Loop/Body_3/bb_3/Q_OUT . wave_format = {Int#(32) /bb_3}
SIG /Loop/Body_3/bb_3/Q_OUT . position = Test2.bsv 25 6
SIG /Loop/Body_3/bb_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/Body_3/bb_3
SIG /Loop/x_0/CLK . kind = Signal
SIG /Loop/x_0/CLK . name = CLK
SIG /Loop/x_0/CLK . path = /Loop/x_0/CLK
SIG /Loop/x_0/CLK . type = Clock
SIG /Loop/x_0/CLK . class = VSignal
SIG /Loop/x_0/CLK . wave_format = 
SIG /Loop/x_0/CLK . position = Test2.bsv 20 7
SIG /Loop/x_0/CLK . used_by 
SIG CLK . inst = /Loop/x_0
SIG /Loop/x_0/D_IN . kind = Signal
SIG /Loop/x_0/D_IN . name = D_IN
SIG /Loop/x_0/D_IN . path = /Loop/x_0/D_IN
SIG /Loop/x_0/D_IN . type = Int#(32)
SIG /Loop/x_0/D_IN . class = VSignal
SIG /Loop/x_0/D_IN . wave_format = {Int#(32) {/x_0$D_IN}}
SIG /Loop/x_0/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_0/D_IN . used_by 
SIG D_IN . inst = /Loop/x_0
SIG /Loop/x_0/EN . kind = Signal
SIG /Loop/x_0/EN . name = EN
SIG /Loop/x_0/EN . path = /Loop/x_0/EN
SIG /Loop/x_0/EN . type = Bool
SIG /Loop/x_0/EN . class = VSignal
SIG /Loop/x_0/EN . wave_format = {Bool {/x_0$EN}}
SIG /Loop/x_0/EN . position = Test2.bsv 20 7
SIG /Loop/x_0/EN . used_by 
SIG EN . inst = /Loop/x_0
SIG /Loop/x_0/Q_OUT . kind = Signal
SIG /Loop/x_0/Q_OUT . name = Q_OUT
SIG /Loop/x_0/Q_OUT . path = /Loop/x_0/Q_OUT
SIG /Loop/x_0/Q_OUT . type = Int#(32)
SIG /Loop/x_0/Q_OUT . class = VSignal
SIG /Loop/x_0/Q_OUT . wave_format = {Int#(32) /x_0}
SIG /Loop/x_0/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_0/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_0
SIG /Loop/x_1/CLK . kind = Signal
SIG /Loop/x_1/CLK . name = CLK
SIG /Loop/x_1/CLK . path = /Loop/x_1/CLK
SIG /Loop/x_1/CLK . type = Clock
SIG /Loop/x_1/CLK . class = VSignal
SIG /Loop/x_1/CLK . wave_format = 
SIG /Loop/x_1/CLK . position = Test2.bsv 20 7
SIG /Loop/x_1/CLK . used_by 
SIG CLK . inst = /Loop/x_1
SIG /Loop/x_1/D_IN . kind = Signal
SIG /Loop/x_1/D_IN . name = D_IN
SIG /Loop/x_1/D_IN . path = /Loop/x_1/D_IN
SIG /Loop/x_1/D_IN . type = Int#(32)
SIG /Loop/x_1/D_IN . class = VSignal
SIG /Loop/x_1/D_IN . wave_format = {Int#(32) {/x_1$D_IN}}
SIG /Loop/x_1/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_1/D_IN . used_by 
SIG D_IN . inst = /Loop/x_1
SIG /Loop/x_1/EN . kind = Signal
SIG /Loop/x_1/EN . name = EN
SIG /Loop/x_1/EN . path = /Loop/x_1/EN
SIG /Loop/x_1/EN . type = Bool
SIG /Loop/x_1/EN . class = VSignal
SIG /Loop/x_1/EN . wave_format = {Bool {/x_1$EN}}
SIG /Loop/x_1/EN . position = Test2.bsv 20 7
SIG /Loop/x_1/EN . used_by 
SIG EN . inst = /Loop/x_1
SIG /Loop/x_1/Q_OUT . kind = Signal
SIG /Loop/x_1/Q_OUT . name = Q_OUT
SIG /Loop/x_1/Q_OUT . path = /Loop/x_1/Q_OUT
SIG /Loop/x_1/Q_OUT . type = Int#(32)
SIG /Loop/x_1/Q_OUT . class = VSignal
SIG /Loop/x_1/Q_OUT . wave_format = {Int#(32) /x_1}
SIG /Loop/x_1/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_1/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_1
SIG /Loop/x_2/CLK . kind = Signal
SIG /Loop/x_2/CLK . name = CLK
SIG /Loop/x_2/CLK . path = /Loop/x_2/CLK
SIG /Loop/x_2/CLK . type = Clock
SIG /Loop/x_2/CLK . class = VSignal
SIG /Loop/x_2/CLK . wave_format = 
SIG /Loop/x_2/CLK . position = Test2.bsv 20 7
SIG /Loop/x_2/CLK . used_by 
SIG CLK . inst = /Loop/x_2
SIG /Loop/x_2/D_IN . kind = Signal
SIG /Loop/x_2/D_IN . name = D_IN
SIG /Loop/x_2/D_IN . path = /Loop/x_2/D_IN
SIG /Loop/x_2/D_IN . type = Int#(32)
SIG /Loop/x_2/D_IN . class = VSignal
SIG /Loop/x_2/D_IN . wave_format = {Int#(32) {/x_2$D_IN}}
SIG /Loop/x_2/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_2/D_IN . used_by 
SIG D_IN . inst = /Loop/x_2
SIG /Loop/x_2/EN . kind = Signal
SIG /Loop/x_2/EN . name = EN
SIG /Loop/x_2/EN . path = /Loop/x_2/EN
SIG /Loop/x_2/EN . type = Bool
SIG /Loop/x_2/EN . class = VSignal
SIG /Loop/x_2/EN . wave_format = {Bool {/x_2$EN}}
SIG /Loop/x_2/EN . position = Test2.bsv 20 7
SIG /Loop/x_2/EN . used_by 
SIG EN . inst = /Loop/x_2
SIG /Loop/x_2/Q_OUT . kind = Signal
SIG /Loop/x_2/Q_OUT . name = Q_OUT
SIG /Loop/x_2/Q_OUT . path = /Loop/x_2/Q_OUT
SIG /Loop/x_2/Q_OUT . type = Int#(32)
SIG /Loop/x_2/Q_OUT . class = VSignal
SIG /Loop/x_2/Q_OUT . wave_format = {Int#(32) /x_2}
SIG /Loop/x_2/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_2/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_2
SIG /Loop/x_3/CLK . kind = Signal
SIG /Loop/x_3/CLK . name = CLK
SIG /Loop/x_3/CLK . path = /Loop/x_3/CLK
SIG /Loop/x_3/CLK . type = Clock
SIG /Loop/x_3/CLK . class = VSignal
SIG /Loop/x_3/CLK . wave_format = 
SIG /Loop/x_3/CLK . position = Test2.bsv 20 7
SIG /Loop/x_3/CLK . used_by 
SIG CLK . inst = /Loop/x_3
SIG /Loop/x_3/D_IN . kind = Signal
SIG /Loop/x_3/D_IN . name = D_IN
SIG /Loop/x_3/D_IN . path = /Loop/x_3/D_IN
SIG /Loop/x_3/D_IN . type = Int#(32)
SIG /Loop/x_3/D_IN . class = VSignal
SIG /Loop/x_3/D_IN . wave_format = {Int#(32) {/x_3$D_IN}}
SIG /Loop/x_3/D_IN . position = Test2.bsv 20 7
SIG /Loop/x_3/D_IN . used_by 
SIG D_IN . inst = /Loop/x_3
SIG /Loop/x_3/EN . kind = Signal
SIG /Loop/x_3/EN . name = EN
SIG /Loop/x_3/EN . path = /Loop/x_3/EN
SIG /Loop/x_3/EN . type = Bool
SIG /Loop/x_3/EN . class = VSignal
SIG /Loop/x_3/EN . wave_format = {Bool {/x_3$EN}}
SIG /Loop/x_3/EN . position = Test2.bsv 20 7
SIG /Loop/x_3/EN . used_by 
SIG EN . inst = /Loop/x_3
SIG /Loop/x_3/Q_OUT . kind = Signal
SIG /Loop/x_3/Q_OUT . name = Q_OUT
SIG /Loop/x_3/Q_OUT . path = /Loop/x_3/Q_OUT
SIG /Loop/x_3/Q_OUT . type = Int#(32)
SIG /Loop/x_3/Q_OUT . class = VSignal
SIG /Loop/x_3/Q_OUT . wave_format = {Int#(32) /x_3}
SIG /Loop/x_3/Q_OUT . position = Test2.bsv 20 7
SIG /Loop/x_3/Q_OUT . used_by 
SIG Q_OUT . inst = /Loop/x_3
SIG /RST_N . kind = Signal
SIG /RST_N . name = RST_N
SIG /RST_N . path = /RST_N
SIG /RST_N . type = Reset
SIG /RST_N . class = VSignal
SIG /RST_N . wave_format = {Reset /RST_N}
SIG /RST_N . position = 
SIG /RST_N . used_by 
SIG RST_N . inst = /
SIG /i . kind = Signal
SIG /i . name = i
SIG /i . path = /i
SIG /i . type = Inout#(Test::Bar)
SIG /i . class = VSignal
SIG /i . wave_format = {Inout#(Test::Bar) /i}
SIG /i . position = 
SIG /i . used_by 
SIG i . inst = /
SIG /subis/_element_0/CLK . kind = Signal
SIG /subis/_element_0/CLK . name = CLK
SIG /subis/_element_0/CLK . path = /subis/_element_0/CLK
SIG /subis/_element_0/CLK . type = Clock
SIG /subis/_element_0/CLK . class = VSignal
SIG /subis/_element_0/CLK . wave_format = {Clock /subis_0/CLK}
SIG /subis/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/CLK . used_by 
SIG CLK . inst = /subis/_element_0
SIG /subis/_element_0/EN_foo . kind = Signal
SIG /subis/_element_0/EN_foo . name = EN_foo
SIG /subis/_element_0/EN_foo . path = /subis/_element_0/EN_foo
SIG /subis/_element_0/EN_foo . type = Bool
SIG /subis/_element_0/EN_foo . class = VSignal
SIG /subis/_element_0/EN_foo . wave_format = {Bool /subis_0/EN_foo}
SIG /subis/_element_0/EN_foo . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/EN_foo . used_by 
SIG EN_foo . inst = /subis/_element_0
SIG /subis/_element_0/RST_N . kind = Signal
SIG /subis/_element_0/RST_N . name = RST_N
SIG /subis/_element_0/RST_N . path = /subis/_element_0/RST_N
SIG /subis/_element_0/RST_N . type = Reset
SIG /subis/_element_0/RST_N . class = VSignal
SIG /subis/_element_0/RST_N . wave_format = {Reset /subis_0/RST_N}
SIG /subis/_element_0/RST_N . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/RST_N . used_by 
SIG RST_N . inst = /subis/_element_0
SIG /subis/_element_0/RadyOnTheReadMethod . kind = Signal
SIG /subis/_element_0/RadyOnTheReadMethod . name = RadyOnTheReadMethod
SIG /subis/_element_0/RadyOnTheReadMethod . path = /subis/_element_0/RadyOnTheReadMethod
SIG /subis/_element_0/RadyOnTheReadMethod . type = Bool
SIG /subis/_element_0/RadyOnTheReadMethod . class = VSignal
SIG /subis/_element_0/RadyOnTheReadMethod . wave_format = {Bool /subis_0/RadyOnTheReadMethod}
SIG /subis/_element_0/RadyOnTheReadMethod . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/RadyOnTheReadMethod . used_by 
SIG RadyOnTheReadMethod . inst = /subis/_element_0
SIG /subis/_element_0/ax . kind = Signal
SIG /subis/_element_0/ax . name = ax
SIG /subis/_element_0/ax . path = /subis/_element_0/ax
SIG /subis/_element_0/ax . type = Bit#(3)
SIG /subis/_element_0/ax . class = VSignal
SIG /subis/_element_0/ax . wave_format = {Bit#(3) /subis_0/ax}
SIG /subis/_element_0/ax . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/ax . used_by 
SIG ax . inst = /subis/_element_0
SIG /subis/_element_0/bar . kind = Signal
SIG /subis/_element_0/bar . name = bar
SIG /subis/_element_0/bar . path = /subis/_element_0/bar
SIG /subis/_element_0/bar . type = Int#(32)
SIG /subis/_element_0/bar . class = VSignal
SIG /subis/_element_0/bar . wave_format = {Int#(32) /subis_0/bar}
SIG /subis/_element_0/bar . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/bar . used_by 
SIG bar . inst = /subis/_element_0
SIG /subis/_element_0/barx/CLK . kind = Signal
SIG /subis/_element_0/barx/CLK . name = CLK
SIG /subis/_element_0/barx/CLK . path = /subis/_element_0/barx/CLK
SIG /subis/_element_0/barx/CLK . type = Clock
SIG /subis/_element_0/barx/CLK . class = VSignal
SIG /subis/_element_0/barx/CLK . wave_format = 
SIG /subis/_element_0/barx/CLK . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/CLK . used_by 
SIG CLK . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/D_IN . kind = Signal
SIG /subis/_element_0/barx/D_IN . name = D_IN
SIG /subis/_element_0/barx/D_IN . path = /subis/_element_0/barx/D_IN
SIG /subis/_element_0/barx/D_IN . type = Bit#(3)
SIG /subis/_element_0/barx/D_IN . class = VSignal
SIG /subis/_element_0/barx/D_IN . wave_format = {Bit#(3) {/subis_0/barx$D_IN}}
SIG /subis/_element_0/barx/D_IN . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/D_IN . used_by 
SIG D_IN . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/EN . kind = Signal
SIG /subis/_element_0/barx/EN . name = EN
SIG /subis/_element_0/barx/EN . path = /subis/_element_0/barx/EN
SIG /subis/_element_0/barx/EN . type = Bool
SIG /subis/_element_0/barx/EN . class = VSignal
SIG /subis/_element_0/barx/EN . wave_format = {Bool {/subis_0/barx$EN}}
SIG /subis/_element_0/barx/EN . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/EN . used_by 
SIG EN . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/Q_OUT . kind = Signal
SIG /subis/_element_0/barx/Q_OUT . name = Q_OUT
SIG /subis/_element_0/barx/Q_OUT . path = /subis/_element_0/barx/Q_OUT
SIG /subis/_element_0/barx/Q_OUT . type = Bit#(3)
SIG /subis/_element_0/barx/Q_OUT . class = VSignal
SIG /subis/_element_0/barx/Q_OUT . wave_format = {Bit#(3) /subis_0/barx}
SIG /subis/_element_0/barx/Q_OUT . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/Q_OUT . used_by /subis/_element_0.bar()
SIG Q_OUT . inst = /subis/_element_0/barx
SIG /subis/_element_0/barx/RST . kind = Signal
SIG /subis/_element_0/barx/RST . name = RST
SIG /subis/_element_0/barx/RST . path = /subis/_element_0/barx/RST
SIG /subis/_element_0/barx/RST . type = Reset
SIG /subis/_element_0/barx/RST . class = VSignal
SIG /subis/_element_0/barx/RST . wave_format = 
SIG /subis/_element_0/barx/RST . position = Test2.bsv 42 18
SIG /subis/_element_0/barx/RST . used_by 
SIG RST . inst = /subis/_element_0/barx
SIG /subis/_element_0/foo2/CLK . kind = Signal
SIG /subis/_element_0/foo2/CLK . name = CLK
SIG /subis/_element_0/foo2/CLK . path = /subis/_element_0/foo2/CLK
SIG /subis/_element_0/foo2/CLK . type = Clock
SIG /subis/_element_0/foo2/CLK . class = VSignal
SIG /subis/_element_0/foo2/CLK . wave_format = 
SIG /subis/_element_0/foo2/CLK . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/CLK . used_by 
SIG CLK . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/D_IN . kind = Signal
SIG /subis/_element_0/foo2/D_IN . name = D_IN
SIG /subis/_element_0/foo2/D_IN . path = /subis/_element_0/foo2/D_IN
SIG /subis/_element_0/foo2/D_IN . type = Int#(32)
SIG /subis/_element_0/foo2/D_IN . class = VSignal
SIG /subis/_element_0/foo2/D_IN . wave_format = {Int#(32) {/subis_0/foo2$D_IN}}
SIG /subis/_element_0/foo2/D_IN . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/D_IN . used_by /subis/_element_0.foo()
SIG D_IN . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/EN . kind = Signal
SIG /subis/_element_0/foo2/EN . name = EN
SIG /subis/_element_0/foo2/EN . path = /subis/_element_0/foo2/EN
SIG /subis/_element_0/foo2/EN . type = Bool
SIG /subis/_element_0/foo2/EN . class = VSignal
SIG /subis/_element_0/foo2/EN . wave_format = {Bool {/subis_0/foo2$EN}}
SIG /subis/_element_0/foo2/EN . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/EN . used_by /subis/_element_0.foo()
SIG EN . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/Q_OUT . kind = Signal
SIG /subis/_element_0/foo2/Q_OUT . name = Q_OUT
SIG /subis/_element_0/foo2/Q_OUT . path = /subis/_element_0/foo2/Q_OUT
SIG /subis/_element_0/foo2/Q_OUT . type = Int#(32)
SIG /subis/_element_0/foo2/Q_OUT . class = VSignal
SIG /subis/_element_0/foo2/Q_OUT . wave_format = {Int#(32) /subis_0/foo2}
SIG /subis/_element_0/foo2/Q_OUT . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/Q_OUT . used_by /subis/_element_0.bar()
SIG Q_OUT . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo2/RST . kind = Signal
SIG /subis/_element_0/foo2/RST . name = RST
SIG /subis/_element_0/foo2/RST . path = /subis/_element_0/foo2/RST
SIG /subis/_element_0/foo2/RST . type = Reset
SIG /subis/_element_0/foo2/RST . class = VSignal
SIG /subis/_element_0/foo2/RST . wave_format = 
SIG /subis/_element_0/foo2/RST . position = Test2.bsv 41 14
SIG /subis/_element_0/foo2/RST . used_by 
SIG RST . inst = /subis/_element_0/foo2
SIG /subis/_element_0/foo_x . kind = Signal
SIG /subis/_element_0/foo_x . name = foo_x
SIG /subis/_element_0/foo_x . path = /subis/_element_0/foo_x
SIG /subis/_element_0/foo_x . type = Int#(32)
SIG /subis/_element_0/foo_x . class = VSignal
SIG /subis/_element_0/foo_x . wave_format = {Int#(32) /subis_0/foo_x}
SIG /subis/_element_0/foo_x . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_0/foo_x . used_by 
SIG foo_x . inst = /subis/_element_0
SIG /subis/_element_1/CLK . kind = Signal
SIG /subis/_element_1/CLK . name = CLK
SIG /subis/_element_1/CLK . path = /subis/_element_1/CLK
SIG /subis/_element_1/CLK . type = Clock
SIG /subis/_element_1/CLK . class = VSignal
SIG /subis/_element_1/CLK . wave_format = {Clock /subis_1/CLK}
SIG /subis/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/CLK . used_by 
SIG CLK . inst = /subis/_element_1
SIG /subis/_element_1/EN_foo . kind = Signal
SIG /subis/_element_1/EN_foo . name = EN_foo
SIG /subis/_element_1/EN_foo . path = /subis/_element_1/EN_foo
SIG /subis/_element_1/EN_foo . type = Bool
SIG /subis/_element_1/EN_foo . class = VSignal
SIG /subis/_element_1/EN_foo . wave_format = {Bool /subis_1/EN_foo}
SIG /subis/_element_1/EN_foo . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/EN_foo . used_by 
SIG EN_foo . inst = /subis/_element_1
SIG /subis/_element_1/RST_N . kind = Signal
SIG /subis/_element_1/RST_N . name = RST_N
SIG /subis/_element_1/RST_N . path = /subis/_element_1/RST_N
SIG /subis/_element_1/RST_N . type = Reset
SIG /subis/_element_1/RST_N . class = VSignal
SIG /subis/_element_1/RST_N . wave_format = {Reset /subis_1/RST_N}
SIG /subis/_element_1/RST_N . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/RST_N . used_by 
SIG RST_N . inst = /subis/_element_1
SIG /subis/_element_1/RadyOnTheReadMethod . kind = Signal
SIG /subis/_element_1/RadyOnTheReadMethod . name = RadyOnTheReadMethod
SIG /subis/_element_1/RadyOnTheReadMethod . path = /subis/_element_1/RadyOnTheReadMethod
SIG /subis/_element_1/RadyOnTheReadMethod . type = Bool
SIG /subis/_element_1/RadyOnTheReadMethod . class = VSignal
SIG /subis/_element_1/RadyOnTheReadMethod . wave_format = {Bool /subis_1/RadyOnTheReadMethod}
SIG /subis/_element_1/RadyOnTheReadMethod . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/RadyOnTheReadMethod . used_by 
SIG RadyOnTheReadMethod . inst = /subis/_element_1
SIG /subis/_element_1/ax . kind = Signal
SIG /subis/_element_1/ax . name = ax
SIG /subis/_element_1/ax . path = /subis/_element_1/ax
SIG /subis/_element_1/ax . type = Bit#(3)
SIG /subis/_element_1/ax . class = VSignal
SIG /subis/_element_1/ax . wave_format = {Bit#(3) /subis_1/ax}
SIG /subis/_element_1/ax . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/ax . used_by 
SIG ax . inst = /subis/_element_1
SIG /subis/_element_1/bar . kind = Signal
SIG /subis/_element_1/bar . name = bar
SIG /subis/_element_1/bar . path = /subis/_element_1/bar
SIG /subis/_element_1/bar . type = Int#(32)
SIG /subis/_element_1/bar . class = VSignal
SIG /subis/_element_1/bar . wave_format = {Int#(32) /subis_1/bar}
SIG /subis/_element_1/bar . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/bar . used_by 
SIG bar . inst = /subis/_element_1
SIG /subis/_element_1/barx/CLK . kind = Signal
SIG /subis/_element_1/barx/CLK . name = CLK
SIG /subis/_element_1/barx/CLK . path = /subis/_element_1/barx/CLK
SIG /subis/_element_1/barx/CLK . type = Clock
SIG /subis/_element_1/barx/CLK . class = VSignal
SIG /subis/_element_1/barx/CLK . wave_format = 
SIG /subis/_element_1/barx/CLK . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/CLK . used_by 
SIG CLK . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/D_IN . kind = Signal
SIG /subis/_element_1/barx/D_IN . name = D_IN
SIG /subis/_element_1/barx/D_IN . path = /subis/_element_1/barx/D_IN
SIG /subis/_element_1/barx/D_IN . type = Bit#(3)
SIG /subis/_element_1/barx/D_IN . class = VSignal
SIG /subis/_element_1/barx/D_IN . wave_format = {Bit#(3) {/subis_1/barx$D_IN}}
SIG /subis/_element_1/barx/D_IN . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/D_IN . used_by 
SIG D_IN . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/EN . kind = Signal
SIG /subis/_element_1/barx/EN . name = EN
SIG /subis/_element_1/barx/EN . path = /subis/_element_1/barx/EN
SIG /subis/_element_1/barx/EN . type = Bool
SIG /subis/_element_1/barx/EN . class = VSignal
SIG /subis/_element_1/barx/EN . wave_format = {Bool {/subis_1/barx$EN}}
SIG /subis/_element_1/barx/EN . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/EN . used_by 
SIG EN . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/Q_OUT . kind = Signal
SIG /subis/_element_1/barx/Q_OUT . name = Q_OUT
SIG /subis/_element_1/barx/Q_OUT . path = /subis/_element_1/barx/Q_OUT
SIG /subis/_element_1/barx/Q_OUT . type = Bit#(3)
SIG /subis/_element_1/barx/Q_OUT . class = VSignal
SIG /subis/_element_1/barx/Q_OUT . wave_format = {Bit#(3) /subis_1/barx}
SIG /subis/_element_1/barx/Q_OUT . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/Q_OUT . used_by /subis/_element_1.bar()
SIG Q_OUT . inst = /subis/_element_1/barx
SIG /subis/_element_1/barx/RST . kind = Signal
SIG /subis/_element_1/barx/RST . name = RST
SIG /subis/_element_1/barx/RST . path = /subis/_element_1/barx/RST
SIG /subis/_element_1/barx/RST . type = Reset
SIG /subis/_element_1/barx/RST . class = VSignal
SIG /subis/_element_1/barx/RST . wave_format = 
SIG /subis/_element_1/barx/RST . position = Test2.bsv 42 18
SIG /subis/_element_1/barx/RST . used_by 
SIG RST . inst = /subis/_element_1/barx
SIG /subis/_element_1/foo2/CLK . kind = Signal
SIG /subis/_element_1/foo2/CLK . name = CLK
SIG /subis/_element_1/foo2/CLK . path = /subis/_element_1/foo2/CLK
SIG /subis/_element_1/foo2/CLK . type = Clock
SIG /subis/_element_1/foo2/CLK . class = VSignal
SIG /subis/_element_1/foo2/CLK . wave_format = 
SIG /subis/_element_1/foo2/CLK . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/CLK . used_by 
SIG CLK . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/D_IN . kind = Signal
SIG /subis/_element_1/foo2/D_IN . name = D_IN
SIG /subis/_element_1/foo2/D_IN . path = /subis/_element_1/foo2/D_IN
SIG /subis/_element_1/foo2/D_IN . type = Int#(32)
SIG /subis/_element_1/foo2/D_IN . class = VSignal
SIG /subis/_element_1/foo2/D_IN . wave_format = {Int#(32) {/subis_1/foo2$D_IN}}
SIG /subis/_element_1/foo2/D_IN . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/D_IN . used_by /subis/_element_1.foo()
SIG D_IN . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/EN . kind = Signal
SIG /subis/_element_1/foo2/EN . name = EN
SIG /subis/_element_1/foo2/EN . path = /subis/_element_1/foo2/EN
SIG /subis/_element_1/foo2/EN . type = Bool
SIG /subis/_element_1/foo2/EN . class = VSignal
SIG /subis/_element_1/foo2/EN . wave_format = {Bool {/subis_1/foo2$EN}}
SIG /subis/_element_1/foo2/EN . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/EN . used_by /subis/_element_1.foo()
SIG EN . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/Q_OUT . kind = Signal
SIG /subis/_element_1/foo2/Q_OUT . name = Q_OUT
SIG /subis/_element_1/foo2/Q_OUT . path = /subis/_element_1/foo2/Q_OUT
SIG /subis/_element_1/foo2/Q_OUT . type = Int#(32)
SIG /subis/_element_1/foo2/Q_OUT . class = VSignal
SIG /subis/_element_1/foo2/Q_OUT . wave_format = {Int#(32) /subis_1/foo2}
SIG /subis/_element_1/foo2/Q_OUT . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/Q_OUT . used_by /subis/_element_1.bar()
SIG Q_OUT . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo2/RST . kind = Signal
SIG /subis/_element_1/foo2/RST . name = RST
SIG /subis/_element_1/foo2/RST . path = /subis/_element_1/foo2/RST
SIG /subis/_element_1/foo2/RST . type = Reset
SIG /subis/_element_1/foo2/RST . class = VSignal
SIG /subis/_element_1/foo2/RST . wave_format = 
SIG /subis/_element_1/foo2/RST . position = Test2.bsv 41 14
SIG /subis/_element_1/foo2/RST . used_by 
SIG RST . inst = /subis/_element_1/foo2
SIG /subis/_element_1/foo_x . kind = Signal
SIG /subis/_element_1/foo_x . name = foo_x
SIG /subis/_element_1/foo_x . path = /subis/_element_1/foo_x
SIG /subis/_element_1/foo_x . type = Int#(32)
SIG /subis/_element_1/foo_x . class = VSignal
SIG /subis/_element_1/foo_x . wave_format = {Int#(32) /subis_1/foo_x}
SIG /subis/_element_1/foo_x . position = %/Libraries/List.bs 727 4 {Library List}
SIG /subis/_element_1/foo_x . used_by 
SIG foo_x . inst = /subis/_element_1
SIG /xx/_element_0/I_IN . kind = Signal
SIG /xx/_element_0/I_IN . name = I_IN
SIG /xx/_element_0/I_IN . path = /xx/_element_0/I_IN
SIG /xx/_element_0/I_IN . type = Inout#(Test::Bar)
SIG /xx/_element_0/I_IN . class = VSignal
SIG /xx/_element_0/I_IN . wave_format = {Inout#(Test::Bar) /xx_0/I_IN}
SIG /xx/_element_0/I_IN . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/I_IN . used_by 
SIG I_IN . inst = /xx/_element_0
SIG /xx/_element_0/I_OUT . kind = Signal
SIG /xx/_element_0/I_OUT . name = I_OUT
SIG /xx/_element_0/I_OUT . path = /xx/_element_0/I_OUT
SIG /xx/_element_0/I_OUT . type = Inout#(Bool)
SIG /xx/_element_0/I_OUT . class = VSignal
SIG /xx/_element_0/I_OUT . wave_format = {Inout#(Bool) /xx_0/I_OUT}
SIG /xx/_element_0/I_OUT . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/I_OUT . used_by 
SIG I_OUT . inst = /xx/_element_0
SIG /xx/_element_0/V . kind = Signal
SIG /xx/_element_0/V . name = V
SIG /xx/_element_0/V . path = /xx/_element_0/V
SIG /xx/_element_0/V . type = Int#(32)
SIG /xx/_element_0/V . class = VSignal
SIG /xx/_element_0/V . wave_format = {Int#(32) /xx_0/V}
SIG /xx/_element_0/V . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/V . used_by 
SIG V . inst = /xx/_element_0
SIG /xx/_element_0/WGET . kind = Signal
SIG /xx/_element_0/WGET . name = WGET
SIG /xx/_element_0/WGET . path = /xx/_element_0/WGET
SIG /xx/_element_0/WGET . type = Test::Bar
SIG /xx/_element_0/WGET . class = VSignal
SIG /xx/_element_0/WGET . wave_format = {Test::Bar /xx_0/WGET}
SIG /xx/_element_0/WGET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WGET . used_by 
SIG WGET . inst = /xx/_element_0
SIG /xx/_element_0/WHAS . kind = Signal
SIG /xx/_element_0/WHAS . name = WHAS
SIG /xx/_element_0/WHAS . path = /xx/_element_0/WHAS
SIG /xx/_element_0/WHAS . type = Bool
SIG /xx/_element_0/WHAS . class = VSignal
SIG /xx/_element_0/WHAS . wave_format = {Bool /xx_0/WHAS}
SIG /xx/_element_0/WHAS . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WHAS . used_by 
SIG WHAS . inst = /xx/_element_0
SIG /xx/_element_0/WSET . kind = Signal
SIG /xx/_element_0/WSET . name = WSET
SIG /xx/_element_0/WSET . path = /xx/_element_0/WSET
SIG /xx/_element_0/WSET . type = Bool
SIG /xx/_element_0/WSET . class = VSignal
SIG /xx/_element_0/WSET . wave_format = {Bool /xx_0/WSET}
SIG /xx/_element_0/WSET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WSET . used_by 
SIG WSET . inst = /xx/_element_0
SIG /xx/_element_0/WVAL . kind = Signal
SIG /xx/_element_0/WVAL . name = WVAL
SIG /xx/_element_0/WVAL . path = /xx/_element_0/WVAL
SIG /xx/_element_0/WVAL . type = Test::Bar
SIG /xx/_element_0/WVAL . class = VSignal
SIG /xx/_element_0/WVAL . wave_format = {Test::Bar /xx_0/WVAL}
SIG /xx/_element_0/WVAL . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_0/WVAL . used_by 
SIG WVAL . inst = /xx/_element_0
SIG /xx/_element_1/I_IN . kind = Signal
SIG /xx/_element_1/I_IN . name = I_IN
SIG /xx/_element_1/I_IN . path = /xx/_element_1/I_IN
SIG /xx/_element_1/I_IN . type = Inout#(Test::Bar)
SIG /xx/_element_1/I_IN . class = VSignal
SIG /xx/_element_1/I_IN . wave_format = {Inout#(Test::Bar) /xx_1/I_IN}
SIG /xx/_element_1/I_IN . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/I_IN . used_by 
SIG I_IN . inst = /xx/_element_1
SIG /xx/_element_1/I_OUT . kind = Signal
SIG /xx/_element_1/I_OUT . name = I_OUT
SIG /xx/_element_1/I_OUT . path = /xx/_element_1/I_OUT
SIG /xx/_element_1/I_OUT . type = Inout#(Bool)
SIG /xx/_element_1/I_OUT . class = VSignal
SIG /xx/_element_1/I_OUT . wave_format = {Inout#(Bool) /xx_1/I_OUT}
SIG /xx/_element_1/I_OUT . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/I_OUT . used_by 
SIG I_OUT . inst = /xx/_element_1
SIG /xx/_element_1/V . kind = Signal
SIG /xx/_element_1/V . name = V
SIG /xx/_element_1/V . path = /xx/_element_1/V
SIG /xx/_element_1/V . type = Int#(32)
SIG /xx/_element_1/V . class = VSignal
SIG /xx/_element_1/V . wave_format = {Int#(32) /xx_1/V}
SIG /xx/_element_1/V . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/V . used_by 
SIG V . inst = /xx/_element_1
SIG /xx/_element_1/WGET . kind = Signal
SIG /xx/_element_1/WGET . name = WGET
SIG /xx/_element_1/WGET . path = /xx/_element_1/WGET
SIG /xx/_element_1/WGET . type = Test::Bar
SIG /xx/_element_1/WGET . class = VSignal
SIG /xx/_element_1/WGET . wave_format = {Test::Bar /xx_1/WGET}
SIG /xx/_element_1/WGET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WGET . used_by 
SIG WGET . inst = /xx/_element_1
SIG /xx/_element_1/WHAS . kind = Signal
SIG /xx/_element_1/WHAS . name = WHAS
SIG /xx/_element_1/WHAS . path = /xx/_element_1/WHAS
SIG /xx/_element_1/WHAS . type = Bool
SIG /xx/_element_1/WHAS . class = VSignal
SIG /xx/_element_1/WHAS . wave_format = {Bool /xx_1/WHAS}
SIG /xx/_element_1/WHAS . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WHAS . used_by 
SIG WHAS . inst = /xx/_element_1
SIG /xx/_element_1/WSET . kind = Signal
SIG /xx/_element_1/WSET . name = WSET
SIG /xx/_element_1/WSET . path = /xx/_element_1/WSET
SIG /xx/_element_1/WSET . type = Bool
SIG /xx/_element_1/WSET . class = VSignal
SIG /xx/_element_1/WSET . wave_format = {Bool /xx_1/WSET}
SIG /xx/_element_1/WSET . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WSET . used_by 
SIG WSET . inst = /xx/_element_1
SIG /xx/_element_1/WVAL . kind = Signal
SIG /xx/_element_1/WVAL . name = WVAL
SIG /xx/_element_1/WVAL . path = /xx/_element_1/WVAL
SIG /xx/_element_1/WVAL . type = Test::Bar
SIG /xx/_element_1/WVAL . class = VSignal
SIG /xx/_element_1/WVAL . wave_format = {Test::Bar /xx_1/WVAL}
SIG /xx/_element_1/WVAL . position = %/Libraries/List.bs 764 4 {Library List}
SIG /xx/_element_1/WVAL . used_by 
SIG WVAL . inst = /xx/_element_1
SIG /y/_element_0/CLK . kind = Signal
SIG /y/_element_0/CLK . name = CLK
SIG /y/_element_0/CLK . path = /y/_element_0/CLK
SIG /y/_element_0/CLK . type = Clock
SIG /y/_element_0/CLK . class = VSignal
SIG /y/_element_0/CLK . wave_format = 
SIG /y/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/CLK . used_by 
SIG CLK . inst = /y/_element_0
SIG /y/_element_0/D_IN . kind = Signal
SIG /y/_element_0/D_IN . name = D_IN
SIG /y/_element_0/D_IN . path = /y/_element_0/D_IN
SIG /y/_element_0/D_IN . type = Int#(32)
SIG /y/_element_0/D_IN . class = VSignal
SIG /y/_element_0/D_IN . wave_format = {Int#(32) {/y_0$D_IN}}
SIG /y/_element_0/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/D_IN . used_by 
SIG D_IN . inst = /y/_element_0
SIG /y/_element_0/EN . kind = Signal
SIG /y/_element_0/EN . name = EN
SIG /y/_element_0/EN . path = /y/_element_0/EN
SIG /y/_element_0/EN . type = Bool
SIG /y/_element_0/EN . class = VSignal
SIG /y/_element_0/EN . wave_format = {Bool {/y_0$EN}}
SIG /y/_element_0/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/EN . used_by 
SIG EN . inst = /y/_element_0
SIG /y/_element_0/Q_OUT . kind = Signal
SIG /y/_element_0/Q_OUT . name = Q_OUT
SIG /y/_element_0/Q_OUT . path = /y/_element_0/Q_OUT
SIG /y/_element_0/Q_OUT . type = Int#(32)
SIG /y/_element_0/Q_OUT . class = VSignal
SIG /y/_element_0/Q_OUT . wave_format = {Int#(32) /y_0}
SIG /y/_element_0/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_0/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_0
SIG /y/_element_1/CLK . kind = Signal
SIG /y/_element_1/CLK . name = CLK
SIG /y/_element_1/CLK . path = /y/_element_1/CLK
SIG /y/_element_1/CLK . type = Clock
SIG /y/_element_1/CLK . class = VSignal
SIG /y/_element_1/CLK . wave_format = 
SIG /y/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/CLK . used_by 
SIG CLK . inst = /y/_element_1
SIG /y/_element_1/D_IN . kind = Signal
SIG /y/_element_1/D_IN . name = D_IN
SIG /y/_element_1/D_IN . path = /y/_element_1/D_IN
SIG /y/_element_1/D_IN . type = Int#(32)
SIG /y/_element_1/D_IN . class = VSignal
SIG /y/_element_1/D_IN . wave_format = {Int#(32) {/y_1$D_IN}}
SIG /y/_element_1/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/D_IN . used_by 
SIG D_IN . inst = /y/_element_1
SIG /y/_element_1/EN . kind = Signal
SIG /y/_element_1/EN . name = EN
SIG /y/_element_1/EN . path = /y/_element_1/EN
SIG /y/_element_1/EN . type = Bool
SIG /y/_element_1/EN . class = VSignal
SIG /y/_element_1/EN . wave_format = {Bool {/y_1$EN}}
SIG /y/_element_1/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/EN . used_by 
SIG EN . inst = /y/_element_1
SIG /y/_element_1/Q_OUT . kind = Signal
SIG /y/_element_1/Q_OUT . name = Q_OUT
SIG /y/_element_1/Q_OUT . path = /y/_element_1/Q_OUT
SIG /y/_element_1/Q_OUT . type = Int#(32)
SIG /y/_element_1/Q_OUT . class = VSignal
SIG /y/_element_1/Q_OUT . wave_format = {Int#(32) /y_1}
SIG /y/_element_1/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_1/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_1
SIG /y/_element_2/CLK . kind = Signal
SIG /y/_element_2/CLK . name = CLK
SIG /y/_element_2/CLK . path = /y/_element_2/CLK
SIG /y/_element_2/CLK . type = Clock
SIG /y/_element_2/CLK . class = VSignal
SIG /y/_element_2/CLK . wave_format = 
SIG /y/_element_2/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/CLK . used_by 
SIG CLK . inst = /y/_element_2
SIG /y/_element_2/D_IN . kind = Signal
SIG /y/_element_2/D_IN . name = D_IN
SIG /y/_element_2/D_IN . path = /y/_element_2/D_IN
SIG /y/_element_2/D_IN . type = Int#(32)
SIG /y/_element_2/D_IN . class = VSignal
SIG /y/_element_2/D_IN . wave_format = {Int#(32) {/y_2$D_IN}}
SIG /y/_element_2/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/D_IN . used_by 
SIG D_IN . inst = /y/_element_2
SIG /y/_element_2/EN . kind = Signal
SIG /y/_element_2/EN . name = EN
SIG /y/_element_2/EN . path = /y/_element_2/EN
SIG /y/_element_2/EN . type = Bool
SIG /y/_element_2/EN . class = VSignal
SIG /y/_element_2/EN . wave_format = {Bool {/y_2$EN}}
SIG /y/_element_2/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/EN . used_by 
SIG EN . inst = /y/_element_2
SIG /y/_element_2/Q_OUT . kind = Signal
SIG /y/_element_2/Q_OUT . name = Q_OUT
SIG /y/_element_2/Q_OUT . path = /y/_element_2/Q_OUT
SIG /y/_element_2/Q_OUT . type = Int#(32)
SIG /y/_element_2/Q_OUT . class = VSignal
SIG /y/_element_2/Q_OUT . wave_format = {Int#(32) /y_2}
SIG /y/_element_2/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_2/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_2
SIG /y/_element_3/CLK . kind = Signal
SIG /y/_element_3/CLK . name = CLK
SIG /y/_element_3/CLK . path = /y/_element_3/CLK
SIG /y/_element_3/CLK . type = Clock
SIG /y/_element_3/CLK . class = VSignal
SIG /y/_element_3/CLK . wave_format = 
SIG /y/_element_3/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/CLK . used_by 
SIG CLK . inst = /y/_element_3
SIG /y/_element_3/D_IN . kind = Signal
SIG /y/_element_3/D_IN . name = D_IN
SIG /y/_element_3/D_IN . path = /y/_element_3/D_IN
SIG /y/_element_3/D_IN . type = Int#(32)
SIG /y/_element_3/D_IN . class = VSignal
SIG /y/_element_3/D_IN . wave_format = {Int#(32) {/y_3$D_IN}}
SIG /y/_element_3/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/D_IN . used_by 
SIG D_IN . inst = /y/_element_3
SIG /y/_element_3/EN . kind = Signal
SIG /y/_element_3/EN . name = EN
SIG /y/_element_3/EN . path = /y/_element_3/EN
SIG /y/_element_3/EN . type = Bool
SIG /y/_element_3/EN . class = VSignal
SIG /y/_element_3/EN . wave_format = {Bool {/y_3$EN}}
SIG /y/_element_3/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/EN . used_by 
SIG EN . inst = /y/_element_3
SIG /y/_element_3/Q_OUT . kind = Signal
SIG /y/_element_3/Q_OUT . name = Q_OUT
SIG /y/_element_3/Q_OUT . path = /y/_element_3/Q_OUT
SIG /y/_element_3/Q_OUT . type = Int#(32)
SIG /y/_element_3/Q_OUT . class = VSignal
SIG /y/_element_3/Q_OUT . wave_format = {Int#(32) /y_3}
SIG /y/_element_3/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /y/_element_3/Q_OUT . used_by 
SIG Q_OUT . inst = /y/_element_3
SIG /zw/_element_0/CLK . kind = Signal
SIG /zw/_element_0/CLK . name = CLK
SIG /zw/_element_0/CLK . path = /zw/_element_0/CLK
SIG /zw/_element_0/CLK . type = Clock
SIG /zw/_element_0/CLK . class = VSignal
SIG /zw/_element_0/CLK . wave_format = 
SIG /zw/_element_0/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/CLK . used_by 
SIG CLK . inst = /zw/_element_0
SIG /zw/_element_0/D_IN . kind = Signal
SIG /zw/_element_0/D_IN . name = D_IN
SIG /zw/_element_0/D_IN . path = /zw/_element_0/D_IN
SIG /zw/_element_0/D_IN . type = Int#(32)
SIG /zw/_element_0/D_IN . class = VSignal
SIG /zw/_element_0/D_IN . wave_format = {Int#(32) {/zw_0$D_IN}}
SIG /zw/_element_0/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/D_IN . used_by 
SIG D_IN . inst = /zw/_element_0
SIG /zw/_element_0/EN . kind = Signal
SIG /zw/_element_0/EN . name = EN
SIG /zw/_element_0/EN . path = /zw/_element_0/EN
SIG /zw/_element_0/EN . type = Bool
SIG /zw/_element_0/EN . class = VSignal
SIG /zw/_element_0/EN . wave_format = {Bool {/zw_0$EN}}
SIG /zw/_element_0/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/EN . used_by 
SIG EN . inst = /zw/_element_0
SIG /zw/_element_0/Q_OUT . kind = Signal
SIG /zw/_element_0/Q_OUT . name = Q_OUT
SIG /zw/_element_0/Q_OUT . path = /zw/_element_0/Q_OUT
SIG /zw/_element_0/Q_OUT . type = Int#(32)
SIG /zw/_element_0/Q_OUT . class = VSignal
SIG /zw/_element_0/Q_OUT . wave_format = {Int#(32) /zw_0}
SIG /zw/_element_0/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_0
SIG /zw/_element_0/RST . kind = Signal
SIG /zw/_element_0/RST . name = RST
SIG /zw/_element_0/RST . path = /zw/_element_0/RST
SIG /zw/_element_0/RST . type = Reset
SIG /zw/_element_0/RST . class = VSignal
SIG /zw/_element_0/RST . wave_format = 
SIG /zw/_element_0/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_0/RST . used_by 
SIG RST . inst = /zw/_element_0
SIG /zw/_element_1/CLK . kind = Signal
SIG /zw/_element_1/CLK . name = CLK
SIG /zw/_element_1/CLK . path = /zw/_element_1/CLK
SIG /zw/_element_1/CLK . type = Clock
SIG /zw/_element_1/CLK . class = VSignal
SIG /zw/_element_1/CLK . wave_format = 
SIG /zw/_element_1/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/CLK . used_by 
SIG CLK . inst = /zw/_element_1
SIG /zw/_element_1/D_IN . kind = Signal
SIG /zw/_element_1/D_IN . name = D_IN
SIG /zw/_element_1/D_IN . path = /zw/_element_1/D_IN
SIG /zw/_element_1/D_IN . type = Int#(32)
SIG /zw/_element_1/D_IN . class = VSignal
SIG /zw/_element_1/D_IN . wave_format = {Int#(32) {/zw_1$D_IN}}
SIG /zw/_element_1/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/D_IN . used_by 
SIG D_IN . inst = /zw/_element_1
SIG /zw/_element_1/EN . kind = Signal
SIG /zw/_element_1/EN . name = EN
SIG /zw/_element_1/EN . path = /zw/_element_1/EN
SIG /zw/_element_1/EN . type = Bool
SIG /zw/_element_1/EN . class = VSignal
SIG /zw/_element_1/EN . wave_format = {Bool {/zw_1$EN}}
SIG /zw/_element_1/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/EN . used_by 
SIG EN . inst = /zw/_element_1
SIG /zw/_element_1/Q_OUT . kind = Signal
SIG /zw/_element_1/Q_OUT . name = Q_OUT
SIG /zw/_element_1/Q_OUT . path = /zw/_element_1/Q_OUT
SIG /zw/_element_1/Q_OUT . type = Int#(32)
SIG /zw/_element_1/Q_OUT . class = VSignal
SIG /zw/_element_1/Q_OUT . wave_format = {Int#(32) /zw_1}
SIG /zw/_element_1/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_1
SIG /zw/_element_1/RST . kind = Signal
SIG /zw/_element_1/RST . name = RST
SIG /zw/_element_1/RST . path = /zw/_element_1/RST
SIG /zw/_element_1/RST . type = Reset
SIG /zw/_element_1/RST . class = VSignal
SIG /zw/_element_1/RST . wave_format = 
SIG /zw/_element_1/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_1/RST . used_by 
SIG RST . inst = /zw/_element_1
SIG /zw/_element_2/CLK . kind = Signal
SIG /zw/_element_2/CLK . name = CLK
SIG /zw/_element_2/CLK . path = /zw/_element_2/CLK
SIG /zw/_element_2/CLK . type = Clock
SIG /zw/_element_2/CLK . class = VSignal
SIG /zw/_element_2/CLK . wave_format = 
SIG /zw/_element_2/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/CLK . used_by 
SIG CLK . inst = /zw/_element_2
SIG /zw/_element_2/D_IN . kind = Signal
SIG /zw/_element_2/D_IN . name = D_IN
SIG /zw/_element_2/D_IN . path = /zw/_element_2/D_IN
SIG /zw/_element_2/D_IN . type = Int#(32)
SIG /zw/_element_2/D_IN . class = VSignal
SIG /zw/_element_2/D_IN . wave_format = {Int#(32) {/zw_2$D_IN}}
SIG /zw/_element_2/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/D_IN . used_by 
SIG D_IN . inst = /zw/_element_2
SIG /zw/_element_2/EN . kind = Signal
SIG /zw/_element_2/EN . name = EN
SIG /zw/_element_2/EN . path = /zw/_element_2/EN
SIG /zw/_element_2/EN . type = Bool
SIG /zw/_element_2/EN . class = VSignal
SIG /zw/_element_2/EN . wave_format = {Bool {/zw_2$EN}}
SIG /zw/_element_2/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/EN . used_by 
SIG EN . inst = /zw/_element_2
SIG /zw/_element_2/Q_OUT . kind = Signal
SIG /zw/_element_2/Q_OUT . name = Q_OUT
SIG /zw/_element_2/Q_OUT . path = /zw/_element_2/Q_OUT
SIG /zw/_element_2/Q_OUT . type = Int#(32)
SIG /zw/_element_2/Q_OUT . class = VSignal
SIG /zw/_element_2/Q_OUT . wave_format = {Int#(32) /zw_2}
SIG /zw/_element_2/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_2
SIG /zw/_element_2/RST . kind = Signal
SIG /zw/_element_2/RST . name = RST
SIG /zw/_element_2/RST . path = /zw/_element_2/RST
SIG /zw/_element_2/RST . type = Reset
SIG /zw/_element_2/RST . class = VSignal
SIG /zw/_element_2/RST . wave_format = 
SIG /zw/_element_2/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_2/RST . used_by 
SIG RST . inst = /zw/_element_2
SIG /zw/_element_3/CLK . kind = Signal
SIG /zw/_element_3/CLK . name = CLK
SIG /zw/_element_3/CLK . path = /zw/_element_3/CLK
SIG /zw/_element_3/CLK . type = Clock
SIG /zw/_element_3/CLK . class = VSignal
SIG /zw/_element_3/CLK . wave_format = 
SIG /zw/_element_3/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/CLK . used_by 
SIG CLK . inst = /zw/_element_3
SIG /zw/_element_3/D_IN . kind = Signal
SIG /zw/_element_3/D_IN . name = D_IN
SIG /zw/_element_3/D_IN . path = /zw/_element_3/D_IN
SIG /zw/_element_3/D_IN . type = Int#(32)
SIG /zw/_element_3/D_IN . class = VSignal
SIG /zw/_element_3/D_IN . wave_format = {Int#(32) {/zw_3$D_IN}}
SIG /zw/_element_3/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/D_IN . used_by 
SIG D_IN . inst = /zw/_element_3
SIG /zw/_element_3/EN . kind = Signal
SIG /zw/_element_3/EN . name = EN
SIG /zw/_element_3/EN . path = /zw/_element_3/EN
SIG /zw/_element_3/EN . type = Bool
SIG /zw/_element_3/EN . class = VSignal
SIG /zw/_element_3/EN . wave_format = {Bool {/zw_3$EN}}
SIG /zw/_element_3/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/EN . used_by 
SIG EN . inst = /zw/_element_3
SIG /zw/_element_3/Q_OUT . kind = Signal
SIG /zw/_element_3/Q_OUT . name = Q_OUT
SIG /zw/_element_3/Q_OUT . path = /zw/_element_3/Q_OUT
SIG /zw/_element_3/Q_OUT . type = Int#(32)
SIG /zw/_element_3/Q_OUT . class = VSignal
SIG /zw/_element_3/Q_OUT . wave_format = {Int#(32) /zw_3}
SIG /zw/_element_3/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_3
SIG /zw/_element_3/RST . kind = Signal
SIG /zw/_element_3/RST . name = RST
SIG /zw/_element_3/RST . path = /zw/_element_3/RST
SIG /zw/_element_3/RST . type = Reset
SIG /zw/_element_3/RST . class = VSignal
SIG /zw/_element_3/RST . wave_format = 
SIG /zw/_element_3/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_3/RST . used_by 
SIG RST . inst = /zw/_element_3
SIG /zw/_element_4/CLK . kind = Signal
SIG /zw/_element_4/CLK . name = CLK
SIG /zw/_element_4/CLK . path = /zw/_element_4/CLK
SIG /zw/_element_4/CLK . type = Clock
SIG /zw/_element_4/CLK . class = VSignal
SIG /zw/_element_4/CLK . wave_format = 
SIG /zw/_element_4/CLK . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/CLK . used_by 
SIG CLK . inst = /zw/_element_4
SIG /zw/_element_4/D_IN . kind = Signal
SIG /zw/_element_4/D_IN . name = D_IN
SIG /zw/_element_4/D_IN . path = /zw/_element_4/D_IN
SIG /zw/_element_4/D_IN . type = Int#(32)
SIG /zw/_element_4/D_IN . class = VSignal
SIG /zw/_element_4/D_IN . wave_format = {Int#(32) {/zw_4$D_IN}}
SIG /zw/_element_4/D_IN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/D_IN . used_by 
SIG D_IN . inst = /zw/_element_4
SIG /zw/_element_4/EN . kind = Signal
SIG /zw/_element_4/EN . name = EN
SIG /zw/_element_4/EN . path = /zw/_element_4/EN
SIG /zw/_element_4/EN . type = Bool
SIG /zw/_element_4/EN . class = VSignal
SIG /zw/_element_4/EN . wave_format = {Bool {/zw_4$EN}}
SIG /zw/_element_4/EN . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/EN . used_by 
SIG EN . inst = /zw/_element_4
SIG /zw/_element_4/Q_OUT . kind = Signal
SIG /zw/_element_4/Q_OUT . name = Q_OUT
SIG /zw/_element_4/Q_OUT . path = /zw/_element_4/Q_OUT
SIG /zw/_element_4/Q_OUT . type = Int#(32)
SIG /zw/_element_4/Q_OUT . class = VSignal
SIG /zw/_element_4/Q_OUT . wave_format = {Int#(32) /zw_4}
SIG /zw/_element_4/Q_OUT . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/Q_OUT . used_by 
SIG Q_OUT . inst = /zw/_element_4
SIG /zw/_element_4/RST . kind = Signal
SIG /zw/_element_4/RST . name = RST
SIG /zw/_element_4/RST . path = /zw/_element_4/RST
SIG /zw/_element_4/RST . type = Reset
SIG /zw/_element_4/RST . class = VSignal
SIG /zw/_element_4/RST . wave_format = 
SIG /zw/_element_4/RST . position = %/Libraries/List.bs 727 4 {Library List}
SIG /zw/_element_4/RST . used_by 
SIG RST . inst = /zw/_element_4
starting method testing
METH  /Loop/Body_0/aa_0.read name = read
METH  /Loop/Body_0/aa_0.read path = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.read path synth = /aa_0
METH  /Loop/Body_0/aa_0.read path bsv = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.read wave_format = {Int#(32) /aa_0}
METH  /Loop/Body_0/aa_0.read class = VMethod
METH  /Loop/Body_0/aa_0.read signals = /Loop/Body_0/aa_0/Q_OUT
METH  /Loop/Body_0/aa_0.read used_by = 
----
METH  /Loop/Body_0/aa_0.write name = write
METH  /Loop/Body_0/aa_0.write path = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.write path synth = /aa_0
METH  /Loop/Body_0/aa_0.write path bsv = /Loop/Body_0/aa_0
METH  /Loop/Body_0/aa_0.write wave_format = {Int#(32) {/aa_0$D_IN}} {Bool {/aa_0$EN}}
METH  /Loop/Body_0/aa_0.write class = VMethod
METH  /Loop/Body_0/aa_0.write signals = /Loop/Body_0/aa_0/D_IN /Loop/Body_0/aa_0/EN
METH  /Loop/Body_0/aa_0.write used_by = 
----
METH  /Loop/Body_0/bb_0.read name = read
METH  /Loop/Body_0/bb_0.read path = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.read path synth = /bb_0
METH  /Loop/Body_0/bb_0.read path bsv = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.read wave_format = {Int#(32) /bb_0}
METH  /Loop/Body_0/bb_0.read class = VMethod
METH  /Loop/Body_0/bb_0.read signals = /Loop/Body_0/bb_0/Q_OUT
METH  /Loop/Body_0/bb_0.read used_by = 
----
METH  /Loop/Body_0/bb_0.write name = write
METH  /Loop/Body_0/bb_0.write path = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.write path synth = /bb_0
METH  /Loop/Body_0/bb_0.write path bsv = /Loop/Body_0/bb_0
METH  /Loop/Body_0/bb_0.write wave_format = {Int#(32) {/bb_0$D_IN}} {Bool {/bb_0$EN}}
METH  /Loop/Body_0/bb_0.write class = VMethod
METH  /Loop/Body_0/bb_0.write signals = /Loop/Body_0/bb_0/D_IN /Loop/Body_0/bb_0/EN
METH  /Loop/Body_0/bb_0.write used_by = 
----
METH  /Loop/Body_1/aa_1.read name = read
METH  /Loop/Body_1/aa_1.read path = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.read path synth = /aa_1
METH  /Loop/Body_1/aa_1.read path bsv = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.read wave_format = {Int#(32) /aa_1}
METH  /Loop/Body_1/aa_1.read class = VMethod
METH  /Loop/Body_1/aa_1.read signals = /Loop/Body_1/aa_1/Q_OUT
METH  /Loop/Body_1/aa_1.read used_by = 
----
METH  /Loop/Body_1/aa_1.write name = write
METH  /Loop/Body_1/aa_1.write path = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.write path synth = /aa_1
METH  /Loop/Body_1/aa_1.write path bsv = /Loop/Body_1/aa_1
METH  /Loop/Body_1/aa_1.write wave_format = {Int#(32) {/aa_1$D_IN}} {Bool {/aa_1$EN}}
METH  /Loop/Body_1/aa_1.write class = VMethod
METH  /Loop/Body_1/aa_1.write signals = /Loop/Body_1/aa_1/D_IN /Loop/Body_1/aa_1/EN
METH  /Loop/Body_1/aa_1.write used_by = 
----
METH  /Loop/Body_1/bb_1.read name = read
METH  /Loop/Body_1/bb_1.read path = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.read path synth = /bb_1
METH  /Loop/Body_1/bb_1.read path bsv = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.read wave_format = {Int#(32) /bb_1}
METH  /Loop/Body_1/bb_1.read class = VMethod
METH  /Loop/Body_1/bb_1.read signals = /Loop/Body_1/bb_1/Q_OUT
METH  /Loop/Body_1/bb_1.read used_by = 
----
METH  /Loop/Body_1/bb_1.write name = write
METH  /Loop/Body_1/bb_1.write path = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.write path synth = /bb_1
METH  /Loop/Body_1/bb_1.write path bsv = /Loop/Body_1/bb_1
METH  /Loop/Body_1/bb_1.write wave_format = {Int#(32) {/bb_1$D_IN}} {Bool {/bb_1$EN}}
METH  /Loop/Body_1/bb_1.write class = VMethod
METH  /Loop/Body_1/bb_1.write signals = /Loop/Body_1/bb_1/D_IN /Loop/Body_1/bb_1/EN
METH  /Loop/Body_1/bb_1.write used_by = 
----
METH  /Loop/Body_2/aa_2.read name = read
METH  /Loop/Body_2/aa_2.read path = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.read path synth = /aa_2
METH  /Loop/Body_2/aa_2.read path bsv = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.read wave_format = {Int#(32) /aa_2}
METH  /Loop/Body_2/aa_2.read class = VMethod
METH  /Loop/Body_2/aa_2.read signals = /Loop/Body_2/aa_2/Q_OUT
METH  /Loop/Body_2/aa_2.read used_by = 
----
METH  /Loop/Body_2/aa_2.write name = write
METH  /Loop/Body_2/aa_2.write path = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.write path synth = /aa_2
METH  /Loop/Body_2/aa_2.write path bsv = /Loop/Body_2/aa_2
METH  /Loop/Body_2/aa_2.write wave_format = {Int#(32) {/aa_2$D_IN}} {Bool {/aa_2$EN}}
METH  /Loop/Body_2/aa_2.write class = VMethod
METH  /Loop/Body_2/aa_2.write signals = /Loop/Body_2/aa_2/D_IN /Loop/Body_2/aa_2/EN
METH  /Loop/Body_2/aa_2.write used_by = 
----
METH  /Loop/Body_2/bb_2.read name = read
METH  /Loop/Body_2/bb_2.read path = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.read path synth = /bb_2
METH  /Loop/Body_2/bb_2.read path bsv = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.read wave_format = {Int#(32) /bb_2}
METH  /Loop/Body_2/bb_2.read class = VMethod
METH  /Loop/Body_2/bb_2.read signals = /Loop/Body_2/bb_2/Q_OUT
METH  /Loop/Body_2/bb_2.read used_by = 
----
METH  /Loop/Body_2/bb_2.write name = write
METH  /Loop/Body_2/bb_2.write path = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.write path synth = /bb_2
METH  /Loop/Body_2/bb_2.write path bsv = /Loop/Body_2/bb_2
METH  /Loop/Body_2/bb_2.write wave_format = {Int#(32) {/bb_2$D_IN}} {Bool {/bb_2$EN}}
METH  /Loop/Body_2/bb_2.write class = VMethod
METH  /Loop/Body_2/bb_2.write signals = /Loop/Body_2/bb_2/D_IN /Loop/Body_2/bb_2/EN
METH  /Loop/Body_2/bb_2.write used_by = 
----
METH  /Loop/Body_3/aa_3.read name = read
METH  /Loop/Body_3/aa_3.read path = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.read path synth = /aa_3
METH  /Loop/Body_3/aa_3.read path bsv = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.read wave_format = {Int#(32) /aa_3}
METH  /Loop/Body_3/aa_3.read class = VMethod
METH  /Loop/Body_3/aa_3.read signals = /Loop/Body_3/aa_3/Q_OUT
METH  /Loop/Body_3/aa_3.read used_by = 
----
METH  /Loop/Body_3/aa_3.write name = write
METH  /Loop/Body_3/aa_3.write path = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.write path synth = /aa_3
METH  /Loop/Body_3/aa_3.write path bsv = /Loop/Body_3/aa_3
METH  /Loop/Body_3/aa_3.write wave_format = {Int#(32) {/aa_3$D_IN}} {Bool {/aa_3$EN}}
METH  /Loop/Body_3/aa_3.write class = VMethod
METH  /Loop/Body_3/aa_3.write signals = /Loop/Body_3/aa_3/D_IN /Loop/Body_3/aa_3/EN
METH  /Loop/Body_3/aa_3.write used_by = 
----
METH  /Loop/Body_3/bb_3.read name = read
METH  /Loop/Body_3/bb_3.read path = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.read path synth = /bb_3
METH  /Loop/Body_3/bb_3.read path bsv = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.read wave_format = {Int#(32) /bb_3}
METH  /Loop/Body_3/bb_3.read class = VMethod
METH  /Loop/Body_3/bb_3.read signals = /Loop/Body_3/bb_3/Q_OUT
METH  /Loop/Body_3/bb_3.read used_by = 
----
METH  /Loop/Body_3/bb_3.write name = write
METH  /Loop/Body_3/bb_3.write path = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.write path synth = /bb_3
METH  /Loop/Body_3/bb_3.write path bsv = /Loop/Body_3/bb_3
METH  /Loop/Body_3/bb_3.write wave_format = {Int#(32) {/bb_3$D_IN}} {Bool {/bb_3$EN}}
METH  /Loop/Body_3/bb_3.write class = VMethod
METH  /Loop/Body_3/bb_3.write signals = /Loop/Body_3/bb_3/D_IN /Loop/Body_3/bb_3/EN
METH  /Loop/Body_3/bb_3.write used_by = 
----
METH  /Loop/x_0.read name = read
METH  /Loop/x_0.read path = /Loop/x_0
METH  /Loop/x_0.read path synth = /x_0
METH  /Loop/x_0.read path bsv = /Loop/x_0
METH  /Loop/x_0.read wave_format = {Int#(32) /x_0}
METH  /Loop/x_0.read class = VMethod
METH  /Loop/x_0.read signals = /Loop/x_0/Q_OUT
METH  /Loop/x_0.read used_by = 
----
METH  /Loop/x_0.write name = write
METH  /Loop/x_0.write path = /Loop/x_0
METH  /Loop/x_0.write path synth = /x_0
METH  /Loop/x_0.write path bsv = /Loop/x_0
METH  /Loop/x_0.write wave_format = {Int#(32) {/x_0$D_IN}} {Bool {/x_0$EN}}
METH  /Loop/x_0.write class = VMethod
METH  /Loop/x_0.write signals = /Loop/x_0/D_IN /Loop/x_0/EN
METH  /Loop/x_0.write used_by = 
----
METH  /Loop/x_1.read name = read
METH  /Loop/x_1.read path = /Loop/x_1
METH  /Loop/x_1.read path synth = /x_1
METH  /Loop/x_1.read path bsv = /Loop/x_1
METH  /Loop/x_1.read wave_format = {Int#(32) /x_1}
METH  /Loop/x_1.read class = VMethod
METH  /Loop/x_1.read signals = /Loop/x_1/Q_OUT
METH  /Loop/x_1.read used_by = 
----
METH  /Loop/x_1.write name = write
METH  /Loop/x_1.write path = /Loop/x_1
METH  /Loop/x_1.write path synth = /x_1
METH  /Loop/x_1.write path bsv = /Loop/x_1
METH  /Loop/x_1.write wave_format = {Int#(32) {/x_1$D_IN}} {Bool {/x_1$EN}}
METH  /Loop/x_1.write class = VMethod
METH  /Loop/x_1.write signals = /Loop/x_1/D_IN /Loop/x_1/EN
METH  /Loop/x_1.write used_by = 
----
METH  /Loop/x_2.read name = read
METH  /Loop/x_2.read path = /Loop/x_2
METH  /Loop/x_2.read path synth = /x_2
METH  /Loop/x_2.read path bsv = /Loop/x_2
METH  /Loop/x_2.read wave_format = {Int#(32) /x_2}
METH  /Loop/x_2.read class = VMethod
METH  /Loop/x_2.read signals = /Loop/x_2/Q_OUT
METH  /Loop/x_2.read used_by = 
----
METH  /Loop/x_2.write name = write
METH  /Loop/x_2.write path = /Loop/x_2
METH  /Loop/x_2.write path synth = /x_2
METH  /Loop/x_2.write path bsv = /Loop/x_2
METH  /Loop/x_2.write wave_format = {Int#(32) {/x_2$D_IN}} {Bool {/x_2$EN}}
METH  /Loop/x_2.write class = VMethod
METH  /Loop/x_2.write signals = /Loop/x_2/D_IN /Loop/x_2/EN
METH  /Loop/x_2.write used_by = 
----
METH  /Loop/x_3.read name = read
METH  /Loop/x_3.read path = /Loop/x_3
METH  /Loop/x_3.read path synth = /x_3
METH  /Loop/x_3.read path bsv = /Loop/x_3
METH  /Loop/x_3.read wave_format = {Int#(32) /x_3}
METH  /Loop/x_3.read class = VMethod
METH  /Loop/x_3.read signals = /Loop/x_3/Q_OUT
METH  /Loop/x_3.read used_by = 
----
METH  /Loop/x_3.write name = write
METH  /Loop/x_3.write path = /Loop/x_3
METH  /Loop/x_3.write path synth = /x_3
METH  /Loop/x_3.write path bsv = /Loop/x_3
METH  /Loop/x_3.write wave_format = {Int#(32) {/x_3$D_IN}} {Bool {/x_3$EN}}
METH  /Loop/x_3.write class = VMethod
METH  /Loop/x_3.write signals = /Loop/x_3/D_IN /Loop/x_3/EN
METH  /Loop/x_3.write used_by = 
----
METH  /subis/_element_0.RDY_bar name = RDY_bar
METH  /subis/_element_0.RDY_bar path = /subis/_element_0
METH  /subis/_element_0.RDY_bar path synth = /subis_0
METH  /subis/_element_0.RDY_bar path bsv = /subis/_element_0
METH  /subis/_element_0.RDY_bar wave_format = {Bool /subis_0/RadyOnTheReadMethod}
METH  /subis/_element_0.RDY_bar class = VMethod
METH  /subis/_element_0.RDY_bar signals = /subis/_element_0/RadyOnTheReadMethod
METH  /subis/_element_0.RDY_bar used_by = 
----
METH  /subis/_element_0.bar name = bar
METH  /subis/_element_0.bar path = /subis/_element_0
METH  /subis/_element_0.bar path synth = /subis_0
METH  /subis/_element_0.bar path bsv = /subis/_element_0
METH  /subis/_element_0.bar wave_format = {Int#(32) /subis_0/bar}
METH  /subis/_element_0.bar class = VMethod
METH  /subis/_element_0.bar signals = /subis/_element_0/bar
METH  /subis/_element_0.bar used_by = 
----
METH  /subis/_element_0.foo name = foo
METH  /subis/_element_0.foo path = /subis/_element_0
METH  /subis/_element_0.foo path synth = /subis_0
METH  /subis/_element_0.foo path bsv = /subis/_element_0
METH  /subis/_element_0.foo wave_format = {Int#(32) /subis_0/foo_x} {Bool /subis_0/EN_foo}
METH  /subis/_element_0.foo class = VMethod
METH  /subis/_element_0.foo signals = /subis/_element_0/EN_foo /subis/_element_0/foo_x
METH  /subis/_element_0.foo used_by = 
----
METH  /subis/_element_0/barx.read name = read
METH  /subis/_element_0/barx.read path = /subis/_element_0/barx
METH  /subis/_element_0/barx.read path synth = /subis_0/barx
METH  /subis/_element_0/barx.read path bsv = /subis/_element_0/barx
METH  /subis/_element_0/barx.read wave_format = {Bit#(3) /subis_0/barx}
METH  /subis/_element_0/barx.read class = VMethod
METH  /subis/_element_0/barx.read signals = /subis/_element_0/barx/Q_OUT
METH  /subis/_element_0/barx.read used_by = /subis/_element_0.bar()
----
METH  /subis/_element_0/barx.write name = write
METH  /subis/_element_0/barx.write path = /subis/_element_0/barx
METH  /subis/_element_0/barx.write path synth = /subis_0/barx
METH  /subis/_element_0/barx.write path bsv = /subis/_element_0/barx
METH  /subis/_element_0/barx.write wave_format = {Bit#(3) {/subis_0/barx$D_IN}} {Bool {/subis_0/barx$EN}}
METH  /subis/_element_0/barx.write class = VMethod
METH  /subis/_element_0/barx.write signals = /subis/_element_0/barx/D_IN /subis/_element_0/barx/EN
METH  /subis/_element_0/barx.write used_by = 
----
METH  /subis/_element_0/foo2.read name = read
METH  /subis/_element_0/foo2.read path = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.read path synth = /subis_0/foo2
METH  /subis/_element_0/foo2.read path bsv = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.read wave_format = {Int#(32) /subis_0/foo2}
METH  /subis/_element_0/foo2.read class = VMethod
METH  /subis/_element_0/foo2.read signals = /subis/_element_0/foo2/Q_OUT
METH  /subis/_element_0/foo2.read used_by = /subis/_element_0.bar()
----
METH  /subis/_element_0/foo2.write name = write
METH  /subis/_element_0/foo2.write path = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.write path synth = /subis_0/foo2
METH  /subis/_element_0/foo2.write path bsv = /subis/_element_0/foo2
METH  /subis/_element_0/foo2.write wave_format = {Int#(32) {/subis_0/foo2$D_IN}} {Bool {/subis_0/foo2$EN}}
METH  /subis/_element_0/foo2.write class = VMethod
METH  /subis/_element_0/foo2.write signals = /subis/_element_0/foo2/D_IN /subis/_element_0/foo2/EN
METH  /subis/_element_0/foo2.write used_by = /subis/_element_0.foo()
----
METH  /subis/_element_1.RDY_bar name = RDY_bar
METH  /subis/_element_1.RDY_bar path = /subis/_element_1
METH  /subis/_element_1.RDY_bar path synth = /subis_1
METH  /subis/_element_1.RDY_bar path bsv = /subis/_element_1
METH  /subis/_element_1.RDY_bar wave_format = {Bool /subis_1/RadyOnTheReadMethod}
METH  /subis/_element_1.RDY_bar class = VMethod
METH  /subis/_element_1.RDY_bar signals = /subis/_element_1/RadyOnTheReadMethod
METH  /subis/_element_1.RDY_bar used_by = 
----
METH  /subis/_element_1.bar name = bar
METH  /subis/_element_1.bar path = /subis/_element_1
METH  /subis/_element_1.bar path synth = /subis_1
METH  /subis/_element_1.bar path bsv = /subis/_element_1
METH  /subis/_element_1.bar wave_format = {Int#(32) /subis_1/bar}
METH  /subis/_element_1.bar class = VMethod
METH  /subis/_element_1.bar signals = /subis/_element_1/bar
METH  /subis/_element_1.bar used_by = 
----
METH  /subis/_element_1.foo name = foo
METH  /subis/_element_1.foo path = /subis/_element_1
METH  /subis/_element_1.foo path synth = /subis_1
METH  /subis/_element_1.foo path bsv = /subis/_element_1
METH  /subis/_element_1.foo wave_format = {Int#(32) /subis_1/foo_x} {Bool /subis_1/EN_foo}
METH  /subis/_element_1.foo class = VMethod
METH  /subis/_element_1.foo signals = /subis/_element_1/EN_foo /subis/_element_1/foo_x
METH  /subis/_element_1.foo used_by = 
----
METH  /subis/_element_1/barx.read name = read
METH  /subis/_element_1/barx.read path = /subis/_element_1/barx
METH  /subis/_element_1/barx.read path synth = /subis_1/barx
METH  /subis/_element_1/barx.read path bsv = /subis/_element_1/barx
METH  /subis/_element_1/barx.read wave_format = {Bit#(3) /subis_1/barx}
METH  /subis/_element_1/barx.read class = VMethod
METH  /subis/_element_1/barx.read signals = /subis/_element_1/barx/Q_OUT
METH  /subis/_element_1/barx.read used_by = /subis/_element_1.bar()
----
METH  /subis/_element_1/barx.write name = write
METH  /subis/_element_1/barx.write path = /subis/_element_1/barx
METH  /subis/_element_1/barx.write path synth = /subis_1/barx
METH  /subis/_element_1/barx.write path bsv = /subis/_element_1/barx
METH  /subis/_element_1/barx.write wave_format = {Bit#(3) {/subis_1/barx$D_IN}} {Bool {/subis_1/barx$EN}}
METH  /subis/_element_1/barx.write class = VMethod
METH  /subis/_element_1/barx.write signals = /subis/_element_1/barx/D_IN /subis/_element_1/barx/EN
METH  /subis/_element_1/barx.write used_by = 
----
METH  /subis/_element_1/foo2.read name = read
METH  /subis/_element_1/foo2.read path = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.read path synth = /subis_1/foo2
METH  /subis/_element_1/foo2.read path bsv = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.read wave_format = {Int#(32) /subis_1/foo2}
METH  /subis/_element_1/foo2.read class = VMethod
METH  /subis/_element_1/foo2.read signals = /subis/_element_1/foo2/Q_OUT
METH  /subis/_element_1/foo2.read used_by = /subis/_element_1.bar()
----
METH  /subis/_element_1/foo2.write name = write
METH  /subis/_element_1/foo2.write path = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.write path synth = /subis_1/foo2
METH  /subis/_element_1/foo2.write path bsv = /subis/_element_1/foo2
METH  /subis/_element_1/foo2.write wave_format = {Int#(32) {/subis_1/foo2$D_IN}} {Bool {/subis_1/foo2$EN}}
METH  /subis/_element_1/foo2.write class = VMethod
METH  /subis/_element_1/foo2.write signals = /subis/_element_1/foo2/D_IN /subis/_element_1/foo2/EN
METH  /subis/_element_1/foo2.write used_by = /subis/_element_1.foo()
----
METH  /xx/_element_0.wget name = wget
METH  /xx/_element_0.wget path = /xx/_element_0
METH  /xx/_element_0.wget path synth = /xx_0
METH  /xx/_element_0.wget path bsv = /xx/_element_0
METH  /xx/_element_0.wget wave_format = {Test::Bar /xx_0/WGET}
METH  /xx/_element_0.wget class = VMethod
METH  /xx/_element_0.wget signals = /xx/_element_0/WGET
METH  /xx/_element_0.wget used_by = 
----
METH  /xx/_element_0.whas name = whas
METH  /xx/_element_0.whas path = /xx/_element_0
METH  /xx/_element_0.whas path synth = /xx_0
METH  /xx/_element_0.whas path bsv = /xx/_element_0
METH  /xx/_element_0.whas wave_format = {Bool /xx_0/WHAS}
METH  /xx/_element_0.whas class = VMethod
METH  /xx/_element_0.whas signals = /xx/_element_0/WHAS
METH  /xx/_element_0.whas used_by = 
----
METH  /xx/_element_0.wset name = wset
METH  /xx/_element_0.wset path = /xx/_element_0
METH  /xx/_element_0.wset path synth = /xx_0
METH  /xx/_element_0.wset path bsv = /xx/_element_0
METH  /xx/_element_0.wset wave_format = {Test::Bar /xx_0/WVAL} {Bool /xx_0/WSET}
METH  /xx/_element_0.wset class = VMethod
METH  /xx/_element_0.wset signals = /xx/_element_0/WSET /xx/_element_0/WVAL
METH  /xx/_element_0.wset used_by = 
----
METH  /xx/_element_1.wget name = wget
METH  /xx/_element_1.wget path = /xx/_element_1
METH  /xx/_element_1.wget path synth = /xx_1
METH  /xx/_element_1.wget path bsv = /xx/_element_1
METH  /xx/_element_1.wget wave_format = {Test::Bar /xx_1/WGET}
METH  /xx/_element_1.wget class = VMethod
METH  /xx/_element_1.wget signals = /xx/_element_1/WGET
METH  /xx/_element_1.wget used_by = 
----
METH  /xx/_element_1.whas name = whas
METH  /xx/_element_1.whas path = /xx/_element_1
METH  /xx/_element_1.whas path synth = /xx_1
METH  /xx/_element_1.whas path bsv = /xx/_element_1
METH  /xx/_element_1.whas wave_format = {Bool /xx_1/WHAS}
METH  /xx/_element_1.whas class = VMethod
METH  /xx/_element_1.whas signals = /xx/_element_1/WHAS
METH  /xx/_element_1.whas used_by = 
----
METH  /xx/_element_1.wset name = wset
METH  /xx/_element_1.wset path = /xx/_element_1
METH  /xx/_element_1.wset path synth = /xx_1
METH  /xx/_element_1.wset path bsv = /xx/_element_1
METH  /xx/_element_1.wset wave_format = {Test::Bar /xx_1/WVAL} {Bool /xx_1/WSET}
METH  /xx/_element_1.wset class = VMethod
METH  /xx/_element_1.wset signals = /xx/_element_1/WSET /xx/_element_1/WVAL
METH  /xx/_element_1.wset used_by = 
----
METH  /y/_element_0.read name = read
METH  /y/_element_0.read path = /y/_element_0
METH  /y/_element_0.read path synth = /y_0
METH  /y/_element_0.read path bsv = /y/_element_0
METH  /y/_element_0.read wave_format = {Int#(32) /y_0}
METH  /y/_element_0.read class = VMethod
METH  /y/_element_0.read signals = /y/_element_0/Q_OUT
METH  /y/_element_0.read used_by = 
----
METH  /y/_element_0.write name = write
METH  /y/_element_0.write path = /y/_element_0
METH  /y/_element_0.write path synth = /y_0
METH  /y/_element_0.write path bsv = /y/_element_0
METH  /y/_element_0.write wave_format = {Int#(32) {/y_0$D_IN}} {Bool {/y_0$EN}}
METH  /y/_element_0.write class = VMethod
METH  /y/_element_0.write signals = /y/_element_0/D_IN /y/_element_0/EN
METH  /y/_element_0.write used_by = 
----
METH  /y/_element_1.read name = read
METH  /y/_element_1.read path = /y/_element_1
METH  /y/_element_1.read path synth = /y_1
METH  /y/_element_1.read path bsv = /y/_element_1
METH  /y/_element_1.read wave_format = {Int#(32) /y_1}
METH  /y/_element_1.read class = VMethod
METH  /y/_element_1.read signals = /y/_element_1/Q_OUT
METH  /y/_element_1.read used_by = 
----
METH  /y/_element_1.write name = write
METH  /y/_element_1.write path = /y/_element_1
METH  /y/_element_1.write path synth = /y_1
METH  /y/_element_1.write path bsv = /y/_element_1
METH  /y/_element_1.write wave_format = {Int#(32) {/y_1$D_IN}} {Bool {/y_1$EN}}
METH  /y/_element_1.write class = VMethod
METH  /y/_element_1.write signals = /y/_element_1/D_IN /y/_element_1/EN
METH  /y/_element_1.write used_by = 
----
METH  /y/_element_2.read name = read
METH  /y/_element_2.read path = /y/_element_2
METH  /y/_element_2.read path synth = /y_2
METH  /y/_element_2.read path bsv = /y/_element_2
METH  /y/_element_2.read wave_format = {Int#(32) /y_2}
METH  /y/_element_2.read class = VMethod
METH  /y/_element_2.read signals = /y/_element_2/Q_OUT
METH  /y/_element_2.read used_by = 
----
METH  /y/_element_2.write name = write
METH  /y/_element_2.write path = /y/_element_2
METH  /y/_element_2.write path synth = /y_2
METH  /y/_element_2.write path bsv = /y/_element_2
METH  /y/_element_2.write wave_format = {Int#(32) {/y_2$D_IN}} {Bool {/y_2$EN}}
METH  /y/_element_2.write class = VMethod
METH  /y/_element_2.write signals = /y/_element_2/D_IN /y/_element_2/EN
METH  /y/_element_2.write used_by = 
----
METH  /y/_element_3.read name = read
METH  /y/_element_3.read path = /y/_element_3
METH  /y/_element_3.read path synth = /y_3
METH  /y/_element_3.read path bsv = /y/_element_3
METH  /y/_element_3.read wave_format = {Int#(32) /y_3}
METH  /y/_element_3.read class = VMethod
METH  /y/_element_3.read signals = /y/_element_3/Q_OUT
METH  /y/_element_3.read used_by = 
----
METH  /y/_element_3.write name = write
METH  /y/_element_3.write path = /y/_element_3
METH  /y/_element_3.write path synth = /y_3
METH  /y/_element_3.write path bsv = /y/_element_3
METH  /y/_element_3.write wave_format = {Int#(32) {/y_3$D_IN}} {Bool {/y_3$EN}}
METH  /y/_element_3.write class = VMethod
METH  /y/_element_3.write signals = /y/_element_3/D_IN /y/_element_3/EN
METH  /y/_element_3.write used_by = 
----
METH  /zw/_element_0.read name = read
METH  /zw/_element_0.read path = /zw/_element_0
METH  /zw/_element_0.read path synth = /zw_0
METH  /zw/_element_0.read path bsv = /zw/_element_0
METH  /zw/_element_0.read wave_format = {Int#(32) /zw_0}
METH  /zw/_element_0.read class = VMethod
METH  /zw/_element_0.read signals = /zw/_element_0/Q_OUT
METH  /zw/_element_0.read used_by = 
----
METH  /zw/_element_0.write name = write
METH  /zw/_element_0.write path = /zw/_element_0
METH  /zw/_element_0.write path synth = /zw_0
METH  /zw/_element_0.write path bsv = /zw/_element_0
METH  /zw/_element_0.write wave_format = {Int#(32) {/zw_0$D_IN}} {Bool {/zw_0$EN}}
METH  /zw/_element_0.write class = VMethod
METH  /zw/_element_0.write signals = /zw/_element_0/D_IN /zw/_element_0/EN
METH  /zw/_element_0.write used_by = 
----
METH  /zw/_element_1.read name = read
METH  /zw/_element_1.read path = /zw/_element_1
METH  /zw/_element_1.read path synth = /zw_1
METH  /zw/_element_1.read path bsv = /zw/_element_1
METH  /zw/_element_1.read wave_format = {Int#(32) /zw_1}
METH  /zw/_element_1.read class = VMethod
METH  /zw/_element_1.read signals = /zw/_element_1/Q_OUT
METH  /zw/_element_1.read used_by = 
----
METH  /zw/_element_1.write name = write
METH  /zw/_element_1.write path = /zw/_element_1
METH  /zw/_element_1.write path synth = /zw_1
METH  /zw/_element_1.write path bsv = /zw/_element_1
METH  /zw/_element_1.write wave_format = {Int#(32) {/zw_1$D_IN}} {Bool {/zw_1$EN}}
METH  /zw/_element_1.write class = VMethod
METH  /zw/_element_1.write signals = /zw/_element_1/D_IN /zw/_element_1/EN
METH  /zw/_element_1.write used_by = 
----
METH  /zw/_element_2.read name = read
METH  /zw/_element_2.read path = /zw/_element_2
METH  /zw/_element_2.read path synth = /zw_2
METH  /zw/_element_2.read path bsv = /zw/_element_2
METH  /zw/_element_2.read wave_format = {Int#(32) /zw_2}
METH  /zw/_element_2.read class = VMethod
METH  /zw/_element_2.read signals = /zw/_element_2/Q_OUT
METH  /zw/_element_2.read used_by = 
----
METH  /zw/_element_2.write name = write
METH  /zw/_element_2.write path = /zw/_element_2
METH  /zw/_element_2.write path synth = /zw_2
METH  /zw/_element_2.write path bsv = /zw/_element_2
METH  /zw/_element_2.write wave_format = {Int#(32) {/zw_2$D_IN}} {Bool {/zw_2$EN}}
METH  /zw/_element_2.write class = VMethod
METH  /zw/_element_2.write signals = /zw/_element_2/D_IN /zw/_element_2/EN
METH  /zw/_element_2.write used_by = 
----
METH  /zw/_element_3.read name = read
METH  /zw/_element_3.read path = /zw/_element_3
METH  /zw/_element_3.read path synth = /zw_3
METH  /zw/_element_3.read path bsv = /zw/_element_3
METH  /zw/_element_3.read wave_format = {Int#(32) /zw_3}
METH  /zw/_element_3.read class = VMethod
METH  /zw/_element_3.read signals = /zw/_element_3/Q_OUT
METH  /zw/_element_3.read used_by = 
----
METH  /zw/_element_3.write name = write
METH  /zw/_element_3.write path = /zw/_element_3
METH  /zw/_element_3.write path synth = /zw_3
METH  /zw/_element_3.write path bsv = /zw/_element_3
METH  /zw/_element_3.write wave_format = {Int#(32) {/zw_3$D_IN}} {Bool {/zw_3$EN}}
METH  /zw/_element_3.write class = VMethod
METH  /zw/_element_3.write signals = /zw/_element_3/D_IN /zw/_element_3/EN
METH  /zw/_element_3.write used_by = 
----
METH  /zw/_element_4.read name = read
METH  /zw/_element_4.read path = /zw/_element_4
METH  /zw/_element_4.read path synth = /zw_4
METH  /zw/_element_4.read path bsv = /zw/_element_4
METH  /zw/_element_4.read wave_format = {Int#(32) /zw_4}
METH  /zw/_element_4.read class = VMethod
METH  /zw/_element_4.read signals = /zw/_element_4/Q_OUT
METH  /zw/_element_4.read used_by = 
----
METH  /zw/_element_4.write name = write
METH  /zw/_element_4.write path = /zw/_element_4
METH  /zw/_element_4.write path synth = /zw_4
METH  /zw/_element_4.write path bsv = /zw/_element_4
METH  /zw/_element_4.write wave_format = {Int#(32) {/zw_4$D_IN}} {Bool {/zw_4$EN}}
METH  /zw/_element_4.write class = VMethod
METH  /zw/_element_4.write signals = /zw/_element_4/D_IN /zw/_element_4/EN
METH  /zw/_element_4.write used_by = 
----
Opening 2v.NovasRC.typed.dump for NovasRC script capture
Wave history captured in 2v.NovasRC.typed.tcl-out
Closing 2v.NovasRC.typed.dump
Opening 2v.NovasRC.bits.dump for NovasRC script capture
Wave history captured in 2v.NovasRC.bits.tcl-out
Closing 2v.NovasRC.bits.dump
Opening 2v.GtkWaveScript.typed.dump for GtkWaveScript script capture
Wave history captured in 2v.GtkWaveScript.typed.tcl-out
Closing 2v.GtkWaveScript.typed.dump
Opening 2v.GtkWaveScript.bits.dump for GtkWaveScript script capture
Wave history captured in 2v.GtkWaveScript.bits.tcl-out
Closing 2v.GtkWaveScript.bits.dump
